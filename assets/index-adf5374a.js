import{G as Y,E as Z,m as Q,$ as T,K as L,a0 as N}from"./index-73fb1ba1.js";const R=`{"id":11,"title":"用exif.js和canvas解决ios手机拍照上传照片旋转90度的问题","subTitle":"业务问题记录","link":null,"description":"前段时间遇到iphone机型拍照上传作为头像，照片会自动旋转90度的问题。找了一些资料后，解决了这个问题，记录一下。","content":"## 一、html页面部分\\n\\n\`\`\` html\\n<div class=\\"webuploader-container\\">\\n    <div class=\\"webuploader-pick\\">拍照</div>\\n    <div>\\n        <input\\n            type=\\"file\\"\\n            accept=\\"image/*\\"\\n            id=\\"capture\\"\\n            capture=\\"camera\\"\\n            style=\\"height: 44px;overflow: hidden;width: 180px;opacity: 0;\\"\\n        />\\n    </div>\\n</div>\\n\`\`\`\\n\\n## 二、页面业务逻辑部分（JQuery）\\n\\n\`\`\` javascript\\n<script> \\n$(\\"input#capture\\").on(\\"change\\", function() {\\n    $.showLoading(\\"上传中\\");\\n    var file = $(\\"#capture\\").get(0).files[0];\\n    // 图片旋转成功后的回调函数\\n    var callback = function(imgFile){    //这个imgFile就是旋转后图片\\n        var formData = new FormData();\\n        formData.append(\\"file\\", imgFile);\\n        // 上传图片到服务器\\n        $.ajax({\\n            method: \\"POST\\",\\n            url: \\"/user/upladHeader\\",\\n            data: formData,\\n            processData: false,\\n            dataType: \\"json\\",\\n            contentType: false,\\n            success: function(data) {\\n                if(data.data){\\n                    $.hideLoading();\\n                    $.toast(\\"操作成功\\", function() {\\n                    // ...\\n                    });\\n                }else {\\n                    $.hideLoading();\\n                    $.toast(\\"上传失败\\", \\"forbidden\\");\\n                }\\n            },\\n            error: function(data, e) {\\n                $.hideLoading();\\n                $.toast(\\"上传失败\\", \\"forbidden\\", function() {\\n                    window.location.href = newUrl + '&time='+((new Date()).getTime());\\n                });\\n             }\\n        });\\n    }\\n    // 调用翻转图片方法，回调函数会在图片翻转成功后执行\\n    rotatePhoto(file,callback)\\n});\\n<\/script>\\n\`\`\`\\n\\n## 三、最重要的js部分，图片翻转的逻辑\\n\\n**rotate-photo.js**\\n\\n\`\`\` javascript\\n/**\\n *对图片旋转处理\\n *\\n * @param {*} img\\n * @param {*} direction 旋转方向，left和right\\n * @param {*} canvas\\n * @returns\\n */\\nfunction rotateImg(img, direction, canvas) {\\n    //最小与最大旋转方向，图片旋转4次后回到原方向\\n    var min_step = 0;\\n    var max_step = 3;\\n\\n    //img的高度和宽度不能在img元素隐藏后获取，否则会出错\\n    if (img == null) {\\n        return;\\n    }\\n    var height = img.height;\\n    var width = img.width;\\n\\n    var step = 2;\\n    if (step == null) {\\n        step = min_step;\\n    }\\n    if (direction == 'right') {\\n        step++;\\n        //旋转到原位置，即超过最大值\\n        step > max_step && (step = min_step);\\n    } else {\\n        step--;\\n        step < min_step && (step = max_step);\\n    }\\n    //旋转角度以弧度值为参数\\n    var degree = step * 90 * Math.PI / 180;\\n    var ctx = canvas.getContext('2d');\\n    switch (step) {\\n        case 0:\\n            canvas.width = width;\\n            canvas.height = height;\\n            ctx.drawImage(img, 0, 0);\\n            break;\\n        case 1:\\n            canvas.width = height;\\n            canvas.height = width;\\n            ctx.rotate(degree);\\n            ctx.drawImage(img, 0, -height);\\n            break;\\n        case 2:\\n            canvas.width = width;\\n            canvas.height = height;\\n            ctx.rotate(degree);\\n            ctx.drawImage(img, -width, -height);\\n            break;\\n        case 3:\\n            canvas.width = height;\\n            canvas.height = width;\\n            ctx.rotate(degree);\\n            ctx.drawImage(img, -width, 0);\\n            break;\\n    }\\n}\\n\\n/**\\n *将base64转换成file对象\\n *\\n * @param {*} dataurl 图片的base64编码\\n * @param {*} filename file对象类型\\n * @returns\\n */\\nfunction dataURLtoFile(dataurl, filename = 'file') {\\n    let arr = dataurl.split(',')\\n    let mime = arr[0].match(/:(.*?);/)[1]\\n    let suffix = mime.split('/')[1]\\n    let bstr = atob(arr[1])\\n    let n = bstr.length\\n    let u8arr = new Uint8Array(n)\\n    while (n--) {\\n        u8arr[n] = bstr.charCodeAt(n)\\n    }\\n    return new File([u8arr], \`\${filename}.\${suffix}\`, {\\n        type: mime\\n    })\\n}\\n\\n/**\\n *旋转手机拍照变横后的照片\\n *\\n * @param {*} file 传入当前的input type=file\\n * @param {*} callback 回调函数，照片旋转后执行的事件\\n * @returns\\n */\\nfunction rotatePhoto(file, callback) {\\n    var Orientation = null;\\n    if (file) {\\n        console.log(\\"正在上传,请稍后...\\");\\n        var rFilter = /^(image\\\\/jpeg|image\\\\/png)$/i; // 检查图片格式\\n        if (!rFilter.test(file.type)) {\\n            return;\\n        }\\n\\n        //获取照片方向角属性，用户旋转控制\\n        EXIF.getData(file, function () {\\n            EXIF.getAllTags(this);\\n            Orientation = EXIF.getTag(this, 'Orientation');\\n        });\\n\\n        var oReader = new FileReader();\\n        oReader.onload = function (e) {\\n            var image = new Image();\\n            image.src = e.target.result;\\n            image.onload = function () {\\n                var expectWidth = this.naturalWidth;\\n                var expectHeight = this.naturalHeight;\\n                if (this.naturalWidth > this.naturalHeight && this.naturalWidth > 800) {\\n                    expectWidth = 800;\\n                    expectHeight = expectWidth * this.naturalHeight / this.naturalWidth;\\n                } else if (this.naturalHeight > this.naturalWidth && this.naturalHeight > 1200) {\\n                    expectHeight = 1200;\\n                    expectWidth = expectHeight * this.naturalWidth / this.naturalHeight;\\n                }\\n                var canvas = document.createElement(\\"canvas\\");\\n                var ctx = canvas.getContext(\\"2d\\");\\n                canvas.width = expectWidth;\\n                canvas.height = expectHeight;\\n                ctx.drawImage(this, 0, 0, expectWidth, expectHeight);\\n                var u = navigator.userAgent;\\n                if (Orientation != \\"\\" && Orientation != 1) {\\n                    //alert('旋转处理');\\n                    switch (Orientation) {\\n                        case 6: //需要顺时针（向左）90度旋转\\n                            console.log('需要顺时针（向左）90度旋转');\\n                            rotateImg(this, 'left', canvas);\\n                            break;\\n                        case 8: //需要逆时针（向右）90度旋转\\n                            console.log('需要逆时针（向右）90度旋转');\\n                            rotateImg(this, 'right', canvas);\\n                            break;\\n                        case 3: //需要180度旋转\\n                            console.log('需要180度旋转');\\n                            rotateImg(this, 'right', canvas); //转两次\\n                            rotateImg(this, 'right', canvas);\\n                            break;\\n                    }\\n                }\\n                base64 = canvas.toDataURL(\\"image/jpeg\\", 0.8);\\n                var type = 'jpeg';\\n                var fixtype = function (type) {\\n                    type = type.toLocaleLowerCase().replace(/jpg/i, 'jpeg');\\n                    var r = type.match(/png|jpeg|bmp|gif/)[0];\\n                    return 'image/' + r;\\n                };\\n                base64 = base64.replace(fixtype(type), 'image/jpeg');\\n                // 将base64转换成file对象\\n                var base64ToFile = dataURLtoFile(base64);\\n                //把已经旋转过的图片file对象通过回调函数返回\\n                callback(base64ToFile)\\n            };\\n        };\\n        oReader.readAsDataURL(file);\\n    }\\n}\\n\`\`\`\\n\\n## 四、附 exif.js代码\\n\\n**exif.js**\\n\\n\`\`\` javascript\\n(function() {\\n\\n    var debug = false;\\n\\n    var root = this;\\n\\n    var EXIF = function(obj) {\\n        if (obj instanceof EXIF) return obj;\\n        if (!(this instanceof EXIF)) return new EXIF(obj);\\n        this.EXIFwrapped = obj;\\n    };\\n\\n    if (typeof exports !== 'undefined') {\\n        if (typeof module !== 'undefined' && module.exports) {\\n            exports = module.exports = EXIF;\\n        }\\n        exports.EXIF = EXIF;\\n    } else {\\n        root.EXIF = EXIF;\\n    }\\n\\n    var ExifTags = EXIF.Tags = {\\n\\n        // version tags\\n        0x9000 : \\"ExifVersion\\",             // EXIF version\\n        0xA000 : \\"FlashpixVersion\\",         // Flashpix format version\\n\\n        // colorspace tags\\n        0xA001 : \\"ColorSpace\\",              // Color space information tag\\n\\n        // image configuration\\n        0xA002 : \\"PixelXDimension\\",         // Valid width of meaningful image\\n        0xA003 : \\"PixelYDimension\\",         // Valid height of meaningful image\\n        0x9101 : \\"ComponentsConfiguration\\", // Information about channels\\n        0x9102 : \\"CompressedBitsPerPixel\\",  // Compressed bits per pixel\\n\\n        // user information\\n        0x927C : \\"MakerNote\\",               // Any desired information written by the manufacturer\\n        0x9286 : \\"UserComment\\",             // Comments by user\\n\\n        // related file\\n        0xA004 : \\"RelatedSoundFile\\",        // Name of related sound file\\n\\n        // date and time\\n        0x9003 : \\"DateTimeOriginal\\",        // Date and time when the original image was generated\\n        0x9004 : \\"DateTimeDigitized\\",       // Date and time when the image was stored digitally\\n        0x9290 : \\"SubsecTime\\",              // Fractions of seconds for DateTime\\n        0x9291 : \\"SubsecTimeOriginal\\",      // Fractions of seconds for DateTimeOriginal\\n        0x9292 : \\"SubsecTimeDigitized\\",     // Fractions of seconds for DateTimeDigitized\\n\\n        // picture-taking conditions\\n        0x829A : \\"ExposureTime\\",            // Exposure time (in seconds)\\n        0x829D : \\"FNumber\\",                 // F number\\n        0x8822 : \\"ExposureProgram\\",         // Exposure program\\n        0x8824 : \\"SpectralSensitivity\\",     // Spectral sensitivity\\n        0x8827 : \\"ISOSpeedRatings\\",         // ISO speed rating\\n        0x8828 : \\"OECF\\",                    // Optoelectric conversion factor\\n        0x9201 : \\"ShutterSpeedValue\\",       // Shutter speed\\n        0x9202 : \\"ApertureValue\\",           // Lens aperture\\n        0x9203 : \\"BrightnessValue\\",         // Value of brightness\\n        0x9204 : \\"ExposureBias\\",            // Exposure bias\\n        0x9205 : \\"MaxApertureValue\\",        // Smallest F number of lens\\n        0x9206 : \\"SubjectDistance\\",         // Distance to subject in meters\\n        0x9207 : \\"MeteringMode\\",            // Metering mode\\n        0x9208 : \\"LightSource\\",             // Kind of light source\\n        0x9209 : \\"Flash\\",                   // Flash status\\n        0x9214 : \\"SubjectArea\\",             // Location and area of main subject\\n        0x920A : \\"FocalLength\\",             // Focal length of the lens in mm\\n        0xA20B : \\"FlashEnergy\\",             // Strobe energy in BCPS\\n        0xA20C : \\"SpatialFrequencyResponse\\",    //\\n        0xA20E : \\"FocalPlaneXResolution\\",   // Number of pixels in width direction per FocalPlaneResolutionUnit\\n        0xA20F : \\"FocalPlaneYResolution\\",   // Number of pixels in height direction per FocalPlaneResolutionUnit\\n        0xA210 : \\"FocalPlaneResolutionUnit\\",    // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution\\n        0xA214 : \\"SubjectLocation\\",         // Location of subject in image\\n        0xA215 : \\"ExposureIndex\\",           // Exposure index selected on camera\\n        0xA217 : \\"SensingMethod\\",           // Image sensor type\\n        0xA300 : \\"FileSource\\",              // Image source (3 == DSC)\\n        0xA301 : \\"SceneType\\",               // Scene type (1 == directly photographed)\\n        0xA302 : \\"CFAPattern\\",              // Color filter array geometric pattern\\n        0xA401 : \\"CustomRendered\\",          // Special processing\\n        0xA402 : \\"ExposureMode\\",            // Exposure mode\\n        0xA403 : \\"WhiteBalance\\",            // 1 = auto white balance, 2 = manual\\n        0xA404 : \\"DigitalZoomRation\\",       // Digital zoom ratio\\n        0xA405 : \\"FocalLengthIn35mmFilm\\",   // Equivalent foacl length assuming 35mm film camera (in mm)\\n        0xA406 : \\"SceneCaptureType\\",        // Type of scene\\n        0xA407 : \\"GainControl\\",             // Degree of overall image gain adjustment\\n        0xA408 : \\"Contrast\\",                // Direction of contrast processing applied by camera\\n        0xA409 : \\"Saturation\\",              // Direction of saturation processing applied by camera\\n        0xA40A : \\"Sharpness\\",               // Direction of sharpness processing applied by camera\\n        0xA40B : \\"DeviceSettingDescription\\",    //\\n        0xA40C : \\"SubjectDistanceRange\\",    // Distance to subject\\n\\n        // other tags\\n        0xA005 : \\"InteroperabilityIFDPointer\\",\\n        0xA420 : \\"ImageUniqueID\\"            // Identifier assigned uniquely to each image\\n    };\\n\\n    var TiffTags = EXIF.TiffTags = {\\n        0x0100 : \\"ImageWidth\\",\\n        0x0101 : \\"ImageHeight\\",\\n        0x8769 : \\"ExifIFDPointer\\",\\n        0x8825 : \\"GPSInfoIFDPointer\\",\\n        0xA005 : \\"InteroperabilityIFDPointer\\",\\n        0x0102 : \\"BitsPerSample\\",\\n        0x0103 : \\"Compression\\",\\n        0x0106 : \\"PhotometricInterpretation\\",\\n        0x0112 : \\"Orientation\\",\\n        0x0115 : \\"SamplesPerPixel\\",\\n        0x011C : \\"PlanarConfiguration\\",\\n        0x0212 : \\"YCbCrSubSampling\\",\\n        0x0213 : \\"YCbCrPositioning\\",\\n        0x011A : \\"XResolution\\",\\n        0x011B : \\"YResolution\\",\\n        0x0128 : \\"ResolutionUnit\\",\\n        0x0111 : \\"StripOffsets\\",\\n        0x0116 : \\"RowsPerStrip\\",\\n        0x0117 : \\"StripByteCounts\\",\\n        0x0201 : \\"JPEGInterchangeFormat\\",\\n        0x0202 : \\"JPEGInterchangeFormatLength\\",\\n        0x012D : \\"TransferFunction\\",\\n        0x013E : \\"WhitePoint\\",\\n        0x013F : \\"PrimaryChromaticities\\",\\n        0x0211 : \\"YCbCrCoefficients\\",\\n        0x0214 : \\"ReferenceBlackWhite\\",\\n        0x0132 : \\"DateTime\\",\\n        0x010E : \\"ImageDescription\\",\\n        0x010F : \\"Make\\",\\n        0x0110 : \\"Model\\",\\n        0x0131 : \\"Software\\",\\n        0x013B : \\"Artist\\",\\n        0x8298 : \\"Copyright\\"\\n    };\\n\\n    var GPSTags = EXIF.GPSTags = {\\n        0x0000 : \\"GPSVersionID\\",\\n        0x0001 : \\"GPSLatitudeRef\\",\\n        0x0002 : \\"GPSLatitude\\",\\n        0x0003 : \\"GPSLongitudeRef\\",\\n        0x0004 : \\"GPSLongitude\\",\\n        0x0005 : \\"GPSAltitudeRef\\",\\n        0x0006 : \\"GPSAltitude\\",\\n        0x0007 : \\"GPSTimeStamp\\",\\n        0x0008 : \\"GPSSatellites\\",\\n        0x0009 : \\"GPSStatus\\",\\n        0x000A : \\"GPSMeasureMode\\",\\n        0x000B : \\"GPSDOP\\",\\n        0x000C : \\"GPSSpeedRef\\",\\n        0x000D : \\"GPSSpeed\\",\\n        0x000E : \\"GPSTrackRef\\",\\n        0x000F : \\"GPSTrack\\",\\n        0x0010 : \\"GPSImgDirectionRef\\",\\n        0x0011 : \\"GPSImgDirection\\",\\n        0x0012 : \\"GPSMapDatum\\",\\n        0x0013 : \\"GPSDestLatitudeRef\\",\\n        0x0014 : \\"GPSDestLatitude\\",\\n        0x0015 : \\"GPSDestLongitudeRef\\",\\n        0x0016 : \\"GPSDestLongitude\\",\\n        0x0017 : \\"GPSDestBearingRef\\",\\n        0x0018 : \\"GPSDestBearing\\",\\n        0x0019 : \\"GPSDestDistanceRef\\",\\n        0x001A : \\"GPSDestDistance\\",\\n        0x001B : \\"GPSProcessingMethod\\",\\n        0x001C : \\"GPSAreaInformation\\",\\n        0x001D : \\"GPSDateStamp\\",\\n        0x001E : \\"GPSDifferential\\"\\n    };\\n\\n     // EXIF 2.3 Spec\\n    var IFD1Tags = EXIF.IFD1Tags = {\\n        0x0100: \\"ImageWidth\\",\\n        0x0101: \\"ImageHeight\\",\\n        0x0102: \\"BitsPerSample\\",\\n        0x0103: \\"Compression\\",\\n        0x0106: \\"PhotometricInterpretation\\",\\n        0x0111: \\"StripOffsets\\",\\n        0x0112: \\"Orientation\\",\\n        0x0115: \\"SamplesPerPixel\\",\\n        0x0116: \\"RowsPerStrip\\",\\n        0x0117: \\"StripByteCounts\\",\\n        0x011A: \\"XResolution\\",\\n        0x011B: \\"YResolution\\",\\n        0x011C: \\"PlanarConfiguration\\",\\n        0x0128: \\"ResolutionUnit\\",\\n        0x0201: \\"JpegIFOffset\\",    // When image format is JPEG, this value show offset to JPEG data stored.(aka \\"ThumbnailOffset\\" or \\"JPEGInterchangeFormat\\")\\n        0x0202: \\"JpegIFByteCount\\", // When image format is JPEG, this value shows data size of JPEG image (aka \\"ThumbnailLength\\" or \\"JPEGInterchangeFormatLength\\")\\n        0x0211: \\"YCbCrCoefficients\\",\\n        0x0212: \\"YCbCrSubSampling\\",\\n        0x0213: \\"YCbCrPositioning\\",\\n        0x0214: \\"ReferenceBlackWhite\\"\\n    };\\n\\n    var StringValues = EXIF.StringValues = {\\n        ExposureProgram : {\\n            0 : \\"Not defined\\",\\n            1 : \\"Manual\\",\\n            2 : \\"Normal program\\",\\n            3 : \\"Aperture priority\\",\\n            4 : \\"Shutter priority\\",\\n            5 : \\"Creative program\\",\\n            6 : \\"Action program\\",\\n            7 : \\"Portrait mode\\",\\n            8 : \\"Landscape mode\\"\\n        },\\n        MeteringMode : {\\n            0 : \\"Unknown\\",\\n            1 : \\"Average\\",\\n            2 : \\"CenterWeightedAverage\\",\\n            3 : \\"Spot\\",\\n            4 : \\"MultiSpot\\",\\n            5 : \\"Pattern\\",\\n            6 : \\"Partial\\",\\n            255 : \\"Other\\"\\n        },\\n        LightSource : {\\n            0 : \\"Unknown\\",\\n            1 : \\"Daylight\\",\\n            2 : \\"Fluorescent\\",\\n            3 : \\"Tungsten (incandescent light)\\",\\n            4 : \\"Flash\\",\\n            9 : \\"Fine weather\\",\\n            10 : \\"Cloudy weather\\",\\n            11 : \\"Shade\\",\\n            12 : \\"Daylight fluorescent (D 5700 - 7100K)\\",\\n            13 : \\"Day white fluorescent (N 4600 - 5400K)\\",\\n            14 : \\"Cool white fluorescent (W 3900 - 4500K)\\",\\n            15 : \\"White fluorescent (WW 3200 - 3700K)\\",\\n            17 : \\"Standard light A\\",\\n            18 : \\"Standard light B\\",\\n            19 : \\"Standard light C\\",\\n            20 : \\"D55\\",\\n            21 : \\"D65\\",\\n            22 : \\"D75\\",\\n            23 : \\"D50\\",\\n            24 : \\"ISO studio tungsten\\",\\n            255 : \\"Other\\"\\n        },\\n        Flash : {\\n            0x0000 : \\"Flash did not fire\\",\\n            0x0001 : \\"Flash fired\\",\\n            0x0005 : \\"Strobe return light not detected\\",\\n            0x0007 : \\"Strobe return light detected\\",\\n            0x0009 : \\"Flash fired, compulsory flash mode\\",\\n            0x000D : \\"Flash fired, compulsory flash mode, return light not detected\\",\\n            0x000F : \\"Flash fired, compulsory flash mode, return light detected\\",\\n            0x0010 : \\"Flash did not fire, compulsory flash mode\\",\\n            0x0018 : \\"Flash did not fire, auto mode\\",\\n            0x0019 : \\"Flash fired, auto mode\\",\\n            0x001D : \\"Flash fired, auto mode, return light not detected\\",\\n            0x001F : \\"Flash fired, auto mode, return light detected\\",\\n            0x0020 : \\"No flash function\\",\\n            0x0041 : \\"Flash fired, red-eye reduction mode\\",\\n            0x0045 : \\"Flash fired, red-eye reduction mode, return light not detected\\",\\n            0x0047 : \\"Flash fired, red-eye reduction mode, return light detected\\",\\n            0x0049 : \\"Flash fired, compulsory flash mode, red-eye reduction mode\\",\\n            0x004D : \\"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected\\",\\n            0x004F : \\"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected\\",\\n            0x0059 : \\"Flash fired, auto mode, red-eye reduction mode\\",\\n            0x005D : \\"Flash fired, auto mode, return light not detected, red-eye reduction mode\\",\\n            0x005F : \\"Flash fired, auto mode, return light detected, red-eye reduction mode\\"\\n        },\\n        SensingMethod : {\\n            1 : \\"Not defined\\",\\n            2 : \\"One-chip color area sensor\\",\\n            3 : \\"Two-chip color area sensor\\",\\n            4 : \\"Three-chip color area sensor\\",\\n            5 : \\"Color sequential area sensor\\",\\n            7 : \\"Trilinear sensor\\",\\n            8 : \\"Color sequential linear sensor\\"\\n        },\\n        SceneCaptureType : {\\n            0 : \\"Standard\\",\\n            1 : \\"Landscape\\",\\n            2 : \\"Portrait\\",\\n            3 : \\"Night scene\\"\\n        },\\n        SceneType : {\\n            1 : \\"Directly photographed\\"\\n        },\\n        CustomRendered : {\\n            0 : \\"Normal process\\",\\n            1 : \\"Custom process\\"\\n        },\\n        WhiteBalance : {\\n            0 : \\"Auto white balance\\",\\n            1 : \\"Manual white balance\\"\\n        },\\n        GainControl : {\\n            0 : \\"None\\",\\n            1 : \\"Low gain up\\",\\n            2 : \\"High gain up\\",\\n            3 : \\"Low gain down\\",\\n            4 : \\"High gain down\\"\\n        },\\n        Contrast : {\\n            0 : \\"Normal\\",\\n            1 : \\"Soft\\",\\n            2 : \\"Hard\\"\\n        },\\n        Saturation : {\\n            0 : \\"Normal\\",\\n            1 : \\"Low saturation\\",\\n            2 : \\"High saturation\\"\\n        },\\n        Sharpness : {\\n            0 : \\"Normal\\",\\n            1 : \\"Soft\\",\\n            2 : \\"Hard\\"\\n        },\\n        SubjectDistanceRange : {\\n            0 : \\"Unknown\\",\\n            1 : \\"Macro\\",\\n            2 : \\"Close view\\",\\n            3 : \\"Distant view\\"\\n        },\\n        FileSource : {\\n            3 : \\"DSC\\"\\n        },\\n\\n        Components : {\\n            0 : \\"\\",\\n            1 : \\"Y\\",\\n            2 : \\"Cb\\",\\n            3 : \\"Cr\\",\\n            4 : \\"R\\",\\n            5 : \\"G\\",\\n            6 : \\"B\\"\\n        }\\n    };\\n\\n    function addEvent(element, event, handler) {\\n        if (element.addEventListener) {\\n            element.addEventListener(event, handler, false);\\n        } else if (element.attachEvent) {\\n            element.attachEvent(\\"on\\" + event, handler);\\n        }\\n    }\\n\\n    function imageHasData(img) {\\n        return !!(img.exifdata);\\n    }\\n\\n\\n    function base64ToArrayBuffer(base64, contentType) {\\n        contentType = contentType || base64.match(/^data\\\\:([^\\\\;]+)\\\\;base64,/mi)[1] || ''; // e.g. 'data:image/jpeg;base64,...' => 'image/jpeg'\\n        base64 = base64.replace(/^data\\\\:([^\\\\;]+)\\\\;base64,/gmi, '');\\n        var binary = atob(base64);\\n        var len = binary.length;\\n        var buffer = new ArrayBuffer(len);\\n        var view = new Uint8Array(buffer);\\n        for (var i = 0; i < len; i++) {\\n            view[i] = binary.charCodeAt(i);\\n        }\\n        return buffer;\\n    }\\n\\n    function objectURLToBlob(url, callback) {\\n        var http = new XMLHttpRequest();\\n        http.open(\\"GET\\", url, true);\\n        http.responseType = \\"blob\\";\\n        http.onload = function(e) {\\n            if (this.status == 200 || this.status === 0) {\\n                callback(this.response);\\n            }\\n        };\\n        http.send();\\n    }\\n\\n    function getImageData(img, callback) {\\n        function handleBinaryFile(binFile) {\\n            var data = findEXIFinJPEG(binFile);\\n            img.exifdata = data || {};\\n            var iptcdata = findIPTCinJPEG(binFile);\\n            img.iptcdata = iptcdata || {};\\n            if (EXIF.isXmpEnabled) {\\n               var xmpdata= findXMPinJPEG(binFile);\\n               img.xmpdata = xmpdata || {};               \\n            }\\n            if (callback) {\\n                callback.call(img);\\n            }\\n        }\\n\\n        if (img.src) {\\n            if (/^data\\\\:/i.test(img.src)) { // Data URI\\n                var arrayBuffer = base64ToArrayBuffer(img.src);\\n                handleBinaryFile(arrayBuffer);\\n\\n            } else if (/^blob\\\\:/i.test(img.src)) { // Object URL\\n                var fileReader = new FileReader();\\n                fileReader.onload = function(e) {\\n                    handleBinaryFile(e.target.result);\\n                };\\n                objectURLToBlob(img.src, function (blob) {\\n                    fileReader.readAsArrayBuffer(blob);\\n                });\\n            } else {\\n                var http = new XMLHttpRequest();\\n                http.onload = function() {\\n                    if (this.status == 200 || this.status === 0) {\\n                        handleBinaryFile(http.response);\\n                    } else {\\n                        throw \\"Could not load image\\";\\n                    }\\n                    http = null;\\n                };\\n                http.open(\\"GET\\", img.src, true);\\n                http.responseType = \\"arraybuffer\\";\\n                http.send(null);\\n            }\\n        } else if (self.FileReader && (img instanceof self.Blob || img instanceof self.File)) {\\n            var fileReader = new FileReader();\\n            fileReader.onload = function(e) {\\n                if (debug) console.log(\\"Got file of length \\" + e.target.result.byteLength);\\n                handleBinaryFile(e.target.result);\\n            };\\n\\n            fileReader.readAsArrayBuffer(img);\\n        }\\n    }\\n\\n    function findEXIFinJPEG(file) {\\n        var dataView = new DataView(file);\\n\\n        if (debug) console.log(\\"Got file of length \\" + file.byteLength);\\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\\n            if (debug) console.log(\\"Not a valid JPEG\\");\\n            return false; // not a valid jpeg\\n        }\\n\\n        var offset = 2,\\n            length = file.byteLength,\\n            marker;\\n\\n        while (offset < length) {\\n            if (dataView.getUint8(offset) != 0xFF) {\\n                if (debug) console.log(\\"Not a valid marker at offset \\" + offset + \\", found: \\" + dataView.getUint8(offset));\\n                return false; // not a valid marker, something is wrong\\n            }\\n\\n            marker = dataView.getUint8(offset + 1);\\n            if (debug) console.log(marker);\\n\\n            // we could implement handling for other markers here,\\n            // but we're only looking for 0xFFE1 for EXIF data\\n\\n            if (marker == 225) {\\n                if (debug) console.log(\\"Found 0xFFE1 marker\\");\\n\\n                return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);\\n\\n                // offset += 2 + file.getShortAt(offset+2, true);\\n\\n            } else {\\n                offset += 2 + dataView.getUint16(offset+2);\\n            }\\n\\n        }\\n\\n    }\\n\\n    function findIPTCinJPEG(file) {\\n        var dataView = new DataView(file);\\n\\n        if (debug) console.log(\\"Got file of length \\" + file.byteLength);\\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\\n            if (debug) console.log(\\"Not a valid JPEG\\");\\n            return false; // not a valid jpeg\\n        }\\n\\n        var offset = 2,\\n            length = file.byteLength;\\n\\n\\n        var isFieldSegmentStart = function(dataView, offset){\\n            return (\\n                dataView.getUint8(offset) === 0x38 &&\\n                dataView.getUint8(offset+1) === 0x42 &&\\n                dataView.getUint8(offset+2) === 0x49 &&\\n                dataView.getUint8(offset+3) === 0x4D &&\\n                dataView.getUint8(offset+4) === 0x04 &&\\n                dataView.getUint8(offset+5) === 0x04\\n            );\\n        };\\n\\n        while (offset < length) {\\n\\n            if ( isFieldSegmentStart(dataView, offset )){\\n\\n                // Get the length of the name header (which is padded to an even number of bytes)\\n                var nameHeaderLength = dataView.getUint8(offset+7);\\n                if(nameHeaderLength % 2 !== 0) nameHeaderLength += 1;\\n                // Check for pre photoshop 6 format\\n                if(nameHeaderLength === 0) {\\n                    // Always 4\\n                    nameHeaderLength = 4;\\n                }\\n\\n                var startOffset = offset + 8 + nameHeaderLength;\\n                var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);\\n\\n                return readIPTCData(file, startOffset, sectionLength);\\n\\n                break;\\n\\n            }\\n\\n\\n            // Not the marker, continue searching\\n            offset++;\\n\\n        }\\n\\n    }\\n    var IptcFieldMap = {\\n        0x78 : 'caption',\\n        0x6E : 'credit',\\n        0x19 : 'keywords',\\n        0x37 : 'dateCreated',\\n        0x50 : 'byline',\\n        0x55 : 'bylineTitle',\\n        0x7A : 'captionWriter',\\n        0x69 : 'headline',\\n        0x74 : 'copyright',\\n        0x0F : 'category'\\n    };\\n    function readIPTCData(file, startOffset, sectionLength){\\n        var dataView = new DataView(file);\\n        var data = {};\\n        var fieldValue, fieldName, dataSize, segmentType, segmentSize;\\n        var segmentStartPos = startOffset;\\n        while(segmentStartPos < startOffset+sectionLength) {\\n            if(dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos+1) === 0x02){\\n                segmentType = dataView.getUint8(segmentStartPos+2);\\n                if(segmentType in IptcFieldMap) {\\n                    dataSize = dataView.getInt16(segmentStartPos+3);\\n                    segmentSize = dataSize + 5;\\n                    fieldName = IptcFieldMap[segmentType];\\n                    fieldValue = getStringFromDB(dataView, segmentStartPos+5, dataSize);\\n                    // Check if we already stored a value with this name\\n                    if(data.hasOwnProperty(fieldName)) {\\n                        // Value already stored with this name, create multivalue field\\n                        if(data[fieldName] instanceof Array) {\\n                            data[fieldName].push(fieldValue);\\n                        }\\n                        else {\\n                            data[fieldName] = [data[fieldName], fieldValue];\\n                        }\\n                    }\\n                    else {\\n                        data[fieldName] = fieldValue;\\n                    }\\n                }\\n\\n            }\\n            segmentStartPos++;\\n        }\\n        return data;\\n    }\\n\\n\\n\\n    function readTags(file, tiffStart, dirStart, strings, bigEnd) {\\n        var entries = file.getUint16(dirStart, !bigEnd),\\n            tags = {},\\n            entryOffset, tag,\\n            i;\\n\\n        for (i=0;i<entries;i++) {\\n            entryOffset = dirStart + i*12 + 2;\\n            tag = strings[file.getUint16(entryOffset, !bigEnd)];\\n            if (!tag && debug) console.log(\\"Unknown tag: \\" + file.getUint16(entryOffset, !bigEnd));\\n            tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);\\n        }\\n        return tags;\\n    }\\n\\n\\n    function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {\\n        var type = file.getUint16(entryOffset+2, !bigEnd),\\n            numValues = file.getUint32(entryOffset+4, !bigEnd),\\n            valueOffset = file.getUint32(entryOffset+8, !bigEnd) + tiffStart,\\n            offset,\\n            vals, val, n,\\n            numerator, denominator;\\n\\n        switch (type) {\\n            case 1: // byte, 8-bit unsigned int\\n            case 7: // undefined, 8-bit byte, value depending on field\\n                if (numValues == 1) {\\n                    return file.getUint8(entryOffset + 8, !bigEnd);\\n                } else {\\n                    offset = numValues > 4 ? valueOffset : (entryOffset + 8);\\n                    vals = [];\\n                    for (n=0;n<numValues;n++) {\\n                        vals[n] = file.getUint8(offset + n);\\n                    }\\n                    return vals;\\n                }\\n\\n            case 2: // ascii, 8-bit byte\\n                offset = numValues > 4 ? valueOffset : (entryOffset + 8);\\n                return getStringFromDB(file, offset, numValues-1);\\n\\n            case 3: // short, 16 bit int\\n                if (numValues == 1) {\\n                    return file.getUint16(entryOffset + 8, !bigEnd);\\n                } else {\\n                    offset = numValues > 2 ? valueOffset : (entryOffset + 8);\\n                    vals = [];\\n                    for (n=0;n<numValues;n++) {\\n                        vals[n] = file.getUint16(offset + 2*n, !bigEnd);\\n                    }\\n                    return vals;\\n                }\\n\\n            case 4: // long, 32 bit int\\n                if (numValues == 1) {\\n                    return file.getUint32(entryOffset + 8, !bigEnd);\\n                } else {\\n                    vals = [];\\n                    for (n=0;n<numValues;n++) {\\n                        vals[n] = file.getUint32(valueOffset + 4*n, !bigEnd);\\n                    }\\n                    return vals;\\n                }\\n\\n            case 5:    // rational = two long values, first is numerator, second is denominator\\n                if (numValues == 1) {\\n                    numerator = file.getUint32(valueOffset, !bigEnd);\\n                    denominator = file.getUint32(valueOffset+4, !bigEnd);\\n                    val = new Number(numerator / denominator);\\n                    val.numerator = numerator;\\n                    val.denominator = denominator;\\n                    return val;\\n                } else {\\n                    vals = [];\\n                    for (n=0;n<numValues;n++) {\\n                        numerator = file.getUint32(valueOffset + 8*n, !bigEnd);\\n                        denominator = file.getUint32(valueOffset+4 + 8*n, !bigEnd);\\n                        vals[n] = new Number(numerator / denominator);\\n                        vals[n].numerator = numerator;\\n                        vals[n].denominator = denominator;\\n                    }\\n                    return vals;\\n                }\\n\\n            case 9: // slong, 32 bit signed int\\n                if (numValues == 1) {\\n                    return file.getInt32(entryOffset + 8, !bigEnd);\\n                } else {\\n                    vals = [];\\n                    for (n=0;n<numValues;n++) {\\n                        vals[n] = file.getInt32(valueOffset + 4*n, !bigEnd);\\n                    }\\n                    return vals;\\n                }\\n\\n            case 10: // signed rational, two slongs, first is numerator, second is denominator\\n                if (numValues == 1) {\\n                    return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset+4, !bigEnd);\\n                } else {\\n                    vals = [];\\n                    for (n=0;n<numValues;n++) {\\n                        vals[n] = file.getInt32(valueOffset + 8*n, !bigEnd) / file.getInt32(valueOffset+4 + 8*n, !bigEnd);\\n                    }\\n                    return vals;\\n                }\\n        }\\n    }\\n\\n    /**\\n    * Given an IFD (Image File Directory) start offset\\n    * returns an offset to next IFD or 0 if it's the last IFD.\\n    */\\n    function getNextIFDOffset(dataView, dirStart, bigEnd){\\n        //the first 2bytes means the number of directory entries contains in this IFD\\n        var entries = dataView.getUint16(dirStart, !bigEnd);\\n\\n        // After last directory entry, there is a 4bytes of data,\\n        // it means an offset to next IFD.\\n        // If its value is '0x00000000', it means this is the last IFD and there is no linked IFD.\\n\\n        return dataView.getUint32(dirStart + 2 + entries * 12, !bigEnd); // each entry is 12 bytes long\\n    }\\n\\n    function readThumbnailImage(dataView, tiffStart, firstIFDOffset, bigEnd){\\n        // get the IFD1 offset\\n        var IFD1OffsetPointer = getNextIFDOffset(dataView, tiffStart+firstIFDOffset, bigEnd);\\n\\n        if (!IFD1OffsetPointer) {\\n            // console.log('******** IFD1Offset is empty, image thumb not found ********');\\n            return {};\\n        }\\n        else if (IFD1OffsetPointer > dataView.byteLength) { // this should not happen\\n            // console.log('******** IFD1Offset is outside the bounds of the DataView ********');\\n            return {};\\n        }\\n        // console.log('*******  thumbnail IFD offset (IFD1) is: %s', IFD1OffsetPointer);\\n\\n        var thumbTags = readTags(dataView, tiffStart, tiffStart + IFD1OffsetPointer, IFD1Tags, bigEnd)\\n\\n        // EXIF 2.3 specification for JPEG format thumbnail\\n\\n        // If the value of Compression(0x0103) Tag in IFD1 is '6', thumbnail image format is JPEG.\\n        // Most of Exif image uses JPEG format for thumbnail. In that case, you can get offset of thumbnail\\n        // by JpegIFOffset(0x0201) Tag in IFD1, size of thumbnail by JpegIFByteCount(0x0202) Tag.\\n        // Data format is ordinary JPEG format, starts from 0xFFD8 and ends by 0xFFD9. It seems that\\n        // JPEG format and 160x120pixels of size are recommended thumbnail format for Exif2.1 or later.\\n\\n        if (thumbTags['Compression']) {\\n            // console.log('Thumbnail image found!');\\n\\n            switch (thumbTags['Compression']) {\\n                case 6:\\n                    // console.log('Thumbnail image format is JPEG');\\n                    if (thumbTags.JpegIFOffset && thumbTags.JpegIFByteCount) {\\n                    // extract the thumbnail\\n                        var tOffset = tiffStart + thumbTags.JpegIFOffset;\\n                        var tLength = thumbTags.JpegIFByteCount;\\n                        thumbTags['blob'] = new Blob([new Uint8Array(dataView.buffer, tOffset, tLength)], {\\n                            type: 'image/jpeg'\\n                        });\\n                    }\\n                break;\\n\\n            case 1:\\n                console.log(\\"Thumbnail image format is TIFF, which is not implemented.\\");\\n                break;\\n            default:\\n                console.log(\\"Unknown thumbnail image format '%s'\\", thumbTags['Compression']);\\n            }\\n        }\\n        else if (thumbTags['PhotometricInterpretation'] == 2) {\\n            console.log(\\"Thumbnail image format is RGB, which is not implemented.\\");\\n        }\\n        return thumbTags;\\n    }\\n\\n    function getStringFromDB(buffer, start, length) {\\n        var outstr = \\"\\";\\n        for (n = start; n < start+length; n++) {\\n            outstr += String.fromCharCode(buffer.getUint8(n));\\n        }\\n        return outstr;\\n    }\\n\\n    function readEXIFData(file, start) {\\n        if (getStringFromDB(file, start, 4) != \\"Exif\\") {\\n            if (debug) console.log(\\"Not valid EXIF data! \\" + getStringFromDB(file, start, 4));\\n            return false;\\n        }\\n\\n        var bigEnd,\\n            tags, tag,\\n            exifData, gpsData,\\n            tiffOffset = start + 6;\\n\\n        // test for TIFF validity and endianness\\n        if (file.getUint16(tiffOffset) == 0x4949) {\\n            bigEnd = false;\\n        } else if (file.getUint16(tiffOffset) == 0x4D4D) {\\n            bigEnd = true;\\n        } else {\\n            if (debug) console.log(\\"Not valid TIFF data! (no 0x4949 or 0x4D4D)\\");\\n            return false;\\n        }\\n\\n        if (file.getUint16(tiffOffset+2, !bigEnd) != 0x002A) {\\n            if (debug) console.log(\\"Not valid TIFF data! (no 0x002A)\\");\\n            return false;\\n        }\\n\\n        var firstIFDOffset = file.getUint32(tiffOffset+4, !bigEnd);\\n\\n        if (firstIFDOffset < 0x00000008) {\\n            if (debug) console.log(\\"Not valid TIFF data! (First offset less than 8)\\", file.getUint32(tiffOffset+4, !bigEnd));\\n            return false;\\n        }\\n\\n        tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);\\n\\n        if (tags.ExifIFDPointer) {\\n            exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);\\n            for (tag in exifData) {\\n                switch (tag) {\\n                    case \\"LightSource\\" :\\n                    case \\"Flash\\" :\\n                    case \\"MeteringMode\\" :\\n                    case \\"ExposureProgram\\" :\\n                    case \\"SensingMethod\\" :\\n                    case \\"SceneCaptureType\\" :\\n                    case \\"SceneType\\" :\\n                    case \\"CustomRendered\\" :\\n                    case \\"WhiteBalance\\" :\\n                    case \\"GainControl\\" :\\n                    case \\"Contrast\\" :\\n                    case \\"Saturation\\" :\\n                    case \\"Sharpness\\" :\\n                    case \\"SubjectDistanceRange\\" :\\n                    case \\"FileSource\\" :\\n                        exifData[tag] = StringValues[tag][exifData[tag]];\\n                        break;\\n\\n                    case \\"ExifVersion\\" :\\n                    case \\"FlashpixVersion\\" :\\n                        exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);\\n                        break;\\n\\n                    case \\"ComponentsConfiguration\\" :\\n                        exifData[tag] =\\n                            StringValues.Components[exifData[tag][0]] +\\n                            StringValues.Components[exifData[tag][1]] +\\n                            StringValues.Components[exifData[tag][2]] +\\n                            StringValues.Components[exifData[tag][3]];\\n                        break;\\n                }\\n                tags[tag] = exifData[tag];\\n            }\\n        }\\n\\n        if (tags.GPSInfoIFDPointer) {\\n            gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);\\n            for (tag in gpsData) {\\n                switch (tag) {\\n                    case \\"GPSVersionID\\" :\\n                        gpsData[tag] = gpsData[tag][0] +\\n                            \\".\\" + gpsData[tag][1] +\\n                            \\".\\" + gpsData[tag][2] +\\n                            \\".\\" + gpsData[tag][3];\\n                        break;\\n                }\\n                tags[tag] = gpsData[tag];\\n            }\\n        }\\n\\n        // extract thumbnail\\n        tags['thumbnail'] = readThumbnailImage(file, tiffOffset, firstIFDOffset, bigEnd);\\n\\n        return tags;\\n    }\\n\\n   function findXMPinJPEG(file) {\\n\\n        if (!('DOMParser' in self)) {\\n            // console.warn('XML parsing not supported without DOMParser');\\n            return;\\n        }\\n        var dataView = new DataView(file);\\n\\n        if (debug) console.log(\\"Got file of length \\" + file.byteLength);\\n        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\\n           if (debug) console.log(\\"Not a valid JPEG\\");\\n           return false; // not a valid jpeg\\n        }\\n\\n        var offset = 2,\\n            length = file.byteLength,\\n            dom = new DOMParser();\\n\\n        while (offset < (length-4)) {\\n            if (getStringFromDB(dataView, offset, 4) == \\"http\\") {\\n                var startOffset = offset - 1;\\n                var sectionLength = dataView.getUint16(offset - 2) - 1;\\n                var xmpString = getStringFromDB(dataView, startOffset, sectionLength)\\n                var xmpEndIndex = xmpString.indexOf('xmpmeta>') + 8;\\n                xmpString = xmpString.substring( xmpString.indexOf( '<x:xmpmeta' ), xmpEndIndex );\\n\\n                var indexOfXmp = xmpString.indexOf('x:xmpmeta') + 10\\n                //Many custom written programs embed xmp/xml without any namespace. Following are some of them.\\n                //Without these namespaces, XML is thought to be invalid by parsers\\n                xmpString = xmpString.slice(0, indexOfXmp)\\n                            + 'xmlns:Iptc4xmpCore=\\"http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/\\" '\\n                            + 'xmlns:xsi=\\"http://www.w3.org/2001/XMLSchema-instance\\" '\\n                            + 'xmlns:tiff=\\"http://ns.adobe.com/tiff/1.0/\\" '\\n                            + 'xmlns:plus=\\"http://schemas.android.com/apk/lib/com.google.android.gms.plus\\" '\\n                            + 'xmlns:ext=\\"http://www.gettyimages.com/xsltExtension/1.0\\" '\\n                            + 'xmlns:exif=\\"http://ns.adobe.com/exif/1.0/\\" '\\n                            + 'xmlns:stEvt=\\"http://ns.adobe.com/xap/1.0/sType/ResourceEvent#\\" '\\n                            + 'xmlns:stRef=\\"http://ns.adobe.com/xap/1.0/sType/ResourceRef#\\" '\\n                            + 'xmlns:crs=\\"http://ns.adobe.com/camera-raw-settings/1.0/\\" '\\n                            + 'xmlns:xapGImg=\\"http://ns.adobe.com/xap/1.0/g/img/\\" '\\n                            + 'xmlns:Iptc4xmpExt=\\"http://iptc.org/std/Iptc4xmpExt/2008-02-29/\\" '\\n                            + xmpString.slice(indexOfXmp)\\n\\n                var domDocument = dom.parseFromString( xmpString, 'text/xml' );\\n                return xml2Object(domDocument);\\n            } else{\\n             offset++;\\n            }\\n        }\\n    }\\n\\n    function xml2json(xml) {\\n        var json = {};\\n      \\n        if (xml.nodeType == 1) { // element node\\n          if (xml.attributes.length > 0) {\\n            json['@attributes'] = {};\\n            for (var j = 0; j < xml.attributes.length; j++) {\\n              var attribute = xml.attributes.item(j);\\n              json['@attributes'][attribute.nodeName] = attribute.nodeValue;\\n            }\\n          }\\n        } else if (xml.nodeType == 3) { // text node\\n          return xml.nodeValue;\\n        }\\n      \\n        // deal with children\\n        if (xml.hasChildNodes()) {\\n          for(var i = 0; i < xml.childNodes.length; i++) {\\n            var child = xml.childNodes.item(i);\\n            var nodeName = child.nodeName;\\n            if (json[nodeName] == null) {\\n              json[nodeName] = xml2json(child);\\n            } else {\\n              if (json[nodeName].push == null) {\\n                var old = json[nodeName];\\n                json[nodeName] = [];\\n                json[nodeName].push(old);\\n              }\\n              json[nodeName].push(xml2json(child));\\n            }\\n          }\\n        }\\n        \\n        return json;\\n    }\\n\\n    function xml2Object(xml) {\\n        try {\\n            var obj = {};\\n            if (xml.children.length > 0) {\\n              for (var i = 0; i < xml.children.length; i++) {\\n                var item = xml.children.item(i);\\n                var attributes = item.attributes;\\n                for(var idx in attributes) {\\n                    var itemAtt = attributes[idx];\\n                    var dataKey = itemAtt.nodeName;\\n                    var dataValue = itemAtt.nodeValue;\\n\\n                    if(dataKey !== undefined) {\\n                        obj[dataKey] = dataValue;\\n                    }\\n                }\\n                var nodeName = item.nodeName;\\n\\n                if (typeof (obj[nodeName]) == \\"undefined\\") {\\n                  obj[nodeName] = xml2json(item);\\n                } else {\\n                  if (typeof (obj[nodeName].push) == \\"undefined\\") {\\n                    var old = obj[nodeName];\\n\\n                    obj[nodeName] = [];\\n                    obj[nodeName].push(old);\\n                  }\\n                  obj[nodeName].push(xml2json(item));\\n                }\\n              }\\n            } else {\\n              obj = xml.textContent;\\n            }\\n            return obj;\\n          } catch (e) {\\n              console.log(e.message);\\n          }\\n    }\\n\\n    EXIF.enableXmp = function() {\\n        EXIF.isXmpEnabled = true;\\n    }\\n\\n    EXIF.disableXmp = function() {\\n        EXIF.isXmpEnabled = false;\\n    }\\n\\n    EXIF.getData = function(img, callback) {\\n        if (((self.Image && img instanceof self.Image)\\n            || (self.HTMLImageElement && img instanceof self.HTMLImageElement))\\n            && !img.complete)\\n            return false;\\n\\n        if (!imageHasData(img)) {\\n            getImageData(img, callback);\\n        } else {\\n            if (callback) {\\n                callback.call(img);\\n            }\\n        }\\n        return true;\\n    }\\n\\n    EXIF.getTag = function(img, tag) {\\n        if (!imageHasData(img)) return;\\n        return img.exifdata[tag];\\n    }\\n    \\n    EXIF.getIptcTag = function(img, tag) {\\n        if (!imageHasData(img)) return;\\n        return img.iptcdata[tag];\\n    }\\n\\n    EXIF.getAllTags = function(img) {\\n        if (!imageHasData(img)) return {};\\n        var a,\\n            data = img.exifdata,\\n            tags = {};\\n        for (a in data) {\\n            if (data.hasOwnProperty(a)) {\\n                tags[a] = data[a];\\n            }\\n        }\\n        return tags;\\n    }\\n    \\n    EXIF.getAllIptcTags = function(img) {\\n        if (!imageHasData(img)) return {};\\n        var a,\\n            data = img.iptcdata,\\n            tags = {};\\n        for (a in data) {\\n            if (data.hasOwnProperty(a)) {\\n                tags[a] = data[a];\\n            }\\n        }\\n        return tags;\\n    }\\n\\n    EXIF.pretty = function(img) {\\n        if (!imageHasData(img)) return \\"\\";\\n        var a,\\n            data = img.exifdata,\\n            strPretty = \\"\\";\\n        for (a in data) {\\n            if (data.hasOwnProperty(a)) {\\n                if (typeof data[a] == \\"object\\") {\\n                    if (data[a] instanceof Number) {\\n                        strPretty += a + \\" : \\" + data[a] + \\" [\\" + data[a].numerator + \\"/\\" + data[a].denominator + \\"]\\\\r\\\\n\\";\\n                    } else {\\n                        strPretty += a + \\" : [\\" + data[a].length + \\" values]\\\\r\\\\n\\";\\n                    }\\n                } else {\\n                    strPretty += a + \\" : \\" + data[a] + \\"\\\\r\\\\n\\";\\n                }\\n            }\\n        }\\n        return strPretty;\\n    }\\n\\n    EXIF.readFromBinaryFile = function(file) {\\n        return findEXIFinJPEG(file);\\n    }\\n\\n    if (typeof define === 'function' && define.amd) {\\n        define('exif-js', [], function() {\\n            return EXIF;\\n        });\\n    }\\n}.call(this));\\n\\n\`\`\`\\n\\n\\n以上，拍照上传照片就是正常的角度了。rotate-photo.js、exif.js两个文件引入就可以直接用了，可以根据自身的业务需要修改里头的逻辑。","tagIds":"11,10,31","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":1,"type":1,"groupTimestamp":"1560521536520","cover":"https://img.tukuppt.com/png_preview/00/58/11/ijwVSqiJ16.jpg","categoryId":1,"created_at":"2023-11-06T14:14:13.000Z","updated_at":"2023-11-10T14:49:32.000Z","tagList":[{"id":10,"name":"HTML"},{"id":11,"name":"JavaScript"},{"id":31,"name":"JQuery"}],"createDate":"2019-06-14"}`,B='{"id":14,"title":"Nuxt.js小试牛刀—用SSR框架Nuxt.js+koa开发官网","subTitle":"浅浅写个公司官网","link":null,"description":"前段时间需要开发HybridAPP中的H5部分，在编写H5的过程中遇到了让我印象深刻的首屏加载白屏的问题。白屏问题受网络影响，众所周知Vue是SPA框架，就是单页面应用，简单来说就是可以把整个项目看成是一个页面，在首屏加载的时候，是加载的整个项目。在项目比较大的时候，网络越差，需要拉取单页面应用的时间就会长，在等待的过程中就会产生白屏。在寻找解决思路的过程中了解到，要想很好解决这个问题，将项目采用SSR方式（即服务端渲染）来开发是个很不错的选择，由此便接触到了基于Vue的SSR框架NuxtJs。在重构官网时，我便用上了NuxtJs。","content":"## 一、什么是Nuxt.js\\n\\n### 1、简单介绍\\n\\n简单说就是Vue的SEO化。Vue开发的SPA（单页应用）不利于搜索引擎的SEO优化，所以在开发需要搜索引擎提供流量的项目时就比较尴尬，对于公司官网、新闻、博客、电影、咨询等项目来说，Nuxt.js不仅可以带来巨大的 SEO 提升，而且可以做到服务端拼接好html后直接返回，首屏可以做到无需发起ajax、axios请求。\\n\\n### 2、运行原理\\n\\n1. 用户打开浏览器，输入网址请求到Node.js\\n\\n2. 部署在Node.js的应用Nuxt.js接收浏览器请求，并请求服务端获取数据\\n\\n3. Nuxt.js获取到数据后进行服务端渲染\\n\\n4. Nuxt.js将html网页响应给浏览器\\n\\n![image](https://img-blog.csdnimg.cn/img_convert/9c5dfe1608bdd74b2cdd0f8ce8d5a044.png)\\n\\n### 3、流程图\\n\\n下图阐述了 Nuxt.js 应用一个完整的服务器请求到渲染（或用户通过 <nuxt-link> 切换路由渲染页面）的流程：\\n\\n![image](https://img-blog.csdnimg.cn/img_convert/bbe8ab6c4b868a00b12cd6aa6c9d4a28.png)\\n\\n## 二、Nuxt.js实战\\n\\n### 1、创建项目\\n\\n直接使用脚手架工具 create-nuxt-app进行安装：\\n\\n```bash\\nnpx create-nuxt-app <项目名>\\n```\\n\\n集成服务器端选择koa，UI框架选择ElementUI\\n\\n### 2、项目目录结构\\n\\n项目创建成功之后，生成统一目录结构：\\n\\n```\\n.\\n├── assets # 资源目录，存放图片、封装工具等\\n├── components # 组件目录，全局定义的组件\\n├── layouts # 布局目录，用于组织应用的布局组件\\n├── middleware # 中间件目录，目录用于存放应用的中间件\\n├── pages # 页面目录，用于组织应用的路由及视图\\n├── plugins # 插件目录，用于组织那些需要在实例化之前需要运行的JS插件。\\n├── server # 服务端目录，定义集成的服务器端文件\\n├── static # 静态资源目录，存放应用的静态文件\\n├── store # 仓库目录，用于组织应用的 Vuex 状态树文件\\n├── styles # 样式目录，存放页面样式文件\\n├── .eslintrc.js # eslint配置文件\\n├── .gitignore.js # git 忽略文件配置\\n├── nuxt.config.js # 应用的配置文件\\n├── package-lock.json # 版本快照，跑npm install自动生成\\n├── package.json # 用于描述应用的依赖关系和对外暴露的脚本接口\\n├── README.md\\n```\\n\\n### 3、项目配置\\n\\n项目配置文件是nuxt.config.js，在项目初始化之后，文件中会有一些默认的基础配置，当你的项目需要实现一些定制化功能时，就需要重新进行配置。\\n\\n#### 3-1 配置网页信息。\\n\\n以往配置网页的一些标题啊，图标什么的都是直接修改根文件index.html，但在这里不一样，因为项目中没有暴露出根文件以供修改，所以需要在配置文件中进行配置。比如说官网的一些配置如下：\\n\\n```javascript\\nmodule.exports = {\\n  // ...前面的代码\\n  head: {\\n    title: \'小马立行科技\',\\n    meta: [\\n      { charset: \'utf-8\' },\\n      { name: \'renderer\', content: \'webkit\' },\\n      { name: \'force-rendering\', content: \'webkit\' },\\n      { \'http-equiv\': \'X-UA-Compatible\', content: \'IE=Edge,chrome=1\' },\\n      { name: \'keyword\', content: \'小马立行，汽车互联网科技企业，车联网，大数据\' },\\n      { hid: \'description\', name: \'description\', content: \'小马立行-让用户真正的享受到车联网的便利\' }\\n    ],\\n    link: [\\n      { rel: \'icon\', type: \'image/x-icon\', href: \'/favicon.ico\' }\\n    ],\\n    script: []\\n  }\\n  // ...后面的代码\\n}\\n```\\n\\n#### 3-2 引入样式文件\\n\\n如果是直接引入css文件，在css属性中写入相应文件路径。\\n\\n如果需要在项目中使用预处理css语言文件，比如scss文件，则需要先导入一些第三方依赖包：\\n\\n```bash\\ncnpm install --save node-sass sass-loader @nuxtjs/style-resources\\n```\\n\\n然后添加style-resource模块，并定义全局的样式变量定义文件variables.scss，如下所示\\n\\n```javascript\\nmodule.exports = {\\n  // ...前面的代码\\n   loading: { color: \'#fff\' }, // 配置页面加载的颜色\\n   css: [\\n    \'element-ui/lib/theme-chalk/index.css\' // 直接引入css文件\\n   ]\\n\\n   styleResources: {\\n    scss: \'./styles/variables.scss\' // 定义全局的样式变量定义文件\\n   },\\n   \\n   /*\\n   ** Plugins to load before mounting the App\\n   ** 该配置项用于配置那些需要在 根vue.js应用 实例化之前需要运行的 Javascript 插件。\\n   */\\n   plugins: [\\n    \'@/plugins/element-ui\'\\n   ],\\n   \\n   /*\\n   ** Nuxt.js modules 该配置项允许您将Nuxt模块添加到项目中。\\n   */\\n   modules: [\\n    \'@nuxtjs/style-resources\' // 添加style-resource模块\\n   ],\\n  // ...后面的代码\\n}\\n```\\n\\n配置完这些之后，便能在项目中使用sass来编写样式。\\n\\n#### 3-3 引入 Javascript 插件\\n\\nJavascript 插件的引入，可以采取两种方案。\\n\\n一是通过在项目配置中的plugins熟悉，来引入相应的JS文件：\\n\\n![image](https://img-blog.csdnimg.cn/img_convert/2a9e81b80ffb8a08bdf389bd0beca6c8.jpeg)\\n\\n```javascript\\n/**\\n* plugins/element-ui.js\\n*/\\nimport Vue from \'vue\'\\nimport locale from \'element-ui/lib/locale/lang/en\'\\nimport {\\n  Carousel,\\n  CarouselItem,\\n  Drawer\\n} from \'element-ui\'\\n\\nVue.use(Carousel, { locale })\\nVue.use(CarouselItem, { locale })\\nVue.use(Drawer, { locale })\\n```\\n\\n\\n二是直接在head属性中直接引入。\\n\\n![image](https://img-blog.csdnimg.cn/img_convert/ad4b38470af53109c113e0f5841eb65f.jpeg)\\n\\n两种方式的差别在于，引入顺序的不同。方法一会在页面渲染后引入，而方法二是在页面渲染时引入。对于一些需要在项目渲染完成前就加载的JS文件，需要采用第二种方式进行引入。例如引入用来解决H5页面终端适配的flexible.js时，就需要采用第二种方式引入，用方法一引入时，在页面渲染完成之前会有一段时间处于布局混乱阶段。\\n\\n#### 3-4 响应式配置\\n\\n为了让页面在不同分辨率下能够保持良好的布局，需要引入px2rem和flexible来对项目进行改造，在vue项目中引入这两个插件十分简单，添加相应依赖即可，但在nuxt中稍有不同。\\n\\n导入一些第三方依赖包：\\n\\n```bash\\ncnpm install --save postcss-plugin-px2rem px2rem-loader\\n```\\n\\n在项目配置文件中进行配置：\\n\\n删除head中的缩放设定：\\n\\n```javascript\\n head: {\\n meta: [\\n  //删除的内容\\n  { name: \'viewport\', content: \'width=device-width, initial-scale=1\' }\\n  // \\n ],\\n}\\n```\\n\\n\\n```javascript\\n  // ...前面的代码\\n  /*\\n  ** Build configuration 第三方模块\\n  */\\n  build: {\\n    transpile: [/^element-ui/],\\n    postcss: {\\n      plugins: {\\n        \'postcss-plugin-px2rem\': {\\n          rootValue: 54, // 换算基数，默认100，自行根据效果调整。\\n          mediaQuery: false, // （布尔值）允许在媒体查询中转换px。\\n          minPixelValue: 3 // 设置要替换的最小像素值默认0，这里表示大于3px会被转rem。\\n        }\\n      },\\n      preset: {\\n        // 更改postcss-preset-env 设置\\n        autoprefixer: {}\\n      }\\n    }\\n  // ...后面的代码\\n```\\n### 4、路由配置\\n\\n不同于vue中可以自由定义的方式，在这里，项目路由和pages目录绑定了，Nuxt.js 依据 pages 目录结构，自动生成 vue-router 模块的路由配置。\\n\\n比如项目中， pages 目录如下：\\n\\n![image](https://img-blog.csdnimg.cn/img_convert/3503607dc999c971bb71dceba981a8c2.jpeg)\\n\\n那么你就可以通过`http://项目域名/`、`http://项目域名/page`、`http://项目域名/join`、`http://项目域名/project`来访问相应的页面了。\\n\\n### 5、使用中间件\\n\\n在开头初始化项目的时候，我们引入了koa，koa是NodeJs的一个服务端集成框架，引入这个框架意味着我们可以在项目中定义中间件来在页面渲染之前定义函数，来执行一些特定的操作。\\n\\n比如说我在项目中使用了中间件，来对终端进行判断，从而在页面渲染之前判断用户终端是移动端还是Pc端，进而选择展示移动端页面还是PC端页面。\\n\\n```javascript\\n/**\\n* middleware/device.js\\n*/\\n\\nexport default function(context) {\\n  const isMobile = (ua) => {\\n    return !!ua.match(/AppleWebKit.*Mobile.*/)\\n  }\\n  const reg = /\\\\/m|\\\\/m\\\\//\\n  const hasMPath = reg.test(context.route.fullPath)\\n  const userAgent = context.req ? context.req.headers[\'user-agent\'] : \'\'\\n\\n  if (!isMobile(userAgent)) {\\n  // 若终端为pc但是路径中包含/m/或者/m的\\n    if (hasMPath) {\\n      // ...\\n    }\\n  } else {\\n    // 若终端为mobile但是路径中不包含/m/或者/m的\\n    // 重定向到mobile\\n    if (!hasMPath) {\\n      // ...\\n    }\\n  }\\n}\\n\\n```\\n\\n在项目配置文件中进行配置：\\n\\n```javascript\\n  // ...前面的代码\\n  router: {\\n    // 在每页渲染前运行中间件判断终端，是移动端还是pc端\\n    middleware: [\'device\']\\n  },\\n  // ...后面的代码\\n```\\n\\n### 6、项目热更新\\n\\n为了开发便利，需要给项目进行热更新配置，保存代码不用刷新页面便可看到修改效果。\\n引入依赖包：\\n\\n```bash\\ncnpm install --save cross-env nodemon\\n```\\n\\n修改webpack配置package.json：\\n\\n将开发命令\\n```json\\n\\"scripts\\": {\\n    \\"dev\\": \\"nuxt\\",\\n    \\"build\\": \\"nuxt build\\",\\n    \\"start\\": \\"nuxt start\\",\\n    \\"generate\\": \\"nuxt generate\\"\\n  }\\n```\\n\\n改为\\n\\n```json\\n\\"scripts\\": {\\n    \\"dev\\": \\"cross-env NODE_ENV=development nodemon server/index.js --watch server\\",\\n    \\"build\\": \\"nuxt build\\",\\n    \\"start\\": \\"cross-env NODE_ENV=production node server/index.js\\",\\n    \\"generate\\": \\"nuxt generate\\"\\n  }\\n```\\n\\n接下来在运行`npm run start`或是`npm run dev`时便会启动热更新。\\n\\n>  项目基本配置完成，接下来就可以进行开发啦\\n\\n## 三、遇到的问题\\n\\n### 1、怎么通过判断用户终端，来达到为其显示PC端布局还是移动端布局。\\n\\nUI设计师给的设计稿显示，官网PC端和移动端的是同一风格的两套不同布局。\\n\\n由于便于后期维护，我并不想单独写两个项目来区分PC端和移动端。\\n\\n所以我最终选择了在一个项目中将PC端和移动端的页面中的设计元素拆分封装成一个个组件，如果设计相似，那其实组件就可复用了。不同页面就组合需要的组件，像搭积木一样组成完整页面，再根据中间件给的终端标识值，选择显示页面的PC端组件还是移动端组件。\\n\\n### 2、存储中间件中的终端标识值。\\n\\n通过添加中间件，在中间件业务逻辑中判断终端是移动端还是pc端，将判断结果用自定义常量标识值表示。为了方便统一冠以标识值的同步和存储，我在项目中引入了vuex，通过koa+vuex结合，管理终端标识值。\\n\\n在上述提到的中间件定义逻辑中，添加更新vuex状态的逻辑：\\n\\n```javascript\\nexport default function(context) {\\n  const isMobile = (ua) => {\\n    return !!ua.match(/AppleWebKit.*Mobile.*/)\\n  }\\n  const reg = /\\\\/m|\\\\/m\\\\//\\n  const hasMPath = reg.test(context.route.fullPath)\\n  const userAgent = context.req ? context.req.headers[\'user-agent\'] : \'\'\\n\\n  if (!isMobile(userAgent)) {\\n    context.store.commit(\'SET_DEVICE_TYPE\', 1)\\n    // 若终端为pc但是路径中包含/m/或者/m的\\n    if (hasMPath) {\\n      context.store.commit(\'SET_DEVICE_TYPE\', 2)\\n      // 重定向到pc\\n      const url = context.route.fullPath.substring(2)\\n      context.redirect(url)\\n    }\\n  } else {\\n    context.store.commit(\'SET_DEVICE_TYPE\', 2)\\n    context.store.commit(\'SET_PAGE_TYPE\', 2)\\n    // 若终端为mobile但是路径中不包含/m/或者/m的\\n    // 重定向到mobile\\n    if (!hasMPath) {\\n      context.store.commit(\'SET_DEVICE_TYPE\', 1)\\n      context.redirect(`/m${context.route.fullPath}`)\\n    }\\n  }\\n}\\n```\\n\\n### 3、移动端点击事件响应延迟的问题\\n\\n在部分老机型上，存在网页点击事件响应延迟的问题，这是因为移动端有个两次连续“轻触”是“放大”的操作，在你第一次被“轻触”后，浏览器需要先等一段时间，若有“连续的第二次轻触”，则进行“放大”操作，否则就执行click事件，这就导致了移动端所谓的300ms click延迟。\\n\\n一般会在项目中引入fastclick.js来解决这个问题，但是在该项目中按照官方文档的方式引入该插件，发现了页面刚开始加载出来时，有一小段时间是依旧存在击事件响应延迟问题的，一段时间后问题消失。\\n\\n后来发现是按照官方方法在项目中引入插件，有一个加载插件的过程。这个过程中，fastclick.js还未生效，所以问题还是存在。\\n\\n后来改成直接在head属性中直接引入，先行加载必要的css以及js文件，很好的解决了等待加载页面事件的布局混乱和点击事件响应延迟的问题。\\n\\n## 四、总结\\n\\n在面对未知的框架或语言时，我总是会对其有一份畏惧之情，不论是本文的中心Nuxt.js，还是正在吐血学习中的React和TypeScript，想学和怕学的情绪在脑子里像两个小人在干架～[doge头]，但是当真正静下心来去研究每一份新的知识，并将其运用到项目中，那种充实感和喜悦感怕是只有正在学习和前进的你我才能体会到啦～\\n\\n上一家公司的官网我就是使用了Nuxt+koa来实现的。\\n\\n这里贴上地址，比较简单的几个静态页面：[前公司官网](https://www.xiaomalixing.com/)\\n","tagIds":"17,12,13,23","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":1,"type":1,"groupTimestamp":"1607782336520","cover":"https://blog.hashinteractive.com/wp-content/uploads/2020/02/nuxt-docker.jpg","categoryId":1,"created_at":"2023-11-06T14:23:09.000Z","updated_at":"2023-11-11T16:38:08.000Z","tagList":[{"id":12,"name":"ES6"},{"id":13,"name":"NodeJS"},{"id":17,"name":"Koa"},{"id":23,"name":"NuxtJS"}],"createDate":"2020-12-12"}',q='{"id":24,"title":"打造vuecli3+element后台管理系统（五）几个小技巧，让你的后台系统在不同版本浏览器兼容性更好","subTitle":"浏览器兼容","link":null,"description":"在开发时我们都习惯在google浏览器进行调试，总所周知，google浏览器的对css3、html5、es6等的支持是完全没有问题的，所以我们会忽略了其实在其他浏览器对这些新特性不够支持的问题，下面介绍我在开发后台系统中使用的一些插件和一些小技巧，来让你的后台系统尽可能多的向下向外兼容多版本浏览器~","content":"> 当你的后台系统写好，给测试大大验收的时候。会发现他甩了一堆兼容性bug给你，在ie中打不开页面啦、在360浏览器火狐ie布局混乱啦、输入框怎么有难看的黄色背景啦、电话输入框怎么有丑陋的箭头啦、字体溢出了啦等等等等...\\n\\n### 一、用rem代替px\\n许多后台系统都要求要做成响应式的，虽然我们用的elementUI框架已经在响应式上面做了出色的处理，但是也只能解决一部分的问题。所以我们需要使用rem。\\n\\n#### 1.1 什么是rem\\nrem是CSS3新增的相对长度单位，是指相对于根元素html的font-size计算值的大小。简单可理解为屏幕宽度的百分比。\\n\\n但是！但是！问题来了，那就是我们其实用px开发习惯了，要改成rem一时半会缓不过来，加上还要换算是吧。所以用rem还挺烦的。接下来主角就登场了，安利大家几个插件，能够将你项目中的px转换成rem，还可以自定义换算基数等。\\n\\n#### 1.2 使用lib-flexible & px2rem自动转换px为rem，解决响应式问题\\n\\n##### 1.2-1 引入lib-flexible 和 px2rem\\n```bash\\nnpm install --save lib-flexible\\nnpm install --save-dev px2rem-loader postcss-plugin-px2rem\\n```\\n\\n```!\\npostcss-plugin-px2rem 是为了在使用less或者sass的情况下也可以正常转换\\n```\\n\\n##### 1.2-2 删除或注释index.html中的 ```<meta name=\\"viewport\\" content=\\"width=device-width,initial-scale=1.0\\">``` 标签\\n\\n使用lib-flexible插件，他会自动生成meta name=\\"viewport\\"的标签，所以我们需要把原来有的删除掉。自动生成标签之后，lib-flexible会自动设置html的font-size为屏幕宽度除以10，也就是1rem等于html根节点的font-size，如果你的设计稿宽度是750px，那font-size就会被设置为75px\\n\\n``` html\\n  <head>\\n    <!-- <meta name=\\"viewport\\" content=\\"width=device-width,initial-scale=1.0\\"> -->\\n  </head>\\n\\n```\\n\\n##### 1.2-3 入口文件引入lib-flexible\\n在main.js全局引入lib-flexible\\n```javascript\\n// 使用lib-flexible来解决移动端适配\\nimport \'lib-flexible\'\\n```\\n\\n##### 1.2-4 新增配置\\n在vue.config.js新增px2rem的配置\\n```javascript\\nconst path = require(\'path\')\\n\\nfunction resolve(dir) {\\n  return path.join(__dirname, dir)\\n}\\n\\nmodule.exports = {\\n  publicPath: \'/\',\\n  outputDir: \'dist\', // 输出文件目录\\n  assetsDir: \'assets\', // 静态资源文件夹\\n  productionSourceMap: false,\\n  devServer: {\\n    port: 9566, // 端口号\\n    open: true,\\n    proxy: null // 设置代理\\n  },\\n  // 新增内容\\n  css: {\\n    loaderOptions: {\\n      sass: { // 如果用的是less就改成less\\n        javascriptEnabled: true\\n      },\\n      postcss: {\\n        plugins: [\\n          require(\'postcss-plugin-px2rem\')({\\n            rootValue: 54, // 换算基数，默认100，自行根据效果调整。\\n            mediaQuery: false, // （布尔值）允许在媒体查询中转换px。\\n            minPixelValue: 3 // 设置要替换的最小像素值默认0，这里表示大于3px会被转rem。\\n          })\\n        ]\\n      }\\n    }\\n  },\\n  // 新增结束\\n  chainWebpack: config => {\\n    // 新增内容\\n    config.module\\n      .rule(\'css\')\\n      .test(/\\\\.css$/)\\n      .oneOf(\'vue\')\\n      .resourceQuery(/\\\\?vue/)\\n      .use(\'px2rem\')\\n      .loader(\'px2rem-loader\')\\n      .options({\\n        remUnit: 54\\n      })\\n    // 新增结束\\n\\n    config.module\\n      .rule(\'svg\')\\n      .exclude.add(resolve(\'src/icons\'))\\n      .end()\\n\\n    config.module\\n      .rule(\'icons\')\\n      .test(/\\\\.svg$/)\\n      .include.add(resolve(\'src/icons\'))\\n      .end()\\n      .use(\'svg-sprite-loader\')\\n      .loader(\'svg-sprite-loader\')\\n      .options({\\n        symbolId: \'icon-[name]\'\\n      })\\n  }\\n}\\n```\\n\\n##### 1.2-5 康康postcss-plugin-px2rem的配置项\\n官方文档给出的配置项有这么多：\\n```json\\n{\\n  rootValue: 100,\\n  unitPrecision: 5,\\n  propWhiteList: [],\\n  propBlackList: [],\\n  exclude:false,\\n  selectorBlackList: [],\\n  ignoreIdentifier: false,\\n  replace: true,\\n  mediaQuery: false,\\n  minPixelValue: 0\\n}\\n```\\n\\n我们目前只用到了三个\\n那么这些都是啥意思呢，一起来康康\\n\\n- **rootValue** 转换基数，类型可以是Number也可以是Object，默认是100\\n    - 如果你传的是一个Object，例如 ```{ px: 50, rpx: 100 }``` ，那么就意味着，在换算的时候，如果遇上单位是px那换算基数是50，如果遇上rpx那么换算基数是100\\n- **unitPrecision** 单位精度，Number类型，简单的说就是转换之后的rem要保留几位小数，默认保留5位的哈\\n- **propWhiteList** 转换的白名单，Array类型，里面包含了可以被转换的css属性\\n    - 默认是个空数组哦， 意思就是不用呗，就是说css里所有的属性，都可以进行转换\\n    - 里面的属性值必须精确匹配，使用了白名单之后，意味着只有白名单里头的属性可以转换了。感觉这个白名单会比较少用到的说\\n- **propWhiteList** 转换的黑名单，和白名单相反嘛，黑名单里头的css属性是不会进行转换的\\n- **exclude** 排除的文件夹，是正则表达式。比如说写了``` /(node_module)/```，就是说(node_module)中的样式文件不进行替换，这文件夹里能有啥，就是你引的插件嘛。排除这个文件夹的意思就是不对你引入的UI框架的样式进行单位转换。\\n- **selectorBlackList** 选择器黑名单，Array类型。和上面那个属性黑名单大同小异，不同的是这里忽略转换的依据是css选择器。\\n    - 如果是[\'body\']，数组元素是单纯的字符串，意思就是排除class为body的转换，即忽略.body下的所有属性的转换。\\n    - 如果是[/^body$/]酱的，数组元素是一个正则表达式，他排除的就是body标签，即忽略body标签下的所有属性的转换。\\n- **ignoreIdentifier** 默认是false，也可以是String类型，当是某个css属性名的时候，意思就是忽略这个属性的转换。如果你想忽略的属性只有那么一个，而不是一连串的时候，就可以用它。当启用这个的时候，replace会自动变成true的哈\\n- **replace** 默认是true，Boolean类型，表示直接替换包含REM的规则，而不是添加回调函数\\n- **mediaQuery** Boolean类型，默认是false，表示是否允许在@media查询中进行转换\\n- **minPixelValue** Number类型，表示开始转换的最小值，默认是0，意思就是大于0px的长度都进行转换\\n\\n-----------------------------------------------\\n\\n```!\\n细心的小伙伴发现我这里的rootValue转换基数设置的是54，为什么涅？你运行项目，然后F12，会发现根元素html的font-size是54px。为什么！为什么明明前面说的是宽度除以10啊，我特喵的pc端宽度是1080啊，不应该是font-size:108px么？？？\\n```\\n> 想知道答案的小伙伴就要去看看伟大的lib-flexible的源码啦，lib-flexible里头有这么一段代码：\\n\\n```js\\nfunction refreshRem(){\\n    var width = docEl.getBoundingClientRect().width;\\n    if (width / dpr > 540) {\\n        width = 540 * dpr;\\n    }\\n    var rem = width / 10;\\n    docEl.style.fontSize = rem + \'px\';\\n    flexible.rem = win.rem = rem;\\n}\\n```\\n\\n> pc端的dpr是1，width / dpr肯定是大于540的，所以lib-flexible会默认使用540px这个宽度，然后将屏幕宽度除以10作为rem值，所以1rem = 54px。所以我们将rootValue转换基数设为54刚刚好\\n\\n-----------------------------------------------\\n\\n康康添加了lib-flexible & px2rem之后，页面在移动端的显示效果如何：\\n\\n![inPhone1](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/2/16cf1e454cf9c5db~tplv-t2oaga2asx-image.image)\\n\\n![inPhone2](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/2/16cf1e47d6800334~tplv-t2oaga2asx-image.image)\\n\\n好的，十分优秀。\\n\\n### 二、解决低版本ie打不开页面的问题\\n\\n当你写完后台系统之后，毛闷台了喔，在线上把代码一拉一部署，测试那边说了，你这个页面我浏览器打不开啊！你过去之后发现他用的ie不知道6还是7还是8测得你的网站。那么问题来了，为什么会打不开呢？\\n\\n原因就是你的项目里头用了es6的promise，ie低版本对这个的支持不是特别好，这个问题很好解决，只需要引入两个插件就可以了。对本身代码没有其他影响。\\n\\n#### 2.1 引入es6-promise & 和babel-polyfill依赖包\\n```bash\\nnpm install --save es6-promise babel-polyfill\\n```\\n\\n#### 2.2 在入口文件main.js引入\\n```javascript\\n// 解决低版本浏览器不支持promise问题\\nimport \'babel-polyfill\'\\nimport Es6Promise from \'es6-promise\'\\nEs6Promise.polyfill()\\n```\\n\\n#### 2.3 在vue.config.js新增配置\\n```javascript\\n    // 。。。此处省略n个字符。。。\\n    config.module\\n      .rule(\'icons\')\\n      .test(/\\\\.svg$/)\\n      .include.add(resolve(\'src/icons\'))\\n      .end()\\n      .use(\'svg-sprite-loader\')\\n      .loader(\'svg-sprite-loader\')\\n      .options({\\n        symbolId: \'icon-[name]\'\\n      })\\n    // 新增配置\\n    config.entry.app = [\'babel-polyfill\', \'./src/main.js\']\\n    // 新增结束\\n  }\\n}\\n```\\n\\n### 三、使用autoprefixer让css属性自动增加兼容前缀\\n很多时候，像flexBox或者transform这样样式，在不同浏览器下面有不同的写法，正常来说我们每次用到其中一个的时候都需要写这么长一大串：\\n```html\\n<style lang=\\"scss\\">\\n.flex-box {\\n    display: -webkit-box;\\n    display: -moz-box;\\n    display: -webkit-flex;\\n    display: -moz-flex;\\n    display: -ms-flexbox;\\n    display: flex;\\n    -webkit-justify-content: center;\\n    -webkit-box-pack: center;\\n    -moz-justify-content: center;\\n    -moz-box-pack: center;\\n    -ms-flex-pack: center;\\n    justify-content: center;\\n    -webkit-align-items: center;\\n    -webkit-box-align: center;\\n    -moz-align-items: center;\\n    -moz-box-align: center;\\n    -ms-flex-align: center;\\n    align-items: center;\\n    -webkit-box-direction: normal;\\n    -webkit-box-orient: vertical;\\n    -webkit-flex-direction: column;\\n    -moz-flex-direction: column;\\n    -moz-box-orient: vertical;\\n    -ms-flex-direction: column;\\n    flex-direction: column;\\n}\\n</style>\\n```\\n晕，我只是想要用一下flex布局啊。。\\n\\n经过评论区小伙伴的提醒，这里有一个很棒的插件可以使用，他可以自动给你的项目增加兼容前缀，需要添加的浏览器兼容前缀由你自由配置。我们只需：\\n\\n#### 3.1安装autoprefixer依赖\\n```bash\\ncnpm install --save-dev autoprefixer\\n```\\n\\n#### 3.2在vue.config.js引入\\n```javascript\\n// ...省略前面省略\\ncss: {\\n    loaderOptions: {\\n      sass: { // 如果用的是less就改成less\\n        javascriptEnabled: true\\n      },\\n      postcss: {\\n        plugins: [\\n          // 新增内容\\n          require(\'autoprefixer\')({}),\\n          // 新增结束\\n          require(\'postcss-plugin-px2rem\')({\\n            rootValue: 54, // 换算基数，默认100，自行根据效果调整。\\n            mediaQuery: false, // （布尔值）允许在媒体查询中转换px。\\n            minPixelValue: 3 // 设置要替换的最小像素值默认0，这里表示大于3px会被转rem。\\n          })\\n        ]\\n      }\\n    }\\n  },\\n // ...省略后面省略\\n```\\n\\n#### 3.3 在package.json中指定browserslist关键字\\n在package.json中新增\\n```json\\n\\"browserslist\\": [\\n    \\"> 1%\\",\\n    \\"last 2 versions\\",\\n    \\"not ie <= 8\\",\\n    \\"iOS >= 8\\",\\n    \\"Firefox >= 20\\",\\n    \\"Android >= 4.4\\"\\n  ]\\n```\\n\\n接下来就是见证奇迹的时刻，重新npm run serve一下，你就发现所有兼容样式前面都加上前缀啦~\\n\\n--------------------------------------------\\n```!\\n关于之前的手写mixin的方法，我还是建议大家能够多封装，不管是业务代码上还是样式代码上，这样可以增加代码的复用率，让你的代码看起来更加轻盈。像一些使用率比较多的样式块，可以使用mixin封装起来，需要时include就行啦，也是十分方便的。\\n```\\n\\n**举个栗子**\\n1. 在styles的mixin.scss文件里声明一些常用的样式块\\n```css\\n/* 背景自适应容器大小 */\\n@mixin bgCover($url) {\\n  background-image: url($url);\\n  background-repeat: no-repeat;\\n  background-size: cover;\\n  background-position: 0 center;\\n}\\n\\n@mixin noData($url) {\\n  width: 100%;\\n  font-size: 14px;\\n  text-align: center;\\n  color: #666;\\n  line-height: 60px;\\n}\\n```\\n\\n2. 在需要使用到mixin样式的页面引入，用mixin替换样式块\\n```html\\n<style lang=\\"scss\\">\\n@import \'~@/styles/mixin\';\\n.no-data {\\n    @include noData;\\n}\\n</style>\\n```\\n--------------------------------------------\\n\\n### 四、覆盖默认样式\\n很多标签都有一些奇奇怪怪的默认样式，在不同的浏览器下面默认样式还不一样，为了统一性。我们需要覆盖掉默认样式。其实这一块，elementUI已经考虑到了，在styles目录下面的index.scss文件就是用来覆盖默认样式的。有需要覆盖掉的默认样式，可以在里面已有代码的基础上再新增。分享两个典型的：\\n\\n#### 4.1 覆盖掉input type=number时的箭头\\n```css\\ninput::-webkit-outer-spin-button,\\ninput::-webkit-inner-spin-button {\\n  -webkit-appearance: none;\\n}\\ninput[type=\\"number\\"] {\\n  -moz-appearance: textfield;\\n}\\n```\\n\\n#### 4.2 改变Placeholder文字的颜色\\n```css\\ninput::-moz-placeholder{color:rgb(204, 204, 204)} //Firefox\\ninput::-webkit-input-placeholder{color:rgb(204, 204, 204)} //Chrome,Safari\\ninput:-ms-input-placeholder{color:rgb(204, 204, 204)} // ie\\ntextarea::-moz-placeholder{color:rgb(204, 204, 204)} //Firefox\\ntextarea::-webkit-input-placeholder{color:rgb(204, 204, 204)} //Chrome,Safari\\ntextarea:-ms-input-placeholder{color:rgb(204, 204, 204)} // ie\\n```\\n\\n### 五、通过meta标签控制浏览器内核\\n国产浏览器大多是双内核，甚至更多，例如360浏览器、QQ浏览器之类。这些浏览器一般会有一个Chromium内核（极速模式。Chromiu就是Chrome使用的内核。）；一个IE内核（IE模式）；有的甚至还有一个修改过的IE内核（兼容模式）。\\n\\n我们创建的项目，默认有一个控制切换浏览器内核的meta标签```<meta http-equiv=\\"X-UA-Compatible\\" content=\\"IE=edge\\">```运行网站的时候强制切换为该浏览器所拥有的最高版本IE内核，所以在qq浏览器或者360浏览器里头打开项目，会发现浏览器用的是IE模式或者兼容模式。\\n\\n因为项目是用chrome调试的，所以在Chromium内核下拥有最优体验，我们需要用代码让浏览器能够改变一下模式。具体做法就是：\\n\\n#### 修改public目录下的index.html模板文件。\\n> 新增meta标签，告诉浏览器优先使用何种内核\\n``` html\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"utf-8\\">\\n    \\n    <!-- 新增内容 -->\\n    <!-- 强制Chromium内核，作用于360浏览器、QQ浏览器等国产双核浏览器 -->\\n    <meta name=\\"renderer\\" content=\\"webkit\\"/>\\n    <!-- 强制Chromium内核，作用于其他双核浏览器 -->\\n    <meta name=\\"force-rendering\\" content=\\"webkit\\"/>\\n    <!-- 如果有安装 Google Chrome Frame 插件则强制为Chromium内核，否则强制本机支持的最高版本IE内核，作用于IE浏览器 -->\\n    <meta http-equiv=\\"X-UA-Compatible\\" content=\\"IE=Edge,chrome=1\\"/>\\n    <!-- 新增结束 -->\\n    \\n    <!-- <meta name=\\"viewport\\" content=\\"width=device-width,initial-scale=1.0\\"> -->\\n    <link rel=\\"icon\\" href=\\"<%= BASE_URL %>favicon.ico\\">\\n    <title>vuecli3-ele-admin-template</title>\\n  </head>\\n  <body>\\n    <noscript>\\n      <strong>We\'re sorry but vuecli3-ele-admin-template doesn\'t work properly without JavaScript enabled. Please enable it to continue.</strong>\\n    </noscript>\\n    <div id=\\"app\\"></div>\\n    <!-- built files will be auto injected -->\\n  </body>\\n</html>\\n```\\n清一下浏览器缓存，重新运行项目，就会发现在360浏览器、QQ浏览器下已经变成Chromium内核的极速模式了~美得很~\\n\\n\\n暂时就先想到这些啦，后面想到我再继续补充~~\\n还有很多细节的东西没有详细写出来，我这里贴一下项目地址，有兴趣的可以看一看哦～\\n\\n- [x] [一个基于vuecli3和vue-admin-template改造的响应式后台管理系统](https://github.com/ccccai/vuecli3-ele-admin-template)","tagIds":"4,7,10,11,12,21,37","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":99,"type":1,"groupTimestamp":"1581283181822","cover":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/2/16cf21588a45126a~tplv-t2oaga2asx-jj:216:144:0:0:q75.avis","categoryId":1,"created_at":"2023-11-22T21:21:00.000Z","updated_at":"2023-11-24T05:43:00.000Z","tagList":[{"id":4,"name":"CSS"},{"id":7,"name":"LESS"},{"id":10,"name":"HTML"},{"id":11,"name":"JavaScript"},{"id":12,"name":"ES6"},{"id":21,"name":"px2rem"},{"id":37,"name":"Vue"}],"createDate":"2020-02-10"}',K='{"id":17,"title":"在本地环境上用pm2跑koa+ts项目","subTitle":"记录遇到的坑","link":null,"description":"最近在用node和ts来写前后端分离的项目，云服务器到期且并没有续费的打算，所以打算在本地环境捣鼓。网上的教程大多都是指导如何在云服务器上部署koa并用pm2守护进程。自己依葫芦画瓢在本地整了一套，故记录一下。","content":"## 一、简单介绍PM2\\n\\n开始之前先了解一下什么是pm2，这次认认真真逐字逐句的读了下概念，之前大致知道这是一个管理node进程的工具，把它笼统的归类于与phpstydy、nginx类似的工具，但是其实并不完全一致。\\n\\npm2一般来说是用于我们的生产环境，也就是云服务器上的node进程管理工具（废话），它不仅能进行进程守护，同时也支持性能监控、负载均衡等的功能，并且还可以使用命令来取查看我们node进程的状态，小白友好上手简单。我之前错误的认为它和phpstydy、nginx类似，更贴切的来讲，它其实更像是Linux的进程管理工具Supervisor或者Forever。\\n\\n## 二、我用它来解决什么问题？\\n\\n很简单，我主要是用来解决本地开发的时候，不用每次得用命令行工具cd到项目目录用命令去启动接口服务，我需要项目接口在我需要的时候一直运行着，且不会因为误触命令行工具关闭按钮时而挂掉服务。\\n\\n同理，云服务器其实就可以看成一部虚拟的计算机，在服务器上用pm2，其实也是解决的一样的问题。\\n\\n## 三、pm2的特性\\n\\n* **pm2在后台运行**。例如`node app.js`这样的命令，是需要一直在前台运行，容易因为代码错误或者是命令行工具的问题导致中断，不稳定。pm2在后台运行，也支持将错误用log文件输出的方式记录。\\n* **0 秒停机重载**。它能立即重新启动应用的所有进程并在重新加载代码后将请求，路由到新的进程，这意味着在应用维护升级的时候是不需要停机的，node服务不会中断，但这种处理方式不可避免的会造成一些请求失败和丢失。\\n* **内建负载均衡**。使用node cluster集群模块，可以自由的设置每次启动的进程的个数，如果设置为0，意味着它会根据服务器CPU的使用情况来灵活的设置进程的数量。\\n* **停止不稳定的进程**。可以避免死循环。\\n* **控制台监测**。可以在控制台实时监测运行情况。\\n* **多平台支持**。支持各大主流平台如Linux、MacOs、Windows等\\n\\n## 四、安装和使用\\n* 安装\\n   ```bash\\n   # 全局安装\\n   npm install -g pm2\\n   ```\\n   \\n\\n* 启动项目\\n  ```bash\\n  # 1、首先cd到项目的根目录下，也就是项目入口文件同级的目录下\\n  # 2、执行指定应用 pm2 start [配置文件/入口文件] --name [项目名字]\\n  pm2 start app.ts --name web_blog\\n  ```\\n  \\n* 常用命令\\n  ```bash\\n  # 查看当前进程\\n  pm2 ls\\n  # 停止应用进程\\n  pm2 stop\\n  # 重启进程\\n  pm2 restart [项目名字]\\n  # 杀掉所有应用的进程\\n  pm2 kill\\n  # 删除应用后台服务\\n  pm2 delete\\n  ```\\n  \\n## 五、在项目koa中的配置\\n\\n在koa项目中使用pm2，需要进行一些配置\\n\\n### 1、npm一些必须得包\\n\\n```bash\\n# 安装pm2\\nnpm install --save pm2\\n# 安装ts支持，使我们可以直接运行ts文件\\nnpm install --save-dev ts-node typescript\\n```\\n\\n### 2、创建配置文件\\n\\n```bash\\n# 创建配置文件pm2.json\\ntouch pm2.json\\n```\\n\\n#### pm2.json\\n\\n```json\\n{\\n    \\"apps\\": [\\n        {\\n            \\"name\\": \\"production\\",\\n            \\"script\\": \\"./app.ts\\",\\n            \\"exec_mode\\": \\"cluster\\",\\n            \\"instances\\": 1,\\n            \\"cron_restart\\": \\"0 03 * * *\\",\\n            \\"autorestart\\": true,\\n            \\"watch\\": false,\\n            \\"min_uptime\\": \\"200s\\",\\n            \\"max_restarts\\": 10,\\n            \\"ignore_watch\\": [\\n                \\"node_modules\\",\\n                \\".idea\\",\\n                \\"log\\"\\n            ],\\n            \\"max_memory_restart\\": \\"100M\\",\\n            \\"restart_delay\\": \\"3000\\",\\n            \\"env\\": {\\n                \\"NODE_ENV\\": \\"production\\"\\n            },\\n            \\"error_file\\": \\"./log/app-err.log\\",\\n            \\"out_file\\": \\"./log/app-out.log\\",\\n            \\"merge_logs\\": true,\\n            \\"log_date_format\\": \\"YYYY-MM-DD HH:mm:ss\\"\\n        }\\n    ]\\n}\\n```\\n\\n### 3、在package.json文件配置命令\\n\\n```json\\n    \\"scripts\\": {\\n        \\"prod\\": \\"pm2 start config/pm2.json --only production\\",\\n        \\"start\\": \\"pm2 start app.ts --name web_blog\\",\\n        \\"stop\\": \\"pm2 stop config/pm2.config.ts\\",\\n        \\"delete\\": \\"pm2 delete config/pm2.config.ts\\",\\n        \\"list\\": \\"pm2 list\\",\\n        \\"kill\\": \\"pm2 kill\\"\\n    }\\n```\\n\\n至此，在项目根目录下运行`npm run prod`便可启动项目\\n\\n![image](https://img-blog.csdnimg.cn/22fafe113a164e2ea6a140d241de3b4b.png)\\n\\n## 六、遇到的一些问题\\n### 1、运行npm run prod报错。\\n\\n![image](https://img-blog.csdnimg.cn/af7802f8959547d695983421eaaaab9e.png)\\n\\n原因：没有指定ts-node目录，故找不到模块来支持执行ts文件。\\n解决：为项目指定ts-node目录\\n\\n```json\\n{\\n    \\"apps\\": [\\n        {\\n            // 前面还有一点...\\n            \\"interpreter\\": \\"./node_modules/.bin/ts-node\\",\\n            // 后面还有很多...\\n        }\\n    ]\\n}\\n```\\n\\n暂时没有遇到其他问题，待续...","tagIds":"13,17,16,36","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":78,"type":1,"groupTimestamp":"1694703444833","cover":"https://www.pmzwei.com/images/125x54xpm2_logo_farbig_cmyk_131105.jpg.pagespeed.ic.nuSnMCBa49.jpg","categoryId":4,"created_at":"2023-11-09T15:04:06.000Z","updated_at":"2023-11-24T05:47:52.000Z","tagList":[{"id":13,"name":"NodeJS"},{"id":16,"name":"TypeScript"},{"id":17,"name":"Koa"},{"id":36,"name":"pm2"}],"createDate":"2023-09-14"}',nn='{"id":34,"title":"web调试之Whistle","subTitle":"调试好帮手","link":null,"description":"Whistle是一个Node实现的跨平台Web调试代理工具。它的作用可以理解为用Node开一个代理服务器，将我们需要调试的设备代理到whistle后，由whistle进行代理请求。同时whistle支持类似于hosts的转发规则，我们可以通过正则或者内置的一些指令对我们需要进行代理的域名进行转发，添加插件等。","content":"## Whistle\\n\\n### [官方文档](http://wproxy.org/whistle/)\\n\\n是基于 Node 实现的跨平台抓包调试代理工具，有以下基本功能：\\n\\n1）查看 HTTP、HTTPS、HTTP2、WebSocket、TCP 请求响应数据\\n\\n2）修改 HTTP、HTTPS、HTTP2、WebSocket、TCP 请求响应数据\\n\\n   * 修改请求 url、方法、头部、内容等\\n   * 修改响应状态码、头部、内容，并支持本地替换等\\n   * 修改 WebSocket 和 TCP 收发的帧数据\\n\\n3）设置 hosts（支持 IPv6）、http-proxy、https-proxy、socks\\n\\n4）作为HTTP代理或反向代理\\n\\n5）集成常用的 web 调试工具，如 weinre 和 log 等\\n\\n6）支持用 Node 编写插件扩展\\n\\nwhistle基本上覆盖了所有抓包调试代理可以实现的功能，且所有操作都可以通过类似配置hosts的方式实现。\\n类似的工具有Windows平台上的[Fiddler](http://www.telerik.com/fiddler/)；\\n\\n### 1、安装\\n\\nwhistle安装过程需要以下步骤（**缺一不可**）：\\n\\n- 安装Node\\n- 安装whistle\\n- 启动whistle\\n- 配置代理\\n- 安装根证书\\n\\n上述步骤的详细操作分别参见如下文档：\\n\\n1） [安装启动whistle](http://wproxy.org/whistle/install.html)\\n\\n2） [安装whistle根证书](<http://wproxy.org/whistle/webui/https.html>)\\n\\n### 2、基本命令\\n\\n启动、停止、重启whistle的命令行命令如下：\\n\\n```bash\\n# 查看whistle的所有命令行操作\\nw2 --help\\n# 启动\\nw2 start\\n# 停止\\nw2 stop\\n# 重启\\nw2 restart\\n```\\n\\n### 3、配置代理\\n\\n*   配置信息：默认代理本地127.0.0.1，端口8899。\\n*   使用代理\\n\\n    1）全局代理，直接配置系统代理；\\n\\n    2）浏览器代理：安装浏览器代理插件[SwitchyOmega](https://chrome.google.com/webstore/detail/padekgcemlokbadohgkifijomclgjgif) (推荐)；\\n    \\n    <img src=\\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21baf72a70924e62a1d018f82377d738~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1884&h=1130&s=614501&e=png&b=fdfdfd\\" alt=\\"image-20210813051114187\\" style=\\"zoom: 33%;\\">\\n\\n    3）移动端配置代理（以ios为例）\\n    \\n    <img src=\\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1ab8c748753841dfa7897b72c5141457~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=2330&#x26;h=1382&#x26;s=149889&#x26;e=jpg&#x26;b=fcfcfc\\" alt=\\"img\\" style=\\"zoom: 33%;\\">\\n    \\n    如果连接的是Wi-Fi代理不成功，原因是不能和电脑本机处于相同ip，同一个iP不能互访。切换Wi-Fi即可。\\n    \\n    4）其他：微信开发工具使用代理\\n    \\n    <img src=\\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d9098df8cc6486d9ab67329462c4653~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=446&h=414&s=213608&e=png&b=393d3f\\" alt=\\"image-20210813041514908\\" style=\\"width:250px\\">\\n    \\n    <img src=\\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/951d381438834736b781894f4a7a89ac~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1360&h=564&s=76127&e=png&b=343434\\" alt=\\"image-20210813041622230\\" style=\\"zoom: 50%;\\">\\n\\n### 4、创建规则\\n\\n打开`http://127.0.0.0:8899`，通过右键菜单或页面上方菜单栏的`Create` 按钮创建一个分组\\n\\n1）设置hosts\\n\\n指定 [www.ifeng.com](http://www.ifeng.com/) 的ip和端口，把请求转发到本地8080端口，这个在平时开发中可以用来去掉url中的端口号:\\n\\n```bash\\n# www.ifeng.com 127.0.0.1\\nwww.ifeng.com 127.0.0.1:8080\\n# or\\n127.0.0.1:8080 www.ifeng.com\\n```\\n\\n也可以用某个域名的ip设置hosts\\n\\n```bash\\nwww.ifeng.com host://www.qq.com:8080\\n# or\\nhost://www.qq.com:8080 www.ifeng.com\\n```\\n\\n2）本地替换\\n\\n平时开发中经常会用到这个功能，把响应替换成本地文件内容。\\n\\n```bash\\n# Mac、Linux\\nwww.ifeng.com file:///User/username/test\\n# or www.ifeng.com file:///User/username/test/index.html\\n\\n# Windows的路径分隔符可以用 \\\\ 或者 /\\nwww.ifeng.com file://E:\\\\xx\\\\test\\n# or www.ifeng.com file://E:\\\\xx\\\\test\\\\index.html\\n```\\n\\n`http://www.ifeng.com`会先尝试加载`/User/username/test`这个文件，如果不存在，则会加载`/User/username/test/index.html`，如果没有对应的文件则返回404。\\n\\n3）请求转发\\n\\n[www.ifeng.com](http://www.ifeng.com/) 域名下的请求都替换成对应的`www.aliexpress.com`域名\\n\\n```bash\\nwww.ifeng.com www.aliexpress.com\\n```\\n\\n4）注入html、js、css\\n\\nwhistle会自动根据响应内容的类型，判断是否注入相应的文本及如何注入(是否要用标签包裹起来)。\\n    \\n```bash\\n# Mac、Linux\\nwww.ifeng.com html:///User/xxx/test/test.html\\nwww.ifeng.com js:///User/xxx/test/test.js\\nwww.ifeng.com css:///User/xxx/test/test.css\\n         \\n# Windows的路径分隔符可以用`\\\\`和`/`\\nwww.ifeng.com html://E:\\\\xx\\\\test\\\\test.html\\nwww.ifeng.com js://E:\\\\xx\\\\test\\\\test.js\\nwww.ifeng.com css://E:\\\\xx\\\\test\\\\test.css\\n```\\n    \\n所有`www.ifeng.com`域名下的请求，whistle都会根据响应类型，将处理好的文本注入到响应内容里面，如是html请求，js和css会分别自动加上`script`和`style`标签后追加到内容后面。\\n\\n5）调试远程页面\\n\\n利用whistle提供的[weinre](rules/weinre.html)和[log](rules/log.html)两个协议，可以实现修改远程页面DOM结构及自动捕获页面js错误及console打印的信息，还可以在页面顶部或js文件底部注入指定的脚步调试页面信息。\\n\\n使用whistle的功能前，先把要相应的系统代理或浏览器代理指向whistle，如何设置可以参考：[安装启动](install.html)\\n\\nweinre：\\n    \\n```bash\\nwww.ifeng.com weinre://test\\n```\\n    \\n配置后保存，打开\\\\[[www.ifeng.com\\\\](http://](http://www.ifeng.com]\\\\(http://) /)，鼠标放在菜单栏的weinre按钮上会显示一个列表，并点击其中的`test`项打开weinre的调试页面选择对应的url切换到Elements即可。\\n\\nlog:\\n    \\n```bash\\nwww.ifeng.com log://{test.js}\\n```\\n\\n配置后保存，鼠标放在菜单栏的Values按钮上会显示一个列表，并点击其中的`test.js`项，whistle会自动在Values上建立一个test.js分组，在里面填入`console.log(1, 2, 3, {a: 123})`保存，打开Network -> 右侧Log -> Console，再打开 [www.ifeng.com](http://www.ifeng.com/) ，即可看到Log下面的Page输出的信息。\\n\\n6）Mock 数据\\n\\n最简单的 Mock 可以针对一个 pattern 替换响应体和响应码等等。如下所示：\\n\\n ```bash\\n# Rules\\n# 将 www.mock.com/api/user 接口的响应内容替换为 user 中的内容，并将响应码替换成 200\\n# 其中，user 在 Values 面板中保存\\nwww.mock.com/api/user resBody://{user} replaceStatus://200\\n```\\n\\n设定请求的响应延时，只需要再加一个 `resDelay` 的 operatorURI：\\n\\n```bash\\n# 10s 后返回\\nwww.mock.com/api/user resBody://{user} replaceStatus://200 resDelay://10000\\n```\\n\\n可能有时候会有更加复杂的 Mock 需求，比如几个接口之间互相有关联，需要跑通一个完整的链路可能需要一些定制的逻辑。Whistle 提供了很多插件，其中有一个能够提供非常强大 Mock 能力的插件—— [whistle.vase](https://link.zhihu.com/?target=https%3A//github.com/whistle-plugins/whistle.vase) 。使用这个插件，我们甚至可以直接写 JS 代码，根据我们的具体请求参数作出各种具体逻辑。\\n\\n```bash\\nnpm i -g whistle.vase\\n```\\n\\n在安装完之后，就可以在 Plugins 中对其进行配置了。\\n\\n\\n### 5、捕获https\\n\\nwhistle支持抓取https 请求，具体配置方法参见：[HTTPS拦截](http://wproxy.org/whistle/webui/https.html)\\n\\n### 6、真机调试\\n\\n调试移动页面有两种方式，一种是Weinre，另外一种是log日志输出。\\n\\n*   `weinre`可以用于调试远程页面。\\n\\n```bash\\nwww.midea.cn weinre://midea\\n```\\n\\n当用手机打开配置的页面时，在顶部操作栏的**Weinre**栏，在下拉列表就可以找到设置的weinre id的，点击会新开一个weinre调试页面，就可以开始使用weinre。\\n\\n![image-20210813050538755.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/14f9127bd4684cc198b9176f7f314b0b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1906\\\\&h=488\\\\&s=157172\\\\&e=png\\\\&b=08213e)\\n\\n*   log\\n\\n```bash\\nwww.midea.cn log://{log.js}\\n```\\n\\n通过自动监控 html 页面或 js 文件出现的错误及 console.xxx 打印出来的信息，会自动在 whistle 界面的 log 模块显示这些错误及信息日志。\\n\\n![image-20210813050759582.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3eee89305d7046d8a6322ce2c4dff902~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1346\\\\&h=348\\\\&s=80855\\\\&e=png\\\\&b=faf2f2)\\n","tagIds":"38","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":88,"type":1,"groupTimestamp":"1674016650744","cover":"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87d09501fcea4e2380db1818c428b8c6~tplv-k3u1fbpfcp-jj:108:72:0:0:q75.avis#?w=210&h=201&s=11972&e=jpg&b=fbfbfb","categoryId":1,"created_at":"2023-11-24T05:30:11.000Z","updated_at":"2023-11-24T05:34:10.000Z","tagList":[{"id":38,"name":"调试"}],"createDate":"2023-01-18"}',en="{\"id\":19,\"title\":\"在koa中操作文件\",\"subTitle\":\"对指定目录下的文件进行读写、删除、追加等操作\",\"link\":null,\"description\":\"最近写博客，希望在本地用Markdown编写好文档并保存到数据库的时候，能够同时输出静态json文件来上传到github中，故小小研究了一下，记录一下各种方法\",\"content\":\"这次在koa中对文件进行操作，主要是使用了nodejs中的fs模块，下面我将详细介绍一下fs的各种方法示例。\\n\\n## 一、fs简述\\nfs中的所有方法都用异步和同步两种形式。\\n\\n异步形式始终以完成后的回调函数作为它的最后一个参数。传给回调函数的参数取决于具体方法，但第一个参数总是留给异常字段，如果操作是成功的，那么第一个异常字段会返回null或undefined。\\n\\n```js\\nconst fs = require('fs)\\nfs.unlink('/test', function(err){\\n if (err) {\\n  throw err\\n }\\n console.log('success')\\n})\\n```\\n\\n当使用同步形式时，任何异常都会被立即抛出。可以使用`try/catch`来处理异常，或者让他们往上冒泡。\\n\\n```js\\nconst fs = require('fs)\\nfs.unlinkSync('/test')\\nconsole.log('success')\\n```\\n\\n异步方法不保证执行顺序。 所以下面的例子容易出错\\n\\n```js\\nfs.rename('/tmp/hello', '/tmp/world', function(err){\\n if (err) throw err\\n console.log('renamed complete')\\n})\\n\\nfs.stat('/tmp/world', function(err, stats){\\n if (err) throw err\\n console.log('stats: ${JSON.stringify(stats)}')\\n})\\n```\\n\\nfs.stat 可能在 fs.rename 之前执行。正确的方法是把回调链起来\\n\\n```js\\nfs.rename('/tmp/hello', '/tmp/world', function(err){\\n if (err) throw err\\n fs.stat('/tmp/world', function(err, stats){\\n  if (err) throw err\\n  console.log('stats: ${JSON.stringify(stats)}')\\n })\\n})\\n```\\n\\n推荐使用这些函数的异步版本，同步版本会阻塞整个进程，直到它们完成（停止所有连接）。\\n\\n## 二、fs底层操作\\n\\n### 1、打开文件\\n\\n#### 1-1 异步：`fs.open(path, flags[mode], callback)`\\n\\n参数如下：\\n\\n* path: \\\\<String> | \\\\<Buffer>\\n* flags: \\\\<String> | \\\\<Number>\\n* mode: \\\\<Integer> 设置文件模式（权限和 sticky 位），但只有当文件被创建时才有效。默认为 0666，可读写\\n* callback: \\\\<Function> 该回调有两个参数 (err错误, fd文件标识，与定时器标识类似)\\n\\nflags可以是：\\n* 'r' - 以读取模式打开文件。如果文件不存在则发生异常。\\n\\n* 'r+' - 以读写模式打开文件。如果文件不存在则发生异常。\\n\\n* 'rs+' - 以同步读写模式打开文件。命令操作系统绕过本地文件系统缓存。\\n\\n* 'w' - 以写入模式打开文件。文件会被创建(如果文件不存在)或截断(如果文件存在)。\\n\\n* 'wx' - 类似 'w'，但如果 path 存在，则失败。\\n\\n* 'w+' - 以读写模式打开文件。文件会被创建(如果文件不存在)或截断(如果文件存在)。\\n\\n* 'wx+' - 类似 'w+'，但如果 path 存在，则失败。\\n\\n* 'a' - 以追加模式打开文件。如果文件不存在，则会被创建。\\n\\n* 'ax' - 类似于 'a'，但如果 path 存在，则失败。\\n\\n* 'a+' - 以读取和追加模式打开文件。如果文件不存在，则会被创建。\\n\\n* 'ax+' - 类似于 'a+'，但如果 path 存在，则失败。\\n\\n**注意：使用`'rs+'`模式不会使`fs.open()`进入同步阻塞调用。如果那是你想要的，则应该使用`fs.openSync()`**\\n\\n```js\\nconst fs = require('fs');\\n \\nfs.open('a.txt','r',function(err,fs){\\n  console.log(err) // null\\n  console.log(fs) // 3\\n})\\n\\nfs.open('b.txt','r',function(err,fs){\\n/*\\n{ Error: ENOENT: no such file or directory, open 'D:\\\\project\\\\b.txt'\\n  at Error (native)\\n errno: -4058,\\n code: 'ENOENT',\\n syscall: 'open',\\n path: 'D:\\\\\\\\project\\\\\\\\b.txt' }\\n */\\n  console.log(err)\\n  console.log(fs) // undefined\\n})\\n```\\n\\n文件的回调函数中的第二个参数fd代表文件标识，与定时器标识类似，用于标识文件，且随着文件的打开顺序递增\\n\\n```js\\nconst fs = require('fs');\\n \\nfs.open('1.txt','r',function(err,fs){\\n  console.log(fs) // 3\\n})\\n \\nfs.open('2.txt','r',function(err,fs){\\n  console.log(fs) // 4\\n})\\n```\\n\\n#### 1-2 同步：`fs.openSync(path, flags[mode])`\\nfs.open() 的同步版本，返回一个表示文件描述符的整数。\\n\\n```js\\nconst fs = require('fs');\\nconst result = fs.openSync('1.txt','r')\\nconsole.log(result) // 3\\n```\\n\\n### 2、读取文件\\n\\n#### 2-1 `fs.read(fd, buffer, offset, length, position, callback)`\\n\\n参数如下：\\n\\n* fd \\\\<Integer> 通过 fs.open() 方法返回的文件描述符\\n\\n* buffer \\\\<String> | \\\\<Buffer> 数据将被写入到buffer\\n\\n* offset \\\\<Integer> buffer中开始写入的偏移量\\n\\n* length \\\\<Integer> 指定要读取的字节数(整数)\\n\\n* position \\\\<Integer> 指定从文件中开始读取的位置(整数)。 如果position为null，则数据从当前文件位置开始读取\\n\\n* callback \\\\<Function> 回调有三个参数 (err, bytesRead, buffer)。err为错误信息，bytesRead表示读取的字节数，buffer为缓冲区对象\\n\\n由于使用read()方法，会将文件内容读取buffer对象中，所以需要提前先准备一个buffer对象\\n\\n```js\\nconst fs = require('fs')\\nfs.open('1.txt','r',function(err,fd){\\n  if(err){\\n    console.log('文件打开失败')\\n  }else{\\n    const bf = Buffer.alloc(5)\\n    fs.read(fd,bf,0,3,null,function(err,len,buffer){\\n      console.log(err) // null\\n      console.log(len) // 3\\n      console.log(buffer) // <Buffer 61 61 61 00 00>\\n    })\\n  }\\n});\\n```\\n#### 2-2 `fs.readSync(fd, buffer, offset, length, position)`\\nfs.read() 的同步版本，返回 bytesRead 的数量\\n\\n```js\\nconst fs = require('fs')\\nconst fd = fs.openSync('1.txt','r')\\nconst bf = Buffer.alloc(5)\\nconst result = fs.readSync(fd,bf,0,3,null)\\nconsole.log(result) // 3\\n```\\n### 3、写入文件\\n\\n#### 3-1 `fs.write(fd, buffer, offset, length[, position], callback)`\\n\\n参数如下\\n\\n* fd \\\\<Integer>  文件标识\\n\\n* buffer \\\\<String> | \\\\<Buffer> 要将buffer中的数据写入到文件中\\n\\n* offset \\\\<Integer> buffer对象中要写入的数据的起始位置\\n\\n* length \\\\<Integer> length是一个整数，指定要写入的字节数\\n\\n* position \\\\<Integer> 指定从文件开始写入数据的位置的偏移量。 如果 typeof position !== 'number'，则数据从当前位置写入\\n\\n* callback \\\\<Function> 回调有三个参数(err, written, buffer)，其中written指定从buffer写入了多少字节\\n* \\n**注意：多次对同一文件使用fs.write且不等待回调，是不安全的。对于这种情况，强烈推荐使用`fs.createWriteStream`。当我们要对打开的文件进行写操作的时候，打开文件的模式应该是读写模式**\\n\\n```js\\nconst fs = require('fs')\\nfs.open('1.txt','r+',function(err,fd){\\n  if(err){\\n    console.log('文件打开失败')\\n  }else{\\n    const bf = Buffer.from('test')\\n    fs.write(fd,bf,0,3,null,function(err,len,buffer){\\n      console.log(err) // null\\n      console.log(len) // 3\\n      console.log(buffer) // <Buffer 74 65 73 74>\\n    })\\n  }\\n});\\n```\\n#### 3-2 `fs.write(fd, data[position[encoding]], callback)`\\n\\n该方法写入data到fd指定的文件。如果data不是一个Buffer实例，则该值将被强制转换为一个字符串\\n\\n不同于写入 buffer，该方法整个字符串必须被写入。不能指定子字符串，这是因为结果数据的字节偏移量可能与字符串的偏移量不同\\n\\n* fd  \\\\<Integer> 文件标识\\n\\n* data \\\\<String> | \\\\<Buffer> 要将string或buffer中的数据写入到文件中\\n\\n* position \\\\<Integer> 指向从文件开始写入数据的位置的偏移量。 如果 typeof position !== 'number'，则数据从当前位置写入\\n\\n* encoding \\\\<String> 期望的字符串编码\\n\\n* callback \\\\<Function> 回调有三个参数(err, written, str)，其中written指定从str写入了多少字节\\n\\n```js\\nconst fs = require('fs');\\nfs.open('1.txt','r+',function(err,fd){\\n  if(err){\\n    console.log('文件打开失败');\\n  }else{\\n    fs.write(fd,'12345',function(err,len,str){\\n      console.log(err);//null\\n      console.log(len);//5\\n      console.log(str);//<Buffer 74 65 73 74>\\n    })\\n  }\\n});\\n```\\n#### 3-3 `fs.writeSync()`\\nfs.write() 的同步版本。返回写入的字节数\\n\\n```js\\nconst fs = require('fs')\\nconst fd = fs.openSync('1.txt','r+')\\nconst bf = Buffer.alloc(5)\\nconst result = fs.writeSync(fd,bf,0,3,null)\\nconsole.log(result) // 3\\n```\\n### 4、关闭文件\\n#### 4-1 `fs.close(fd, callback)`\\n参数如下：\\n\\n* fd - 通过 fs.open() 方法返回的文件描述符。\\n\\n* callback - 回调函数，没有参数。\\n\\n```js\\nconst fs = require('fs')\\nfs.open('1.txt','r+',function(err,fd){\\n  if(err){\\n    console.log('文件打开失败')\\n  }else{\\n    fs.close(fd, function(err){\\n      if (err){\\n        console.log(err)\\n      } \\n      console.log(\\\"文件关闭成功\\\")\\n    })\\n  }\\n})\\n```\\n#### 4-2 `fs.closeSync(fd)`\\n同步版本，返回undefined\\n\\n```js\\nconst fs = require('fs')\\nconst fd = fs.openSync('1.txt','r+')\\nfs.closeSync(fd)\\n```\\n## 三、File操作\\n\\n上一部分介绍的都是些底层的操作，接下来将介绍一些更便捷的文件操作。使用下列方法的时候，不需要再打开和关闭文件，直接操作即可\\n\\n### 1、写入文件\\n#### 1-1 `fs.writeFile(file, data[, options], callback)`\\n异步的将数据写入一个文件，如果文件不存在则新建，如果文件原先存在，会被替换\\n\\n参数如下\\n* file - 文件名或文件描述符。\\n\\n* data - 要写入文件的数据，可以是 String(字符串) 或 Buffer(流) 对象。\\n\\n* options - 该参数是一个对象，包含 {encoding, mode, flag}。默认编码为 utf8, 模式为 0666 ， flag 为 'w'\\n\\n* callback - 回调函数，回调函数只包含错误信息参数(err)，在写入失败时返回。\\n\\n#### 1-2 `fs.writeFileSync(file, data[, options])`\\nfs.writeFile() 的同步版本。返回 undefined\\n\\n### 2、追加文件\\n#### 2-1 `fs.appendFile(filename, data, [options], callback)`\\n异步地追加数据到一个文件，如果文件不存在则创建文件。 data 可以是一个字符串或 buffer\\n\\n参数如下\\n\\n* file - 文件名或文件描述符。\\n\\n* data - 要写入文件的数据，可以是 String(字符串) 或 Buffer(流) 对象。\\n\\n* options - 该参数是一个对象，包含 {encoding, mode, flag}。默认编码为 utf8, 模式为 0666 ， flag 为 'w'\\n\\n* callback - 回调函数，回调函数只包含错误信息参数(err)，在写入失败时返回。\\n\\n#### 2-2 `fs.appendFileSync(file, data[, options])`\\n同步版本。返回undefined\\n\\n### 3、读取文件\\n#### 3-1 `fs.readFile(file[, options], callback)`\\n参数如下\\n\\n* file - 文件名或文件描述符\\n\\n* options - 该参数是一个对象，包含 {encoding, flag}。默认编码为null，即如果字符编码未指定，则返回原始的 buffer；flag默认为'r'\\n\\n* callback - 回调函数，回调有两个参数 (err, data)，其中data是文件的内容（buffer对象），err是错误信息参数，在写入失败时返回\\n\\n#### 3-2 `fs.readFileSync(file[, options])`\\n同步版本。返回file的内容\\n\\n如果指定了encoding选项，则该函数返回一个字符串，否则返回一个buffer\\n```js\\nconst fs = require('fs')\\nconst filename = '1.txt'\\nconst result = fs.readFileSync(filename)\\nconsole.log(result) //<Buffer 61 62 63 20 77 6f 72 6c 64 20 6c 61 6c 61 6c 61>\\nconsole.log(result.toString()) 'abc world lalala'\\n```\\n### 4、删除文件\\n#### 4-1 `fs.unlink(path, callback)`\\n参数如下：\\n\\n* path - 文件路径。\\n\\n* callback - 回调函数，没有参数。 \\n\\n#### 4-2 `fs.unlinkSync(path)`\\n同步版本，返回值为undefined\\n\\n### 5、重命名\\n#### 5-1 `fs.rename(oldPath, newPath, callback)`\\n参数如下：\\n\\n* oldPath \\\\<String> | \\\\<Buffer>\\n\\n* newPath \\\\<String> | \\\\<Buffer>\\n\\n* callback \\\\<Function> 回调只有一个可能的异常参数\\n\\n#### 5-2 `fs.renameSync(oldPath, newPath)`\\n同步版本，返回undefined\\n\\n### 6、文件信息\\n#### 6-1 `fs.stat(path, callback)`\\n\\nfs.stat()执行后，会将stats类的实例返回给其回调函数。可通过stats类中的提供方法判断文件的相关属性\\n\\n参数如下：\\n\\n* path - 文件路径。\\n\\n* callback - 回调函数，带有两个参数如：(err, stats), stats 是 fs.Stats 对象\\n\\n```js\\nconst fs = require('fs')\\nconst filename = 'a.txt'\\nfs.stat(filename,function(err,stats){\\n  console.log(err) // null\\n/*\\n{ dev: 223576,\\n mode: 33206,\\n nlink: 1,\\n uid: 0,\\n gid: 0,\\n rdev: 0,\\n blksize: undefined,\\n ino: 7599824371527537,\\n size: 0,\\n blocks: undefined,\\n atime: 2017-06-03T14:18:15.370Z,\\n mtime: 2017-06-03T14:18:15.370Z,\\n ctime: 2017-06-03T16:32:05.776Z,\\n birthtime: 2017-06-03T14:18:15.370Z }\\n */ \\n  console.log(stats)\\n})\\n```\\n**stats类中的方法有**\\n\\n* stats.isFile()  如果是文件返回 true，否则返回 false。\\n\\n* stats.isDirectory() 如果是目录返回 true，否则返回 false。\\n\\n* stats.isBlockDevice()   如果是块设备返回 true，否则返回 false。\\n\\n* stats.isCharacterDevice()   如果是字符设备返回 true，否则返回 false。\\n\\n* stats.isSymbolicLink()  如果是软链接返回 true，否则返回 false。\\n\\n* stats.isFIFO()  如果是FIFO，返回true，否则返回false。FIFO是UNIX中的一种特殊类型的命令管道。\\n\\n* stats.isSocket()    如果是 Socket 返回 true，否则返回 false。\\n\\n```js\\nconst fs = require('fs')\\nconst filename = 'a.txt'\\nfs.stat(filename,function(err,stats){\\n  console.log(stats.isFile()) // true\\n})\\n```\\n#### 6-2 `fs.statSync(path)`\\n同步版本，返回一个 fs.Stats 实例\\n\\n### 7、监听\\n#### 7-1 `fs.watch(filename[, options][, listener])`\\n\\n该方法用于监视filename的变化，filename可以是一个文件或一个目录。返回的对象是一个fs.FSWatcher\\n\\n参数如下\\n\\n* filename \\\\<String> | \\\\<Buffer>\\n\\n* options \\\\<String> | \\\\<Object> 参数可选，如果options是一个字符串，则它指定了encoding。否则options应该以一个对象传入\\n\\n    * persistent \\\\<Boolean> 指明如果文件正在被监视，进程是否应该继续运行。默认为true\\n\\n    * recursive \\\\<Boolean> 指明是否全部子目录应该被监视，或只是当前目录。 适用于当一个目录被指定时，且只在支持的平台。默认为false\\n\\n    * encoding \\\\<String> 指定用于传给监听器的文件名的字符编码。默认为'utf8'\\n\\n* listener \\\\<Function> 回调函数有两个参数 (eventType, filename)。 eventType可以是'rename'或'change'，filename是触发事件的文件的名称\\n\\n回调中提供的 filename 参数仅在 Linux 和 Windows 系统上支持。 即使在支持的平台中，filename 也不能保证提供。 因此，不要以为 filename 参数总是在回调中提供，如果它是空的，需要有一定的后备逻辑\\n\\n```js\\nfs.watch('somedir', (eventType, filename) => {\\n console.log(`事件类型是: ${eventType}`)\\n if (filename) {\\n  console.log(`提供的文件名: ${filename}`)\\n } else {\\n  console.log('未提供文件名')\\n }\\n})\\n```\\n\\n```js\\nconst fs = require('fs')\\nconst filename = '1.txt'\\nfs.watch(filename,function(eventType, _filename){\\n  console.log(eventType) // change\\n  if(_filename){\\n    console.log(_filename + '发生了改变') // '1.txt发生了改变'\\n  }else{\\n    console.log('...')\\n  }\\n   \\n})\\n```\\n\\n**注意: 当一个文件出现或消失在一个目录里时，'rename'也会被触发**\\n\\n## 四、fs目录操作\\n### 1、创建\\n#### 1-1 `fs.mkdir(path[, mode], callback)`\\n参数如下：\\n\\n* path - 文件路径。\\n\\n* mode - 设置目录权限，默认为 0777。\\n\\n* callback - 回调函数，回调只有一个可能的异常参数\\n\\n#### 1-2 `fs.mkdirSync(path[, mode])`\\n同步版本，返回undefined\\n\\n### 2、删除\\n#### 2-1 `fs.rmdir(path, callback)`\\n参数如下：\\n\\n* path - 文件路径。\\n\\n* callback - 回调函数，回调只有一个可能的异常参数\\n\\n#### 2-2 `fs.rmdirSync(path, callback)`\\n同步版本，返回undefined\\n\\n### 3、读取\\n#### 3-1 `fs.readdir(path[, options], callback)`\\n参数如下：\\n\\n* path \\\\<String> | \\\\<Buffer>\\n\\n* options \\\\<String> | \\\\<Object> 可选的 options 参数用于传入回调的文件名，它可以是一个字符串并指定一个字符编码，或是一个对象且由一个 encoding 属性指定使用的字符编码。 如果 encoding 设为 'buffer'，则返回的文件名会被作为 Buffer 对象传入\\n\\n    * encoding \\\\<String> 默认 = 'utf8'\\n\\n* callback \\\\<Function> 回调有两个参数 (err, files)，其中 files 是目录中不包括 '.' 和 '..' 的文件名的数组\\n\\n```js\\nvar fs = require('fs');\\nfs.readdir('./',function(err,data){\\n  console.log(err);//null\\n/*\\n[ '.csslintrc',\\n '.jshintrc',\\n 'a.txt',\\n 'dist',\\n 'Gruntfile.js',\\n 'Gruntfile1.js',\\n 'index.html',\\n 'main.js',\\n 'node_modules',\\n 'package.json',\\n 'src' ]\\n */\\n  console.log(data);\\n})\\n```\\n\\n```js\\nvar fs = require('fs');\\nfs.readdir('./',function(err,data){\\n  data.forEach(function(item,index,arr){\\n    fs.stat(item,function(err,stats){\\n      if(stats.isFile()){\\n        console.log('文件：' + item);\\n      }\\n      if(stats.isDirectory()){\\n        console.log('目录：' + item);\\n      }\\n    });  \\n  })\\n})\\n/*\\n文件：.jshintrc\\n文件：.csslintrc\\n目录：dist\\n文件：Gruntfile.js\\n文件：index.html\\n文件：Gruntfile1.js\\n文件：main.js\\n目录：node_modules\\n文件：package.json\\n文件：a.txt\\n目录：src\\n */\\n```\\n\\n#### 3-2 `fs.readdirSync(path[, options], callback)`\\n同步版本，返回一个不包括 '.' 和 '..' 的文件名的数组\\n\\n### 4、遍历目录\\n遍历目录是操作文件时的一个常见需求。比如写一个程序，需要找到并处理指定目录下的所有JS文件时，就需要遍历整个目录\\n\\n遍历目录时一般使用递归算法，否则就难以编写出简洁的代码。递归算法与数学归纳法类似，通过不断缩小问题的规模来解决问题\\n\\n```js\\nfunction factorial(n) {\\n  if (n === 1) {\\n    return 1;\\n  } else {\\n    return n * factorial(n - 1);\\n  }\\n}\\n```\\n上边的函数用于计算N的阶乘（N!）。可以看到，当N大于1时，问题简化为计算N乘以N-1的阶乘。当N等于1时，问题达到最小规模，不需要再简化，因此直接返回1\\n\\n目录是一个树状结构，在遍历时一般使用深度优先+先序遍历算法。深度优先，意味着到达一个节点后，首先接着遍历子节点而不是邻居节点。先序遍历，意味着首次到达了某节点就算遍历完成，而不是最后一次返回某节点才算数。因此使用这种遍历方式时，下边这棵树的遍历顺序是A > B > D > E > C > F\\n\\n```\\n          A\\n\\n         / \\\\\\n\\n        B   C\\n\\n       / \\\\   \\\\\\n\\n      D   E   F\\n```\\n\\n了解了必要的算法后，我们可以简单地实现以下目录遍历函数\\n\\n```js\\nfunction travel(dir, callback) {\\n  fs.readdirSync(dir).forEach(function (file) {\\n    var pathname = path.join(dir, file);\\n    if (fs.statSync(pathname).isDirectory()) {\\n      travel(pathname, callback);\\n    } else {\\n      callback(pathname);\\n    }\\n  });\\n}\\n```\\n\\n可以看到，该函数以某个目录作为遍历的起点。遇到一个子目录时，就先接着遍历子目录。遇到一个文件时，就把文件的绝对路径传给回调函数。回调函数拿到文件路径后，就可以做各种判断和处理。因此假设有以下目录\\n\\n```\\n  - /home/user/\\n    - foo/\\n        x.js\\n    - bar/\\n        y.js\\n    z.css\\n```\\n\\n使用以下代码遍历该目录时，得到的输入如下\\n\\n```js\\ntravel('/home/user', function (pathname) {\\n  console.log(pathname);\\n});\\n------------------------\\n/home/user/foo/x.js\\n/home/user/bar/y.js\\n/home/user/z.css\\n```\\n\\n如果读取目录或读取文件状态时使用的是异步API，目录遍历函数实现起来会有些复杂，但原理完全相同。travel函数的异步版本如下\\n\\n```js\\nfunction travel(dir, callback, finish) {\\n  fs.readdir(dir, function (err, files) {\\n    (function next(i) {\\n      if (i < files.length) {\\n        var pathname = path.join(dir, files[i]);\\n        fs.stat(pathname, function (err, stats) {\\n          if (stats.isDirectory()) {\\n            travel(pathname, callback, function () {\\n              next(i + 1);\\n            });\\n          } else {\\n            callback(pathname, function () {\\n              next(i + 1);\\n            });\\n          }\\n        });\\n      } else {\\n        finish && finish();\\n      }\\n    }(0));\\n  });\\n```\",\"tagIds\":\"13,17,11\",\"author\":\"菜头\",\"authorAvatar\":\"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif\",\"weight\":666,\"type\":1,\"groupTimestamp\":\"1668357614798\",\"cover\":\"https://florelierogier.files.wordpress.com/2015/06/love-banana-minions.jpg?w=1200\",\"categoryId\":2,\"created_at\":\"2023-11-09T16:40:28.000Z\",\"updated_at\":\"2023-11-10T14:35:16.000Z\",\"tagList\":[{\"id\":11,\"name\":\"JavaScript\"},{\"id\":13,\"name\":\"NodeJS\"},{\"id\":17,\"name\":\"Koa\"}],\"createDate\":\"2022-11-14\"}",tn='{"id":20,"title":"记一次图片懒加载优化","subTitle":"对项目中的图片懒加载封装方法进行优化","link":null,"description":"项目组件库中图片懒加载是根据clientTop、offsetTop、clientHeight、scrollTop之间的高度差计算结合scroll事件来实现的。最近开发的活动页面中部分页面几乎全用图片堆砌而成，在访问该页面的时候，由于频繁触发scrollTop事件，频繁进行计算，造成性能问题，导致页面卡顿，故想重构懒加载图片的封装方法，优化页面性能。","content":"## 方案一：使用getBoundingClientRect API ❌\\n\\n`getBoundingClientRect()`方法返回元素的宽高和其相对于视图窗口左上角的位置。如果元素的box-sizing是content-box，那么`getBoundingClientRect()`返回的宽高是元素内容宽高+padding+border的总和，如果是border-box，那么其返回的就是元素的内容宽高。\\n\\n\\n```html\\n<style>\\n  * {\\n    margin: 0;\\n    padding: 0;\\n  }\\n  .box {\\n    width: 400px;\\n    height: 200px;\\n    margin: 100px auto;\\n    border: 1px solid #ccc;\\n  }\\n  .child {\\n    width: 200px;\\n    height: 100px;\\n    margin: 20px;\\n    border: 1px solid #ccc;\\n  }\\n</style>\\n<body>\\n  <div class=\\"box\\">\\n    <div class=\\"child\\">\\n      child\\n    </div>\\n  </div>\\n</body>\\n<script>\\n  const childDom = document.querySelector(\'.child\');\\n  console.log(childDom.getBoundingClientRect());\\n  // --- 相对于视口左上角的位置，均是 numer ---\\n  // top: 100     --- 盒子上边框距离视口顶部的距离\\n  // bottom: 302  --- 盒子底边框距离视口顶部的距离 = top + height\\n  // left: 394    --- 盒子左边框距离视口左侧的距离\\n  // right: 796   --- 盒子右边框距离视口左侧的距离 = left + width\\n  // x: 394       --- 盒子左上角相对于视口左侧的距离\\n  // y: 100       --- 盒子左上角相对于视口顶部的距离\\n\\n  // 盒子的宽高\\n  // width: 402\\n  // height: 202\\n<\/script>\\n```\\n\\n##### 如何判断何时触发懒加载？\\n\\n只需要对比元素距离视口顶部的距离与视图的高度便能得知元素是否出现在了视图内：\\n```js\\n// clientHeight 代表当前视口的高度\\nimg.getBoundingClientRect().top < document.documentElement.clientHeight;\\n```\\n\\n但是由于我们需要动态的得知元素距离视口顶部的距离，所以如果改用这个API，仍需使用到scroll事件来监听页面的滚动，所以相对于旧的封装方法来说，计算量少了一点点，但是对于性能的消耗并没有太大的缓解，故改用这个API不是最佳选择。\\n\\n## 方案二：IntersectionObserver API ✅\\n\\n`IntersectionObserver API`可以自动\\"观察\\"元素是否可见，是一个能够监听元素是否到了当前视口的事件。\\n\\n`var io = new IntersectionObserver(callback, option);`IntersectionObserver是浏览器原生提供的构造函数，接受两个参数：callback是可见性变化时的回调函数，option是配置对象（该参数可选）。\\n\\n构造函数的返回值是一个观察器实例。实例的observe方法可以指定观察哪个 DOM 节点。\\n\\n```js\\n// 开始观察\\nio.observe(document.getElementById(\'example\'));\\n\\n// 停止观察\\nio.unobserve(element);\\n\\n// 关闭观察器\\nio.disconnect();\\n```\\n\\n##### 如何判断何时触发懒加载？\\n\\n直接判断，IntersectionObserverEntry对象中有 isIntersecting 属性，表示目标元素可见，故可以这样使用：\\n\\n```js\\nconst observer = new IntersectionObserver((changes) => {\\n  // changes: 目标元素集合\\n  changes.forEach((change) => {\\n    // intersectionRatio\\n    if (change.isIntersecting) {\\n      const img = change.target;\\n      img.src = img.dataset.src;\\n      observer.unobserve(img);\\n    }\\n  });\\n});\\n \\nobserver.observe(img);\\n```\\n\\n##### 兼容性\\n\\n除了IE。Chrome从49开始就已经支持该API，因为项目优先考虑Chrome兼容性，所以兼容性的问题在这个项目上来说可以忽略不计\\n\\n##### 注意点\\n\\nIntersectionObserver API 是异步的，不随着目标元素的滚动同步触发。\\n\\n规格写明，IntersectionObserver的实现，应该采用requestIdleCallback()，即只有线程空闲下来，才会执行观察器。这意味着，这个观察器的优先级非常低，只在其他任务执行完，浏览器有了空闲才会执行。","tagIds":"11","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":78,"type":1,"groupTimestamp":"1641671858861","cover":"https://wallpaperm.cmcm.com/90370c9b7fba347f659bdc18b2a5eae2.jpg","categoryId":1,"created_at":"2023-11-22T20:05:03.000Z","updated_at":"2023-11-23T08:53:22.000Z","tagList":[{"id":11,"name":"JavaScript"}],"createDate":"2022-01-09"}',an=`{"id":21,"title":"微信小程序-创建基于stomp协议的WebSocket连接","subTitle":"","link":null,"description":"","content":"### 1.在工具类文件夹utils下引入stomp.js或者stomp.min.js文件\\n> stomp.js搜一下就能找到，实在找不到有时间我可以把文件贴出来\\n\\n### 2、在utils目录下定义WebSocket工具类文件socket.js\\n\`\`\`javascript\\nconst appData = getApp()\\nconst webScoket = {\\n  // 创建基于STOMP协议的WebSocket\\n  client: function () {\\n    const Stomp = require('./stomp.min.js').Stomp\\n    // setInterval是用来发心跳包的，而小程序没有window对象，所以要重新定义\\n    Stomp.setInterval = (interval, f) => {\\n      return setInterval(f, interval)\\n    }\\n    Stomp.clearInterval = (interval, f) => {\\n      return clearInterval(id)\\n    }\\n    return new Promise((resolve, reject) => {\\n      try {\\n        const stompClient = Stomp.over(appData.globalData.ws)\\n        resolve(stompClient)\\n      } catch (e) {\\n        reject(e)\\n      }\\n    })\\n  },\\n  // 初始化\\n  init: function (url = '') {\\n    // 增加全局webscoket配置\\n    appData.globalData.isConnected = false\\n    appData.globalData.isReConnect = true // 允许断线重连\\n    appData.globalData.reConnectLimit = -1 // 断线重连次数，-1不限次数\\n    appData.globalData.msgQueue = []\\n    appData.globalData.wsUrl = url || 'wss:wss地址'\\n    appData.globalData.ws = {\\n      send: this.sendMsg,\\n      close: this.disConnect,\\n      onopen: null,\\n      onclose: null,\\n      onmessage: null\\n    }\\n    const that = this\\n    return new Promise((resolve, reject) => {\\n      //连接\\n      this.connect({\\n        success(msg) {\\n          that.onOpen() // 打开连接\\n          that.onMsg() //接收数据\\n          that.onError() //监听连接错误\\n          that.onClose() // 监听连接是否关闭\\n          resolve(msg)\\n        },\\n        fail(err) {\\n          reject(err)\\n        }\\n      })\\n    })\\n  },\\n  // 创建一个WebSocket连接，params:{url:'String',success:'successCallback',fail:'failCallback'}\\n  connect: function (params = {}) {\\n    console.log('connect')\\n    wx.connectSocket({\\n      url: appData.globalData.wsUrl,\\n      success: (msg) => {\\n        if (params.hasOwnProperty('success')) {\\n          params.success(msg)\\n        }\\n      },\\n      fail: (err) => {\\n        if (params.hasOwnProperty('fail')) {\\n          params.fail(err)\\n        }\\n      }\\n    })\\n  },\\n  // 监听WebSocket连接打开事件\\n  onOpen: function () {\\n    console.log('onopen')\\n    wx.onSocketOpen((res) => {\\n      console.log('WebSocket连接已打开')\\n      appData.globalData.isConnected = true\\n      // 执行队列里未发送的任务\\n      appData.globalData.msgQueue.forEach(item => {\\n        this.sendMsg(item)\\n      })\\n      appData.globalData.msgQueue = []\\n      appData.globalData.ws.onopen && appData.globalData.ws.onopen()\\n    })\\n  },\\n  // 发送消息\\n  sendMsg: function (msg) {\\n    console.log('sendmsg')\\n    // 如果WebSocket已连接则发送消息\\n    if (appData.globalData.isConnected) {\\n      wx.sendSocketMessage({\\n        data: msg\\n      })\\n    } else {\\n      // WebSocket没有连接将消息放入队列中\\n      appData.globalData.msgQueue.push(msg)\\n    }\\n  },\\n  // 监听WebSocket接受到服务器的消息事件\\n  onMsg: function () {\\n    console.log('onmsg')\\n    wx.onSocketMessage((res) => {\\n      console.log('WebSocket收到消息事件：', res)\\n      appData.globalData.ws.onmessage && appData.globalData.ws.onmessage(res)\\n    })\\n  },\\n  // 监听WebSocket连接错误事件\\n  onError: (res) => {\\n    console.log('onerror')\\n    wx.onSocketError((res) => {\\n      console.log(\\"WebSocket错误事件：\\", res)\\n    })\\n  },\\n  // 关闭WebSocket连接\\n  disConnect: function () {\\n    console.log('disconnect')\\n    wx.closeSocket()\\n  },\\n  // 监听WebSocket连接关闭事件\\n  onClose: function () {\\n    console.log('onclose')\\n    wx.onSocketClose((res) => {\\n      console.log('WebSocket连接关闭：', res)\\n      appData.globalData.ws.onclose && appData.globalData.ws.onclose(res)\\n      appData.globalData.isConnected = false\\n      // 断线重连\\n      if (appData.globalData.isReConnect) {\\n        // 调整重连的次数\\n        if (!appData.globalData.hasOwnProperty('reConnectLimit') || appData.globalData.reConnectLimit === 0) {\\n          appData.globalData.isReConnect = false\\n        } else {\\n          if (appData.globalData.reConnectLimit > 0) {\\n            appData.globalData.reConnectLimit--\\n          }\\n          console.log('剩余重连次数：', appData.globalData.reConnectLimit)\\n          this.connect({\\n            fail(err) {\\n              console.log('重新连接失败：', err)\\n            }\\n          })\\n        }\\n      }\\n    })\\n  }\\n}\\n\\nexport default webScoket\\n\`\`\`\\n\\n### 3、使用\\n#### 3-1、在要使用到的页面引入工具类文件\\n\`\`\`\\nimport webScoket from '../../utils/socket'\\nlet stompClient = ''\\n\`\`\`\\n\\n#### 3-2、在onShow函数中初始化\\n\`\`\`javascript\\nonShow() {\\n    const that = this\\n    Promise.all([webScoket.init(), webScoket.client()]).then(result => {\\n      stompClient = result[1]\\n      stompClient.connect({}, () => {\\n          stompClient.subscribe('订阅地址', response => {\\n            console.log('收到订阅消息')\\n            if (response.body) {\\n              const res = JSON.parse(response.body)\\n    \\n              // 业务逻辑\\n            }\\n          })\\n        })\\n    })\\n}\\n\\nonHide() {\\n    app.globalData.isReConnect = false\\n    stompClient.disconnect()\\n}\\n\\nonUnload() {\\n    app.globalData.isReConnect = false\\n    stompClient.disconnect()\\n}\\n\`\`\`\\n\\n\\n\\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/1/16f61272efd8752a~tplv-t2oaga2asx-image.image)\\n控制台打印成功连接的信息，到这里就完成了","tagIds":"11","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":77,"type":1,"groupTimestamp":"1577826706992","cover":"https://static.turbosquid.com/Preview/2014/07/11__13_44_26/5.jpg3269969f-c6d9-4ffe-9a64-37330f9ceb79DefaultHQ.jpg","categoryId":1,"created_at":"2023-11-22T21:13:16.000Z","updated_at":"2023-11-22T21:41:16.000Z","tagList":[{"id":11,"name":"JavaScript"}],"createDate":"2020-01-01"}`,sn=`{"id":26,"title":"打造vuecli3+element后台管理系统（四）讲讲让本秃头星人头大的动态菜单、页面权限和角色赋权在后台系统中的实现","subTitle":"","link":null,"description":"许多时候咱们的做的后台系统，面向的人群可能是五花八门的，后台系统中展示的数据大部分是公司相关的运营数据，所以呢必须严格控制用户的权限。用户是否有权访问这个菜单、用户访问这个菜单之后，是否有权进行增删改查，这都是身为一个合格滴后台系统所要具备的功能（敲黑板）。","content":"### 一、定义权限接口返回的数据的json结构\\n权限模块可以说是后台系统的重中之重，它可简单，可复杂，具体看产品大大如何定义。\\n\\n平时后台兄弟的接口返回的数据体结构，都是他说了算，他怎么给滴，咱就怎么渲染。但是其实这样是很被动的，为了提高我们的开发效率，我们要把精力更多的放在页面上而不是把精力放在绞尽脑汁想怎么把后台给的数据遍历转化为我想要的结构，数据的二次处理有时正是我们被吐槽开发慢的原因之一呀！（摔杯\\n\\n所以适当的和后台大兄弟沟通一下返回的数据体的结构，能让后台大兄弟处理的，就让他处理，相信我，其实开口沟通没那么难。\\n\\n扯远了，话又说回来，因为权限模块的特殊性，所以这一块返回的结构是怎么样的，我们需要给后台大兄弟提供大致的维度结构。\\n\\n我的项目里是这样去定义这个结构的：\\n> 这里是简化了的结构，保留了核心字段，在这个项目里菜单是二级结构的，一级是菜单大类，children表示底下的二级页面，二级下面就是页面的路由名称和该用户在这个菜单下面拥有的权限，这里定义了增add、删delete、改edit、查check四个\\n\`\`\`json\\n[\\n    {\\n        name: 'Table',\\n        children: [\\n            {\\n                name: 'TableDemo',\\n                auth: {\\n                    add: true,\\n                    check: true,\\n                    delete: true,\\n                    edit: true\\n                }\\n            }\\n        ]\\n    }\\n]\\n\`\`\`\\n\\n### 二、定义需要动态加载的路由，定义mock接口\\n\\n假设现在有一个路由是需要权限才能访问的，我们在router/modules下定义一个table.js文件，这下面的demo页是需要后台返回了相关菜单，用户才能有权访问。\\n\`\`\` javascript\\n// table.js\\nconst table = {\\n  path: 'table',\\n  component: () => import('@/layout'),\\n  redirect: '/table/demo',\\n  name: 'Table',\\n  meta: {\\n    title: 'parentTitle',\\n    icon: 'table'\\n  },\\n  children: [\\n    {\\n      path: '/table/demo',\\n      name: 'TableDemo',\\n      component: resolve => void require(['@/views/table/demo'], resolve),\\n      meta: {\\n        title: 'tableDemo'\\n      }\\n    },\\n    {\\n      path: '/table/demoTest',\\n      name: 'DemoTest',\\n      component: resolve => void require(['@/views/table/demoTest'], resolve),\\n      meta: {\\n        title: 'demoTest'\\n      }\\n    }\\n  ]\\n}\\n\\nexport default table\\n\\n\`\`\`\\n\\nmock接口数据，这里我们只给用户了第一个子菜单，第二个不给看\\n\`\`\` javascript\\n// mock/index.js\\nconst permissionData = () => {\\n  result.data = [\\n    {\\n      name: 'Table',\\n      children: [\\n        {\\n          name: 'TableDemo',\\n          auth: {\\n            add: true,\\n            check: true,\\n            delete: true,\\n            edit: true\\n          }\\n        }\\n      ]\\n    }\\n  ]\\n  return result\\n}\\n\\nMock.mock('/apiReplace/permission', 'post', permissionData)\\n\`\`\`\\n接口数据我们已经mock中定义了，可以着手写如何获取动态路由的逻辑了\\n\\n### 三、定义处理权限相关逻辑的vuex仓库文件。\\n在store/modules目录下新建permission.js，我们需要在vuex中定义路由和权限的逻辑，包括初始化动态路由、重置路由等。\\n\\n\`\`\`javascript\\n// permission.js\\n\\n/** 这些在上一篇路由模块的定义里有讲到，或者是小伙伴可以去项目里头看看router文件，我这里不贴router文件的代码了~~\\n * constantRoutes 常规路由，不需要权限即可访问\\n * asyncRoutes 需要访问权限的路由\\n * notFoundRoutes 404路由\\n * resetRouter 重置路由的方法\\n */\\nimport { asyncRoutes, constantRoutes, notFoundRoutes, resetRouter } from '@/router'\\nimport API from '@/assets/http/apiUrl'\\nimport Request from '@/assets/http'\\n\\nconst permission = {\\n  state: {\\n    routes: [],\\n    addRoutes: [] // 异步加载的路由\\n  },\\n\\n  mutations: {\\n    SET_ROUTES: (state, routes) => {\\n      state.addRoutes = routes\\n      state.routes = constantRoutes.concat(routes)\\n    }\\n  },\\n\\n  actions: {\\n    // 获取动态路由\\n    GenerateRoutes({ commit }, isSuperAdmin) {\\n      resetRouter() // 先初始化路由\\n      return new Promise((resolve, reject) => {\\n        // 如果是超级管理员,挂载全部路由全部权限\\n        if (isSuperAdmin) {\\n          // 重定向404的匹配规则需要在整个完整路由定义的最后面，否则刷新会出错。\\n          const accessedRoutes = [...asyncRoutes, ...notFoundRoutes]\\n          accessedRoutes.forEach(item => {\\n            if (item.children) {\\n              // 超级管理员赋全部权限\\n              item.children.forEach(elem => {\\n                elem.meta = {\\n                  ...elem.meta,\\n                  check: true,\\n                  delete: true,\\n                  add: true,\\n                  edit: true\\n                }\\n              })\\n            }\\n          })\\n          commit('SET_ROUTES', accessedRoutes)\\n          resolve(accessedRoutes)\\n        } else {\\n          Request.httpRequest({\\n            method: 'post',\\n            url: API.GetPermissionData,\\n            noLoading: true,\\n            params: {},\\n            success: (data) => {\\n              console.log(data)\\n              let accessedRoutes = []\\n              // 匹配前端路由和后台返回的菜单\\n              accessedRoutes = filterAsyncRoutes(asyncRoutes, data)\\n              // 重定向404的匹配规则需要在整个完整路由定义的最后面，否则刷新会出错。\\n              accessedRoutes.push(...notFoundRoutes)\\n              commit('SET_ROUTES', accessedRoutes)\\n              resolve(accessedRoutes)\\n            },\\n            error: res => {\\n              reject(res)\\n            }\\n          })\\n        }\\n      })\\n    }\\n  }\\n}\\n\\n/**\\n * Filter asynchronous routing tables by recursion\\n * 匹配后台返回的菜单信息和前端定义的路由\\n * @param routes 前端定义好的异步路由\\n * @param menus 后台返回的菜单\\n */\\nexport function filterAsyncRoutes(routes = [], menus = []) {\\n  const res = []\\n\\n  routes.forEach(route => {\\n    // 复制一遍路由，这样改变tmp的同时路由不会受影响\\n    const tmp = {\\n      ...route\\n    }\\n\\n    // 是否匹配到了\\n    if (hasPermission(menus, tmp)) { // 有符合的匹配项\\n      // 找出那一条匹配成功的路由项\\n      const findMenu = menus.find((menu, index, menus) => {\\n        return menu.name.includes(tmp.name)\\n      })\\n\\n      // 赋权\\n      if (findMenu.hasOwnProperty('auth')) {\\n        tmp.meta = {\\n          ...tmp.meta,\\n          ...findMenu.auth\\n        }\\n      }\\n\\n      // 如果该路由项中含有子路由，子路由也是需要和菜单进行匹配的\\n      if (findMenu.hasOwnProperty('children') && findMenu.children.length) {\\n        // 子路由匹配的步骤和父路由一样\\n        tmp.children = filterAsyncRoutes(tmp.children, findMenu.children)\\n      } else {\\n        // 将匹配不到的子路由从路由中删除\\n        delete tmp.children\\n      }\\n\\n      // 最后得到的结果就是和后台返回菜单匹配一致的异步路由值\\n      res.push(tmp)\\n    }\\n  })\\n\\n  return res\\n}\\n\\n/**\\n * Use meta.role to determine if the current user has permission\\n * @param menus 后台返回的菜单\\n * @param route 前端定义好的异步路由中的项\\n */\\nfunction hasPermission(menus, route) {\\n  // 进行匹配\\n  if (route.name) { // 前提是异步路由要存在name\\n    // 匹配的规则是，name要一致，只要匹配到就返回true，停止继续往下循环\\n    return menus.some(menu => route.name.includes(menu.name))\\n  } else {\\n    return true\\n  }\\n}\\n\\nexport default permission\\n\\n\`\`\`\\n\\n### 四、在项目中生成动态路由\\n一切都准备就绪了，接下来就剩，我们应该在哪里调用生成动态路由的方法呢。我更趋向于，每次切换路由时进行判断，如果当前用户是第一次进入项目，则在路由跳转前，来调用生成动态路由的方法，路由生成之后再往下走。所以我们可以在router.beforeEach的钩子函数中调用生成动态路由的方法。\\n\\n在src目录下新建permission.js，用来定义router.beforeEach中的逻辑\\n\`\`\`javascript\\nimport router from '@/router'\\nimport store from '@/store'\\nimport { Message } from 'element-ui'\\nimport NProgress from 'nprogress' // Progress 进度条\\nimport 'nprogress/nprogress.css'// Progress 进度条样式\\nimport getPageTitle from '@/assets/utils/get-page-title'\\n\\nNProgress.configure({ showSpinner: false }) // NProgress Configuration\\n\\nconst whiteList = ['/login', '/register', '/resetPsw'] // 不重定向白名单\\n\\nrouter.beforeEach(async(to, from, next) => {\\n  NProgress.start()\\n\\n  // set page title\\n  document.title = getPageTitle(to.meta.title)\\n\\n  // 有无token判断\\n  const token = localStorage.getItem('ADMIN_TOKEN')\\n  if (token) {\\n    if (whiteList.includes(to.path)) {\\n      next()\\n      NProgress.done()\\n    } else {\\n      // 判断当前用户是不是进行了刷新操作，防止进入死循环，如果存在就表示正常跳转，如果不存在就表示刷新了，vuex中的状态丢失了，需要重新挂载路由\\n      const hasUser = store.state.user.token\\n      if (hasUser) {\\n        next()\\n      } else {\\n        try {\\n          // 防止进入死循环\\n          await store.commit('SET_TOKEN', token)\\n          // 是不是超级管理员\\n          const isSuperAdmin = store.state.user.roles.some(item => item.id === 1)\\n          const accessRoutes = await store.dispatch('GenerateRoutes', isSuperAdmin)\\n          // 异步加载路由\\n          router.addRoutes(accessRoutes)\\n          router.options.routes = store.state.permission.routes\\n          // 设置replace：true，导航不会留下历史记录\\n          next({ ...to, replace: true })\\n        } catch (error) {\\n          // 移除token，重定向到登录页\\n          await store.dispatch('ResetToken')\\n          Message.error(error || '身份验证出错，请重新登录。')\\n          next(\`/login?redirect=\${to.path}\`)\\n          NProgress.done()\\n        }\\n      }\\n    }\\n  } else {\\n    // 没有token\\n    if (whiteList.indexOf(to.path) !== -1) {\\n      next()\\n    } else {\\n      // next(\`/login?redirect=\${to.path}\`) // 否则全部重定向到登录页\\n      next('/login') // 否则全部重定向到登录页\\n      NProgress.done()\\n    }\\n  }\\n})\\n\\nrouter.afterEach(() => {\\n  NProgress.done() // 结束Progress\\n})\\n\\n\`\`\`\\n\\n然后在入口文件引入，全局注册：\\n\`\`\`javescript\\n// main.js\\nimport '@/permission'\\n\`\`\`\\n\\n然后运行项目，你会发现用户只能访问第一个子菜单了，是不是不难呢。\\n\\n### 五、根据权限来为页面加限制\\n细心的大兄弟会发现我们给每个页面路由的meta下头都定义了增add、删delete、改edit、查check四个权限。我们在页面中通过\`\`\`$route.meta\`\`\`就能获取增删改查的具体权限哦。这里贴一个栗子，我们定义一个表格：\\n\`\`\`html\\n<template>\\n  <div class=\\"table-demo\\">\\n    <el-card class=\\"list-content\\" shadow=\\"hover\\">\\n      <template v-if=\\"$route.meta.check\\">\\n        <el-table\\n          v-loading=\\"tableLoading\\"\\n          :data=\\"tableData\\"\\n          :cell-style=\\"{ whiteSpace: 'nowrap'}\\"\\n          :header-row-style=\\"{ background: '#EBEEF5'}\\"\\n          style=\\"width: 100%\\"\\n          class=\\"table-content\\"\\n        >\\n          <el-table-column\\n            type=\\"index\\"\\n            label=\\"序号\\"\\n            align=\\"center\\"\\n            sortable\\n            width=\\"50\\"\\n          />\\n          <el-table-column\\n            v-for=\\"(item,index) in tableHeader\\"\\n            :key=\\"index\\"\\n            :prop=\\"index\\"\\n            sortable\\n            :label=\\"item\\"\\n            align=\\"center\\"\\n          />\\n          <el-table-column\\n            label=\\"操作\\"\\n            width=\\"230\\"\\n            align=\\"center\\"\\n            class-name=\\"operation\\"\\n          >\\n            <template slot-scope=\\"scope\\">\\n              <a v-if=\\"$route.meta.edit\\" class=\\"item\\" @click=\\"test(scope.row)\\">修改</a>\\n              <a v-if=\\"$route.meta.delete\\" class=\\"item\\" @click=\\"test(scope.row)\\">删除</a>\\n            </template>\\n          </el-table-column>\\n        </el-table>\\n      </template>\\n      <div v-else class=\\"no-data\\">\\n        您暂时没有查看的权限\\n      </div>\\n    </el-card>\\n    <!-- 分页 -->\\n    <el-pagination\\n      v-if=\\"$route.meta.check\\"\\n      :total=\\"total\\"\\n      :pager-count=\\"5\\"\\n      :page-sizes=\\"[10, 20, 30, 50]\\"\\n      :page-size=\\"pageSize\\"\\n      :current-page=\\"currentPage\\"\\n      background\\n      layout=\\"total, sizes, prev, pager, next, jumper\\"\\n      class=\\"pagination\\"\\n      @size-change=\\"handleSizeChange\\"\\n      @current-change=\\"handleCurrentChange\\"\\n    />\\n  </div>\\n</template>\\n\`\`\`\\n我们可以根据\\n\`\`\`js\\n$route.meta.add\\n$route.meta.edit\\n$route.meta.delete\\n$route.meta.check\\n\`\`\`\\n来控制相应入口的显示与否\\n\\n还有很多细节的东西没有详细写出来，我这里贴一下项目地址，有兴趣的可以看一看哦～\\n\\n- [x] [一个基于vuecli3和vue-admin-template改造的响应式后台管理系统](https://github.com/ccccai/vuecli3-ele-admin-template)\\n\\n效果图：\\n\\n\\n![效果图](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/26/16ccbe148faa1d63~tplv-t2oaga2asx-image.image)\\n","tagIds":"4,5,7,10,11,12,37","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":99,"type":1,"groupTimestamp":"1580505764232","cover":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/25/16cc4ae1163d42a3~tplv-t2oaga2asx-jj:216:144:0:0:q75.avis","categoryId":1,"created_at":"2023-11-22T21:23:44.000Z","updated_at":"2023-11-24T05:44:35.000Z","tagList":[{"id":4,"name":"CSS"},{"id":5,"name":"ECMAScript"},{"id":7,"name":"LESS"},{"id":10,"name":"HTML"},{"id":11,"name":"JavaScript"},{"id":12,"name":"ES6"},{"id":37,"name":"Vue"}],"createDate":"2020-02-01"}`,rn=`{"id":27,"title":"打造vuecli3+element后台管理系统（三）优化路由和vuex仓库，给router和store分模块","subTitle":"","link":null,"description":"我们在做后台系统的时候，经常会有比较多的功能页面，每个页面或多或少都会有需要存储在vuex中的数据，一般情况下我们会在state下定义不同的object，但是当功能一多，全部字段和action、mutations都定义在一个文件里，难免会使文件变得很难维护。全部页面的路由都定义在一个路由文件里也会使文件代码变得比较多，后期维护麻烦。所以我们应该将仓库和路由“模块化”，不同功能定义不同的模块文件，最后统一在index文件引入。","content":"### 一、路由分模块\\n#### 1.1 创建router文件夹,存放路由定义文件\\n- 创建modules文件夹，主要存放功能页面路由定义文件\\n- 创建index.js文件，定义路由\\n\\n##### 1.1-1 @/router/index.js\\nrouter/index.js主要功能是：\\n1. 定义常规路由，即那些不需要权限就可访问的页面，比如说登录注册、后台主页、404页面等。\\n2. 引入需要根据权限加载的路由模块\\n3. 定义创建路由、重置路由方法\\n\`\`\` javascript\\n// index.js\\nimport Vue from 'vue'\\nimport Router from 'vue-router'\\n\\nVue.use(Router)\\n// 定义常规路由\\nexport const constantRoutes = [\\n  {\\n    path: '/redirect',\\n    component: () => import('@/layout'),\\n    hidden: true,\\n    children: [\\n      {\\n        path: '/redirect/:path*',\\n        component: resolve => void require(['@/views/redirect/index'], resolve)\\n      }\\n    ]\\n  },\\n  {\\n    path: '/',\\n    redirect: '/login'\\n  },\\n  {\\n    path: '/login',\\n    name: 'Login',\\n    component: resolve => void require(['@/views/login/index'], resolve),\\n    hidden: true\\n  },\\n  {\\n    path: '/register',\\n    name: 'Register',\\n    component: resolve => void require(['@/views/login/register'], resolve),\\n    hidden: true\\n  },\\n  {\\n    path: '/resetPsw',\\n    name: 'ResetPsw',\\n    component: resolve => void require(['@/views/login/resetPsw'], resolve),\\n    hidden: true\\n  },\\n\\n  {\\n    path: '/404',\\n    component: () => import('@/views/404'),\\n    hidden: true\\n  }\\n]\\n\\n/** 权限路由\\n * 是动态的路由、需要根据权限加载的路由\\n */\\nconst modulesFiles = require.context('./modules', true, /\\\\.js$/)\\nconst routesModules = []\\n// 自动引入modules目录下的所有模块\\nmodulesFiles.keys().reduce((modules, modulePath) => {\\n  const value = modulesFiles(modulePath)\\n  routesModules.push(value.default)\\n}, {})\\nexport const asyncRoutes = routesModules\\n\\n/** 404路由\\n * 最终无法匹配到相应路由，重定向到404\\n * 异步加载路由时，在生成完异步路由准备挂载时，需要将重定向404的匹配规则定义在最后面，否则刷新会出错。\\n */\\nexport const notFoundRoutes = [\\n  {\\n    path: '*',\\n    redirect: '/404',\\n    hidden: true,\\n    meta: {\\n      title: '404'\\n    }\\n  }\\n]\\n\\n// 定义实例化路由的方法\\nconst createRouter = () => new Router({\\n  // mode: 'history', // require service support\\n  scrollBehavior: () => ({ y: 0 }),\\n  routes: constantRoutes // 挂载常规路由\\n})\\n// 实例化路由\\nconst router = createRouter()\\n\\n// 定义实重置路由的方法\\nexport function resetRouter() {\\n  const newRouter = createRouter()\\n  router.matcher = newRouter.matcher // reset router\\n}\\n\\nexport default router\\n\`\`\`\\n\\n### 二、vuex仓库分模块\\n和router模块一样，咱也需要给store模块创建一个文件夹，在里头存放定义文件\\n#### 2.1 创建store文件夹,存放vuex定义文件\\n- 创建modules文件夹，主要存放各模块下的仓库定义文件\\n- 创建index.js文件，初始化vuex实例\\n- 使用vuex持久化插件vuex-persistedstate，让你的数据可以实现刷新也不丢失噢~\\n\\n##### 2.1-1 @/store/index.js\\n该文件声明了vuex实例，同时批量引入modules下的store文件，也声明了vuex-persistedstate插件实例。\\n\\n\`\`\`!\\n关于persistedState的初始化，注意vuex中的参数不是全部都要持久化，你可以根据业务逻辑自行定义需要持久化的参数\\n\`\`\`\\n\\n\`\`\` javascript\\nimport Vue from 'vue'\\nimport Vuex from 'vuex'\\nimport getters from './getters'\\nimport createPersistedState from 'vuex-persistedstate'\\n\\nVue.use(Vuex)\\n\\n// （创建了）一个包含了modules文件夹（包含子目录）下面的，所有文件名以 \`.js\` 结尾的、能被 require 请求到的文件的上下文。\\nconst modulesFiles = require.context('./modules', true, /\\\\.js$/)\\n// keys() 方法用于从modules创建一个包含modules里键值的可迭代对象。\\nconst modules = modulesFiles.keys().reduce((modules, modulePath) => {\\n  // 模块名，取文件名\\n  const moduleName = modulePath.replace(/^\\\\.\\\\/(.*)\\\\.\\\\w+$/, '$1')\\n  // 获取键名为modulePath的文件内容\\n  const value = modulesFiles(modulePath)\\n  // 将文件中的默认导出模块 赋值给迭代对象modules\\n  modules[moduleName] = value.default\\n  // 返回迭代对象modules\\n  return modules\\n  // 默认值是空对象{}\\n}, {})\\n\\n// 创建仓库实例\\nconst store = new Vuex.Store({\\n  modules,\\n  getters,\\n  // 使用持久化插件\\n  plugins: [\\n    // 存储vuex状态，使之刷新不丢失\\n    createPersistedState({\\n      // 这里我用的是localStorage，你也可以改成sessionStorage，cookie也行不过我没研究嘻嘻嘻\\n      storage: window.localStorage,\\n      reducer(val) {\\n        return {\\n          // 将要存储的state中的值放在这里\\n          user: {\\n            name: val.user.name\\n          }\\n        }\\n      }\\n    })\\n  ]\\n})\\n\\nexport default store\\n\\n\`\`\`\\n\\n那我们就来看看咋使用，我们可以写个userjs来试试，里头定义登录登出的action，因为登录登出可能不止一个地方会运用到，而且登录登出可能会涉及到state里头好几个状态值的改变，所以我就把登录登出的逻辑写在action里头，这样分发的时候也可以改变状态值：\\n##### 2.1-2 modules目录下新建user.js，用来存放用户信息，定义登陆、登出的action\\n\`\`\` javascript\\nimport API from '@/assets/http/apiUrl'\\nimport Request from '@/assets/http'\\n\\nconst user = {\\n  state: {\\n    token: '',\\n    name: ''\\n  },\\n  mutations: {\\n    SET_TOKEN: (state, data) => {\\n      // 先初步定义token和username这两个值\\n      state.token = data\\n      localStorage.setItem('ADMIN_TOKEN', data)\\n    },\\n    SET_NAME: (state, data) => {\\n      state.name = data\\n    }\\n  },\\n  actions: {\\n    // 登陆\\n    Login({ commit }, params) {\\n      return new Promise((resolve, reject) => {\\n        Request.httpRequest({\\n          method: 'post',\\n          url: API.Login,\\n          params: params,\\n          success: data => {\\n            commit('SET_TOKEN', data.token)\\n            resolve(data)\\n          },\\n          error: err => {\\n            reject(err)\\n          }\\n        })\\n      })\\n    },\\n\\n    // 短信登录，这里为了方便我就直接复用登录的action了，正式项目中肯定要调用另外的接口\\n    LoginByVin({ dispatch, commit }, params) {\\n      return dispatch('Login', params)\\n    },\\n\\n    // 重置token和state值\\n    ResetToken({ commit }) {\\n      return new Promise(resolve => {\\n        commit('SET_TOKEN', '')\\n        commit('SEI_NAME', '')\\n        localStorage.removeItem('ADMIN_TOKEN')\\n        resolve()\\n      })\\n    },\\n\\n    // 登出\\n    LogOut({ dispatch, commit }) {\\n      return dispatch('ResetToken')\\n    }\\n  }\\n}\\n\\nexport default user\\n\\n\`\`\`\\n新建之后不需要在index那里引入哦，因为我们已经写了批量引入的逻辑啦～是不是很方便呢\\n\\n然后就是使用了，关于Login，在登陆页面只需要分发action就行：\\n\`\`\`\\nparams = {\\n    'username': this.loginForm.user,\\n    'password': this.loginForm.password\\n}\\nthis.$store.dispatch('Login', params).then(() => {\\n    this.loading = false\\n    this.$router.push({ path: this.redirect || '/home' })\\n}).catch(() => {\\n    this.loading = false\\n})\\n\`\`\`\\n\\n具体代码逻辑可以下载项目来看一下下\\n- [x] [一个基于vuecli3和vue-admin-template改造的响应式后台管理系统](https://github.com/ccccai/vuecli3-ele-admin-template/tree/withoutAuth)","tagIds":"4,5,7,10,11,12,37","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":99,"type":1,"groupTimestamp":"1580246634809","cover":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/25/16cc4ae1163d42a3~tplv-t2oaga2asx-jj:216:144:0:0:q75.avis","categoryId":1,"created_at":"2023-11-22T21:24:53.000Z","updated_at":"2023-11-24T05:44:56.000Z","tagList":[{"id":4,"name":"CSS"},{"id":5,"name":"ECMAScript"},{"id":7,"name":"LESS"},{"id":10,"name":"HTML"},{"id":11,"name":"JavaScript"},{"id":12,"name":"ES6"},{"id":37,"name":"Vue"}],"createDate":"2020-01-29"}`,on=`{"id":28,"title":"打造vuecli3+element后台管理系统（二）调用接口功能完善，定义axios工具类","subTitle":"一个基于vuecli3和vue-admin-template改造的响应式后台管理系统","link":null,"description":"后台系统少不了登陆、注册、重置密码功能。虽说是三个页面，但是样式风格统一，所以只用写一套样式。这块内容不多，咱来好好梳理，写一写。","content":"[一个基于vuecli3和vue-admin-template改造的响应式后台管理系统](https://github.com/ccccai/vuecli3-ele-admin-template)\\n\\n先上效果图\\n\\n![登陆、注册、重置密码](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/17/16c9dd7205f6143f~tplv-t2oaga2asx-image.image)\\n\\n### 一、使用mockjs\\n运用mock来模拟后台接口能更加便捷高效的进行前端开发，在这里我只是简单的模拟后台接口，返回一些简单的数据，更多功能可以参考[mockjs官网](http://mockjs.com/)，写的很详细的噢～\\n\\n#### 1.1 引入mockjs\\n\`\`\` bash\\nnpm install --save-dev mockjs\\n\`\`\`\\n\\n#### 1.2 在mainjs引入\\n\`\`\` javascript\\nimport '@/assets/mock'\\n\`\`\`\\n\\n#### 1.3 定义mock文件\\n在assets文件夹下创建mock文件夹，并创建index.js\\n\`\`\` javascript\\nimport Mock from 'mockjs'\\n// 获取 mock.Random 对象\\nconst Random = Mock.Random\\n\\n// mock一组数据\\nconst loginData = () => {\\n  const data = {\\n    token: Random.string(10)\\n  }\\n  return {\\n    data: data,\\n    resultCode: 1,\\n    resultMessage: 'success'\\n  }\\n}\\nMock.mock('/apiReplace/login', 'post', loginData)\\nMock.mock('/apiReplace/loginByVin', 'post', loginData)\\n\`\`\`\\n\\n### 二、Api地址的统一定义和处理\\n在assets目录下新建http文件夹，用来存放请求后端接口的一些配置文件。\\n> 后台的接口地址需要一个文件进行统一的定义，然后全局声明之后，可以在项目里任意使用\\n\\n#### 2.1 定义接口url\\n根目录新建http/apiUrl.js，定义接口url\\n\`\`\` javascript\\n/* 全局定义接口url */\\n\\n// 接口前缀\\nconst prefix = '/api/'\\n// host头，字符串apiReplace是代理时本地开发的标记字符串。\\nconst apiHost = process.env.NODE_ENV === 'development' ? \`/apiReplace\${prefix}\` : prefix\\n\\nexport default {\\n// 密码登录\\n    Login: \`\${apiHost}login\`,\\n    // 短信登录\\n    LoginByVin: \`\${apiHost}loginByVin\`\\n}\\n\`\`\`\\n\\n#### 2.2 在mainjs引入\\n\\n\`\`\` javascript\\nimport Api from '@/assets/http/apiUrl'\\nVue.prototype.API = Api\\n\`\`\`\\n这样我们就能在项目里通过this.API.xxx去获取相应的接口url了\\n\\n### 三、axios工具类的封装\\n> 总所周知，使用axios调用后台接口时，每次都需要写这么长串：\\n\\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/17/16c9ff76eaa593a8~tplv-t2oaga2asx-image.image)\\n\\n当业务逻辑复杂的时候，写起来会比较繁琐，后期维护更加不方便，每次都要定位到具体位置去一个个替换修改。所以在axios请求时再封装一层就显得尤为重要。\\n\\n#### 3.1 axios拦截器\\n> 我们经常需要在发起请求之前，修改请求头或者是在接口请求成功之后进行数据的预处理，axios给我们提供了request和response的拦截器，让我们可以在这里头进行一些业务操作。\\n\\n直接执行\`vue add axios\`添加axios插件，执行成功之后会自动生成plugins目录，并在该目录下生成axios.js文件，我们需要在这个基础上修改。\\n\\n修改plugins/axios.js文件\\n\\n- 在文件头引入需要的模块并创建axios实例\\n\`\`\` javascript\\n'use strict'\\n\\nimport Vue from 'vue'\\nimport axios from 'axios'\\nimport { getToken } from '@/assets/utils/token'\\nimport router from '@/router'\\nimport store from '@/store'\\nimport defaultSettings from '@/settings'\\nimport {\\n  Message,\\n  Loading\\n} from 'element-ui'\\nimport Qs from 'qs'\\n\\nconst config = {\\n  baseURL: process.env.NODE_ENV === 'development' ? \`http://localhost:\${defaultSettings.devPort}\` : \`\${defaultSettings.prodHost}\`, // api的base_url\\n  timeout: 60 * 1000 // 请求超时时间\\n  // withCredentials: true, // Check cross-site Access-Control\\n}\\n\`\`\`\\n\\n- request拦截器，设置请求头参数，如用户标识token等\\n\`\`\` javascript\\n// request拦截器\\nservice.interceptors.request.use(\\n  config => {\\n    // 在此处设置请求头参数\\n    const token = getToken()\\n    if (token != null) {\\n      config.headers['Authorization'] = token\\n    }\\n    return config\\n  },\\n  error => {\\n    // Do something with request error\\n    console.log(error) // for debug\\n    return Promise.reject(error)\\n  }\\n)\\n\`\`\`\\n\\n- response 拦截器，请求接口得到相应后，需要进行一些预处理\\n\`\`\` javascript\\nservice.interceptors.response.use(\\n  response => {\\n    return response // 返回请求成功结果，status=200\\n  },\\n  err => {\\n    // 请求失败时，即status!=200\\n    if (err && err.response) {\\n      switch (err.response.status) {\\n        case 400:\\n          err.message = '错误请求'\\n          break\\n        case 401:\\n          err.message = '未授权，请重新登录'\\n          break\\n        case 403:\\n          err.message = '禁止访问'\\n          break\\n        case 404:\\n          err.message = '请求错误,未找到该资源'\\n          break\\n        case 405:\\n          err.message = '请求方法未允许'\\n          break\\n        case 408:\\n          err.message = '请求超时'\\n          break\\n        case 413:\\n          err.message = '上传文件过大'\\n          break\\n        case 500:\\n          err.message = '服务器端出错'\\n          break\\n        case 501:\\n          err.message = '网络未实现'\\n          break\\n        case 502:\\n          err.message = '网络错误'\\n          break\\n        case 503:\\n          err.message = '服务不可用'\\n          break\\n        case 504:\\n          err.message = '网络超时'\\n          break\\n        case 505:\\n          err.message = 'http版本不支持该请求'\\n          break\\n        default:\\n          err.message = \`连接错误,\${err.response.msg}\`\\n      }\\n    } else {\\n      err.message = '当前网络状态不佳'\\n    }\\n    Message.closeAll()\\n    Message({\\n      message: err.message || '数据解析出错',\\n      type: 'error',\\n      customClass: 'errorloginwidth',\\n      duration: '3000'\\n    })\\n    // 如果是token过期的状况，退出登陆重定向到登陆页\\n    if (err.response && err.response.status === 401) {\\n      store.dispatch('FedLogOut') // 前端登出，移除token\\n      router.replace({\\n        path: \`/login?redirect=\${window.location.href.split(/[#]/g)[1]}\`\\n      })\\n    }\\n    return Promise.reject(err)\\n  }\\n)\\n\`\`\`\\n\\n- 导出模块\\n\`\`\` javascript\\nexport default service\\n\`\`\`\\n\\n#### 3.2 axios请求封装\\n##### 3.2-1 引入Qs库来格式化数据\\n\`\`\` bash\\nnpm install --save-dev qs\\n\`\`\`\\n\\n##### 3.2-2 分别处理get和post请求，get和post请求携带参数的方式是不同的，所以要分开定义\\n\\n##### 3.2-3 提供请求成功和失败后的回调函数，以便页面里进行相关逻辑的书写\\n直接贴上我定义的文件：\\n\\n这里我只定义了一个基本的httpRequest方法，后期如果需要定义并发调用、或者其他情景下的方法，都可以自行增加。\\n\\n\`\`\` javascript\\n/* 封装axios请求 */\\n/* 用法示例：(*)为必须参数\\n  this.$request.httpRequest({\\n    headers: false, // 是否格式化参数\\n    (*)method: 'post', // 请求方式，post或get\\n    (*)url: this.API.ResetPassword, // 请求地址，请求地址的配置在@/api/apiUrl.js\\n    noLoading: true, // 是否显示全局Loading遮罩，默认每个请求都显示遮罩，即默认不设置该参数。如果需要某个请求不加遮罩，就设置noLoading: true即可\\n    returnFullData: true, // 是否返回完整数据，例如接口返回的数据格式为{ code:0, data: [], meaasge:''}，则默认请求成功之后的回调函数的参数为data:[]，如果设置returnFullData: true，则回调参数为{ code:0, data: [], meaasge:''}\\n    hideErrorMsg: true, // 是否展示错误提示\\n    (*)params: {}, // 请求参数，object类型\\n    (*)success: (data) => { // 请求成功之后的回调函数，data是回调参数\\n      // 在这里写请求成功后的逻辑\\n    },\\n    error: (err) => { 请求不成功之后的回调函数，data是回调参数\\n      // 在这里写请求报错后的逻辑\\n    }\\n  })\\n*/\\nimport service from './service'\\nimport { Message, Loading } from 'element-ui'\\nimport Qs from 'qs'\\n\\nfunction requestMethods(options) {\\n  return new Promise((resolve, reject) => {\\n    try {\\n      switch (options.method) {\\n        case 'post':\\n          if (options.headers) {\\n            resolve(\\n              service({\\n                url: options.url,\\n                method: 'post',\\n                data: options.params\\n              })\\n            )\\n          } else {\\n            resolve(\\n              service({\\n                url: options.url,\\n                method: 'post',\\n                data: Qs.stringify(options.params)\\n              })\\n            )\\n          }\\n          break\\n        case 'get':\\n          resolve(\\n            service({\\n              url: options.url,\\n              method: 'get',\\n              params: options.params\\n            })\\n          )\\n          break\\n        default: // 默认是get调用\\n          resolve(\\n            service({\\n              url: options.url,\\n              method: 'get',\\n              params: options.params\\n            })\\n          )\\n          break\\n      }\\n    } catch (e) {\\n      Message({\\n        message: 'HTTP请求方法出错！',\\n        type: 'error',\\n        duration: 3 * 1000\\n      })\\n      reject('methods error!')\\n    }\\n  })\\n}\\n\\nfunction httpRequest(options = {}) {\\n  let loading\\n  if (!options.noLoading) {\\n    // 启用全局loading\\n    loading = Loading.service({\\n      lock: true,\\n      text: '加载中...',\\n      spinner: 'el-icon-loading',\\n      background: 'rgba(0, 0, 0, 0.7)'\\n    })\\n  }\\n\\n  requestMethods(options).then(response => {\\n    // 成功返回结果的逻辑。根据接口定义的数据返回格式 修改判断条件\\n    const data = response.data\\n    if (data.resultCode === '1' || data.resultCode === 1) {\\n      // 成功\\n      const result = options.returnFullData ? data : data.data // 返回完整数据结构还是只返回有效数据\\n      options.success(result)\\n    } else {\\n      if (!options.hideErrorMsg) {\\n        // 失败\\n        let errorMsg = data.hasOwnProperty('resultMessage') ? data.resultMessage : '数据解析错误'\\n        switch (data.resultCode) {\\n          case '401':\\n            errorMsg = '暂无操作权限'\\n            break\\n        }\\n        Message.closeAll()\\n        Message({\\n          message: errorMsg,\\n          type: 'error',\\n          customClass: 'errorloginwidth',\\n          duration: 3000\\n        })\\n      }\\n      options.error(data)\\n    }\\n    if (!options.noLoading) {\\n      // loading完毕\\n      loading.close()\\n    }\\n  }).catch(e => {\\n    options.error(e.response)\\n  })\\n}\\nexport default {\\n  httpRequest\\n}\\n\`\`\`\\n\\n#### 3.3 在mainjs引入\\n\\n\`\`\` javascript\\nimport Request from '@/assets/http'\\nVue.prototype.$request = Request\\n\`\`\`\\n\\n这样就可以在项目中通过this.$request去调用接口啦～\\n基础调用很简单，只用酱紫：\\n\\n\`\`\` bash\\n this.$request.httpRequest({\\n    url: this.API.SendSms,\\n    params: {},\\n    success: (data) => {\\n        // 在这里写成功调用接口后的逻辑\\n    }\\n  })\\n\`\`\`\\n\\n那复杂的用法这里贴个例子，完整代码可以去看看项目代码哦，地址我会贴在文章头。\\n\\n比如说这个登陆页面，要获取手机验证码：\\n\\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/18/16ca4645a2e3801a~tplv-t2oaga2asx-image.image)\\n\\n点击发送验证码，开始一分钟倒计时并调用发送短信验证码的接口\\n\\n\`\`\`html\\n<!--html部分-->\\n<el-form-item prop=\\"code\\" class=\\"login-input-item\\">\\n    <span class=\\"svg-container\\">\\n        <svg-icon icon-class=\\"password\\" />\\n    </span>\\n    <el-input\\n        v-model=\\"loginForm.code\\"\\n        autocomplete=\\"off\\"\\n        type=\\"number\\"\\n        name=\\"code\\"\\n        placeholder=\\"验证码\\"\\n        maxlength=\\"4\\"\\n        style=\\"padding-left: 45px\\"\\n        @keyup.enter.native=\\"handleLogin\\"\\n    />\\n    <span\\n        :style=\\"{ cursor: isOvertime ? 'default' : 'pointer'}\\"\\n        class=\\"code\\"\\n        @click=\\"sendMessage\\">\\n            {{ word }}\\n    </span>\\n</el-form-item>\\n\\n// js部分\\nsendMessage() {\\n  if (this.isOvertime) {\\n    return false // 还在倒计时，不往下执行\\n  }\\n  const params = {\\n    'phone': this.loginForm.phoneNumber\\n  }\\n  if (!params.phone) {\\n    this.$message.closeAll()\\n    this.$message.error('请先输入手机号码')\\n    return\\n  }\\n  if (!isvalidPhoneNumber(params.phone)) {\\n    this.$message.closeAll()\\n    this.$message.error('手机号格式不正确')\\n    return\\n  }\\n  this.loading = true\\n  this.$request.httpRequest({\\n    method: 'post',\\n    url: this.API.SendSms,\\n    returnFullData: true,\\n    noLoading: true,\\n    hideErrorMsg: true,\\n    params: params,\\n    success: (data) => {\\n      this.loading = false\\n      this.$message.closeAll()\\n      this.$message.success('验证码发送成功，请留意手机短信')\\n      const sendTimer = setInterval(() => {\\n        this.isOvertime = true\\n        this.word = \`\${this.time}s后重新获取\`\\n        this.time--\\n        if (this.time <= 0) {\\n          this.isOvertime = false\\n          this.time = 60\\n          clearInterval(sendTimer)\\n          this.word = '获取验证码'\\n        }\\n      }, 1000)\\n    },\\n    error: (e) => {\\n      this.loading = false\\n      const errorMsg = e.hasOwnProperty('resultMessage') ? e.resultMessage : '获取验证码失败'\\n      this.$message({\\n        message: errorMsg,\\n        type: 'error',\\n        customClass: 'errorloginwidth',\\n        duration: 3000\\n      })\\n    }\\n  })\\n}\\n\\n\`\`\`\\n\\n","tagIds":"4,5,7,10,11,12,37","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":99,"type":1,"groupTimestamp":"1579728299521","cover":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/25/16cc4ae1163d42a3~tplv-t2oaga2asx-jj:216:144:0:0:q75.avis","categoryId":1,"created_at":"2023-11-22T21:26:13.000Z","updated_at":"2023-11-24T05:45:14.000Z","tagList":[{"id":4,"name":"CSS"},{"id":5,"name":"ECMAScript"},{"id":7,"name":"LESS"},{"id":10,"name":"HTML"},{"id":11,"name":"JavaScript"},{"id":12,"name":"ES6"},{"id":37,"name":"Vue"}],"createDate":"2020-01-23"}`,ln=`{"id":29,"title":"打造vuecli3+element后台管理系统（一）初始化项目","subTitle":"","link":null,"description":"","content":"### 升级vue-cli2到vue-cli3\\n\`\`\` bash\\n# 卸载vue-cli旧版本\\nnpm uninstall vue-cli -g\\n# 安装新版本\\nnpm install -g @vue/cli\\n# 查看版本\\nnpm vue -V\\n\`\`\`\\n\\n### 创建项目\\n\`\`\` bash\\nvue create newproject\\n\`\`\`\\n接下来就是小孩子做选择题了\\n\\n- 选择自主配置\\n![1](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c99e11aa215c13~tplv-t2oaga2asx-image.image)\\n\\n- 选择你要引入的初始化依赖包。咱项目里会用到这几个，按空格选中，再按一下就取消的哈~（这里我用cmd创建项目，没有用git-bash，git-bash在这里不好使，不支持选中:expressionless:。你也可以用vscode的终端来创建。）\\n![2](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c99e1c34a23ee2~tplv-t2oaga2asx-image.image)\\n\\n- 路由要不要使用history模式。no。\\n![3](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c99e47e244b243~tplv-t2oaga2asx-image.image)\\n\\n- 预编译css语法选择哪一个，因为咱用的是elementUI，所以选择sass\\n![4](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c99e8c5fafdb62~tplv-t2oaga2asx-image.image)\\n\\n- 项目代码风格规范，个人习惯问题，我习惯使用ESlint + Prettier\\n![5](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c9a35879aecd63~tplv-t2oaga2asx-image.image)\\n\\n- 保存时自动检测代码是否合乎规范or在提交代码的时候一并格式化代码\\n![6](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c9a3d8084838a3~tplv-t2oaga2asx-image.image)\\n\\n- 配置文件的保存方式，我选择保存在package.json里\\n![7](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c9a3efd840833d~tplv-t2oaga2asx-image.image)\\n\\n- 是不是要保存你上面的所有设置，下次创建项目默认按照这些选择来生成项目。no。\\n![8](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c9a3fecd7b73fd~tplv-t2oaga2asx-image.image)\\n\\n### 目录结构\\n\`\`\`txt\\n.\\n│  .gitignore <!-- git忽略文件配置文件 -->\\n│  babel.config.js <!-- babel配置文件 -->\\n│  package-lock.json <!-- 用以记录当前状态下实际安装的各个npm package的具体来源和版本号 -->\\n│  package.json <!-- 定义了这个项目所需要的各种模块,以及项目的配置信息(比如名称、版本、许可证等元数据) -->\\n│  README.md <!-- 项目介绍文件 -->\\n│  \\n├─node_modules <!-- 项目依赖包 -->\\n├─public <!-- 放不会变动的文件（相当于vue-cli2.x中的static） -->\\n│      favicon.ico <!-- 项目图标 -->\\n│      index.html <!-- 设置项目的一些meta头信息，提供用于挂载 vue 节点。 -->\\n│      \\n└─src <!-- 存放项目源码及需要引用的资源文件。 -->\\n    │  App.vue <!-- 根组件 -->\\n    │  main.js <!-- 入口文件 -->\\n    │  router.js <!-- 路由文件 -->\\n    │  store.js <!-- vuex仓库文件 -->\\n    │  \\n    ├─assets <!-- 静态资源文件，放可能会变动的文件 -->\\n    │      logo.png\\n    │      \\n    ├─components <!-- 公共组件 -->\\n    │      HelloWorld.vue\\n    │      \\n    └─views <!-- 页面 -->\\n            About.vue\\n            Home.vue\\n            \\n\\n\`\`\`\\n\\n### 简单将vue-admin-template整合进项目\\n> 经过以上步骤，恭喜你，你的vuecli3项目已经初步搭建完成~~ 撒花 ~~\\nvue-admin-template里头的很多东西对我来说，是多余的，所以我就选择性的将我用的到的地方整合进项目里，我就不做详细解释了噢，捡整合中有点小困难的地方讲一讲。放上项目git地址，有需要的同学可以clone一下看看整合效果。\\n\\n- [x] [一个基于vuecli3和vue-admin-template改造的响应式后台管理系统](https://github.com/ccccai/vuecli3-ele-admin-template)\\n\\n#### 新建自己的ESlint配置文件\\n> 这个代码风格规范的问题，可以根据自己的习惯或者是公司协作开发的代码规范去修改。删除package.json下的eslintConfig配置信息，在根目录下新建.eslintrc.js文件，自定义代码规范。贴一下我习惯的规范配置：\\n\\n\`\`\` javascript\\nmodule.exports = {\\n  root: true,\\n  parserOptions: {\\n    parser: 'babel-eslint',\\n    sourceType: 'module'\\n  },\\n  env: {\\n    browser: true,\\n    node: true,\\n    es6: true,\\n  },\\n  extends: ['plugin:vue/recommended', 'eslint:recommended'],\\n\\n  // add your custom rules here\\n  //it is base on https://github.com/vuejs/eslint-config-vue\\n  rules: {\\n    \\"vue/max-attributes-per-line\\": [2, {\\n      \\"singleline\\": 10,\\n      \\"multiline\\": {\\n        \\"max\\": 1,\\n        \\"allowFirstLine\\": false\\n      }\\n    }],\\n    \\"vue/singleline-html-element-content-newline\\": \\"off\\",\\n    \\"vue/multiline-html-element-content-newline\\":\\"off\\",\\n    \\"vue/name-property-casing\\": [\\"error\\", \\"PascalCase\\"],\\n    \\"vue/no-v-html\\": \\"off\\",\\n    'accessor-pairs': 2,\\n    'arrow-spacing': [2, {\\n      'before': true,\\n      'after': true\\n    }],\\n    'block-spacing': [2, 'always'],\\n    'brace-style': [2, '1tbs', {\\n      'allowSingleLine': true\\n    }],\\n    'camelcase': [0, {\\n      'properties': 'always'\\n    }],\\n    'comma-dangle': [2, 'never'],\\n    'comma-spacing': [2, {\\n      'before': false,\\n      'after': true\\n    }],\\n    'comma-style': [2, 'last'],\\n    'constructor-super': 2,\\n    'curly': [2, 'multi-line'],\\n    'dot-location': [2, 'property'],\\n    'eol-last': 2,\\n    'eqeqeq': [\\"error\\", \\"always\\", {\\"null\\": \\"ignore\\"}],\\n    'generator-star-spacing': [2, {\\n      'before': true,\\n      'after': true\\n    }],\\n    'handle-callback-err': [2, '^(err|error)$'],\\n    'indent': [2, 2, {\\n      'SwitchCase': 1\\n    }],\\n    'jsx-quotes': [2, 'prefer-single'],\\n    'key-spacing': [2, {\\n      'beforeColon': false,\\n      'afterColon': true\\n    }],\\n    'keyword-spacing': [2, {\\n      'before': true,\\n      'after': true\\n    }],\\n    'new-cap': [2, {\\n      'newIsCap': true,\\n      'capIsNew': false\\n    }],\\n    'new-parens': 2,\\n    'no-array-constructor': 2,\\n    'no-caller': 2,\\n    'no-console': 'off',\\n    'no-class-assign': 2,\\n    'no-cond-assign': 2,\\n    'no-const-assign': 2,\\n    'no-control-regex': 0,\\n    'no-delete-var': 2,\\n    'no-dupe-args': 2,\\n    'no-dupe-class-members': 2,\\n    'no-dupe-keys': 2,\\n    'no-duplicate-case': 2,\\n    'no-empty-character-class': 2,\\n    'no-empty-pattern': 2,\\n    'no-eval': 2,\\n    'no-ex-assign': 2,\\n    'no-extend-native': 2,\\n    'no-extra-bind': 2,\\n    'no-extra-boolean-cast': 2,\\n    'no-extra-parens': [2, 'functions'],\\n    'no-fallthrough': 2,\\n    'no-floating-decimal': 2,\\n    'no-func-assign': 2,\\n    'no-implied-eval': 2,\\n    'no-inner-declarations': [2, 'functions'],\\n    'no-invalid-regexp': 2,\\n    'no-irregular-whitespace': 2,\\n    'no-iterator': 2,\\n    'no-label-var': 2,\\n    'no-labels': [2, {\\n      'allowLoop': false,\\n      'allowSwitch': false\\n    }],\\n    'no-lone-blocks': 2,\\n    'no-mixed-spaces-and-tabs': 2,\\n    'no-multi-spaces': 2,\\n    'no-multi-str': 2,\\n    'no-multiple-empty-lines': [2, {\\n      'max': 1\\n    }],\\n    'no-native-reassign': 2,\\n    'no-negated-in-lhs': 2,\\n    'no-new-object': 2,\\n    'no-new-require': 2,\\n    'no-new-symbol': 2,\\n    'no-new-wrappers': 2,\\n    'no-obj-calls': 2,\\n    'no-octal': 2,\\n    'no-octal-escape': 2,\\n    'no-path-concat': 2,\\n    'no-proto': 2,\\n    'no-redeclare': 2,\\n    'no-regex-spaces': 2,\\n    'no-return-assign': [2, 'except-parens'],\\n    'no-self-assign': 2,\\n    'no-self-compare': 2,\\n    'no-sequences': 2,\\n    'no-shadow-restricted-names': 2,\\n    'no-spaced-func': 2,\\n    'no-sparse-arrays': 2,\\n    'no-this-before-super': 2,\\n    'no-throw-literal': 2,\\n    'no-trailing-spaces': 2,\\n    'no-undef': 2,\\n    'no-undef-init': 2,\\n    'no-unexpected-multiline': 2,\\n    'no-unmodified-loop-condition': 2,\\n    'no-unneeded-ternary': [2, {\\n      'defaultAssignment': false\\n    }],\\n    'no-unreachable': 2,\\n    'no-unsafe-finally': 2,\\n    'no-unused-vars': [2, {\\n      'vars': 'all',\\n      'args': 'none'\\n    }],\\n    'no-useless-call': 2,\\n    'no-useless-computed-key': 2,\\n    'no-useless-constructor': 2,\\n    'no-useless-escape': 0,\\n    'no-whitespace-before-property': 2,\\n    'no-with': 2,\\n    'one-var': [2, {\\n      'initialized': 'never'\\n    }],\\n    'operator-linebreak': [2, 'after', {\\n      'overrides': {\\n        '?': 'before',\\n        ':': 'before'\\n      }\\n    }],\\n    'padded-blocks': [2, 'never'],\\n    'quotes': [2, 'single', {\\n      'avoidEscape': true,\\n      'allowTemplateLiterals': true\\n    }],\\n    'semi': [2, 'never'],\\n    'semi-spacing': [2, {\\n      'before': false,\\n      'after': true\\n    }],\\n    'space-before-blocks': [2, 'always'],\\n    'space-before-function-paren': [2, 'never'],\\n    'space-in-parens': [2, 'never'],\\n    'space-infix-ops': 2,\\n    'space-unary-ops': [2, {\\n      'words': true,\\n      'nonwords': false\\n    }],\\n    'spaced-comment': [2, 'always', {\\n      'markers': ['global', 'globals', 'eslint', 'eslint-disable', '*package', '!', ',']\\n    }],\\n    'template-curly-spacing': [2, 'never'],\\n    'use-isnan': 2,\\n    'valid-typeof': 2,\\n    'wrap-iife': [2, 'any'],\\n    'yield-star-spacing': [2, 'both'],\\n    'yoda': [2, 'never'],\\n    'prefer-const': 2,\\n    'no-debugger': process.env.NODE_ENV === 'production' ? 2 : 0,\\n    'object-curly-spacing': [2, 'always', {\\n      objectsInObjects: false\\n    }],\\n    'array-bracket-spacing': [2, 'never']\\n  }\\n}\\n\`\`\`\\n\\n#### 在项目中使用svg\\n\\n##### 将icons文件夹引入项目：\\n![icons](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/17/16c9d6afd72ec00b~tplv-t2oaga2asx-image.image)\\n\\n##### 引入svg组件\\n![svg组件](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/17/16c9d72d24c794d2~tplv-t2oaga2asx-image.image)\\n\\n##### 在配置文件配置一些东西，让项目可以使用svg。\\n在根目录下新建vue.config.js：\\n\\n\`\`\` javascript\\nconst path = require('path')\\n\\nfunction resolve(dir) {\\n  return path.join(__dirname, dir)\\n}\\n\\nmodule.exports = {\\n  assetsDir: 'assets', // 静态资源文件夹\\n  devServer: {\\n    port: 9533 // 端口号\\n  },\\n  chainWebpack: config => {\\n    config.module\\n      .rule('svg')\\n      .exclude.add(resolve('src/icons'))\\n      .end()\\n\\n    config.module\\n      .rule('icons')\\n      .test(/\\\\.svg$/)\\n      .include.add(resolve('src/icons'))\\n      .end()\\n      .use('svg-sprite-loader')\\n      .loader('svg-sprite-loader')\\n      .options({\\n        symbolId: 'icon-[name]'\\n      })\\n  }\\n}\\n\`\`\`\\n\\n#### 按照自己的需要选择性的将vue-admin-template中的东西copy到项目中\\n\\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/17/16c9d7b5a33aa384~tplv-t2oaga2asx-image.image)\\n\\n##### 在入口文件引入各个依赖\\n\`\`\` javascript\\n// main.js\\nimport Vue from 'vue'\\nimport App from './App.vue'\\nimport router from './router'\\nimport store from './store'\\nimport ElementUI from 'element-ui'\\nimport locale from 'element-ui/lib/locale/lang/zh-CN' // lang i18n\\nimport 'element-ui/lib/theme-chalk/index.css'\\nimport 'normalize.css/normalize.css' // A modern alternative to CSS resets\\nimport '@/styles/index.scss' // global css\\nimport 'element-ui/lib/theme-chalk/index.css'\\nimport '@/icons' // icon\\n\\nVue.config.productionTip = false\\nVue.use(ElementUI, {\\n  locale\\n})\\n\\nnew Vue({\\n  router,\\n  store,\\n  render: h => h(App)\\n}).$mount('#app')\\n\`\`\`","tagIds":"4,5,7,10,11,12,37","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":99,"type":1,"groupTimestamp":"1579037244440","cover":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/25/16cc4ae1163d42a3~tplv-t2oaga2asx-jj:216:144:0:0:q75.avis","categoryId":1,"created_at":"2023-11-22T21:28:16.000Z","updated_at":"2023-11-24T05:45:36.000Z","tagList":[{"id":4,"name":"CSS"},{"id":5,"name":"ECMAScript"},{"id":7,"name":"LESS"},{"id":10,"name":"HTML"},{"id":11,"name":"JavaScript"},{"id":12,"name":"ES6"},{"id":37,"name":"Vue"}],"createDate":"2020-01-15"}`,cn='{"id":10,"title":"JavaScript中数组的常用方法","subTitle":"包含es6中的数组方法","link":null,"description":"记录在开发中经常会遇到、用到的处理数组的方法","content":"## 1.concat()，不改变原数组\\n\\n**`arr1.concat(arr2)`连接两个或多个数组，返回一个新的数组**\\n\\n``` javascript\\nconst arr1 = [1, 2, 3]\\nconst arr2 = [4, 5]\\nconst newArr = arr1.concat(arr2)\\nconsole.log(newArr) // [1, 2, 3, 4, 5]\\n```\\n\\n## 2.join()，不改变原数组\\n\\n* **join(str) 数组转字符串，方法只接受一个参数，默认为逗号分隔符**\\n\\n``` javascript\\nconat arr = [1, 2, 3]\\nconsole.log(arr) // [1, 2, 3]\\nconsole.log(arr.join()) // 1,2,3\\nconsole.log(arr.join(:)) // 1:2:3\\n```\\n\\n应用：join() 实现重复字符串：\\n\\n``` javascript\\nconst str = new Array(4).join(\'啦\')\\nconsole.log(str) // 啦啦啦\\n```\\n\\n## 3.push() & unshift() 添加元素操作，改变原数组\\n\\n* **push() 向数组的末尾添加一个或多个元素，并返回新的长度**\\n\\n``` javascript\\nconst arr = [1, 2]\\nconsole.log(arr.push(3)) // 3\\nconsole.log(arr) // [1, 2, 3]\\n```\\n\\n* **unshift() 向数组的开头添加一个或多个元素，并返回新的长度**\\n\\n``` javascript\\nconst arr = [1, 2]\\nconsole.log(arr.unshift(3)) // 3\\nconsole.log(arr) // [3, 1, 2]\\n```\\n\\n## 4.shift() & pop() 删除元素操作，改变原数组\\n\\n* **shift() 删除并返回数组第一个元素**\\n\\n``` javascript\\nconst arr = [1, 2, 3]\\nconst deleteItem = arr.shift()\\nconsole.log(arr) // [2, 3]\\nconsole.log(deleteItem) // 1\\n```\\n\\n* **pop() 删除并返回数组最后一个元素**\\n\\n``` javascript\\nconst arr = [1, 2, 3]\\nconst deleteItem = arr.pop()\\nconsole.log(arr) // [1, 2]\\nconsole.log(deleteItem) // 3\\n```\\n\\n## 5.sort() 数组排序，改变原数组\\n\\n* **sort() 对数组的元素进行排序**\\n\\n``` javascript\\nconst arr = [2, 4, 3, 1]\\nconsole.log(arr.sort()) // [1, 2, 3, 4]\\nconsole.log(arr) // [1, 2, 3, 4]\\n```\\n\\n应用: sort() 不按照数组元素数值的大小对数字进行排序，是按照字符编码的顺序进行排序，那怎么样根据元素数值大小进行排序的呢\\n\\n``` javascript\\nconst arr = [2, 4, 3, 1]\\nconst arr1 = [...arr].sort((a, b) => a - b)\\nconst arr2 = [...arr].sort((a, b) => b - a)\\nconsole.log(arr1) // [1, 2, 3, 4]\\nconsole.log(arr2) // [4, 3, 2, 1]\\n```\\n\\n## 6.reverse() 反转数组，改变原数组\\n\\n* **reverse() 颠倒数组中元素的顺序**\\n\\n``` javascript\\nconst arr = [2, 4, 3, 1]\\nconsole.log(arr.reverse()) // [1, 3, 4, 2]\\nconsole.log(arr) // [1, 3, 4, 2]\\n```\\n\\n## 7.slice() 截取数组，不改变原数组\\n\\n* **`arr.slice(start, end)`从start处开始选取（不包括该元素），从end处结束选取，如果为空的话，那么选取从start到数组结束的所有元素。负数代表方向，从数组尾部开始计算位置**\\n\\n``` javascript\\nconst arr = [1, 2, 3, 4, 6]\\nconsole.log(arr.slice(1)) // [2, 3, 4, 6]\\nconsole.log(arr.slice(1, -2)) // [2, 3]\\nconsole.log(arr.slice(-3, 1)) // [2]\\nconsole.log(arr) // [1, 2, 3, 4, 6]\\n```\\n\\n## 8.splice() 更新数组，改变原数组\\n\\n* **`arr.splice(index, howmany, item1, ..., itemX)`向/从数组中添加/删除项目，然后返回被删除的项目，返回含有被删除的元素的数组，若没有删除元素则返回一个空数组。**\\n\\n1.  [index] 必传项，整数，规定添加/删除项目的位置，负数表示从数组结尾处规定位置\\n2.  [howmany] 必传项，要删除的项目数量。如果设置为 0，则不会删除项目\\n3.  [item1, ..., itemX] 可选。向数组添加的新项目。\\n\\n``` javascript\\nconst arr = [1, 2, 3]\\nconst arr1 = arr.splice(2, 1)\\nconsole.log(arr1) // [3]\\nconsole.log(arr) // [1, 2]\\n\\nconst arr2 = arr.splice(1, 0, \'ss\')\\nconsole.log(arr2) // [\'ss\']\\nconsole.log(arr) // [1,\'ss\', 2]\\n```\\n\\n## 9. indexOf() & lastIndexOf()  索引方法，不改变原数组\\n\\n**两个方法都是返回要查找的项所在数组中首次出现的位置，没找到的话就返回-1。**\\n\\n* **`arr.indexOf(item, start)`从数组的开头开始向后寻找。**\\n\\n* **`arr.lastIndexOf(item, start)`从数组的末尾开始向前查找。**\\n\\n1. [item] 必须项，查找的元素\\n2. [start] 可选，在数组中开始检索的位置，默认0\\n\\n``` javascript\\nconst arr = [2, 4, 1, 9, 1, 2]\\nconsole.log(arr.indexOf(2)) // 0\\nconsole.log(arr.lastIndexOf(1)) // 1\\nconsole.log(arr.indexOf(3)) // -1\\n```\\n\\n## 10.find() & findIndex() 根据函数内的判断返回找到的数组内的第一个元素，不改变原数组（es6新增）\\n\\n* **`arr.find((currentValue, index, arr) => {})`返回通过测试函数内判断的数组的第一个元素的值。当数组中的元素在测试函数中返回true时，返回符合条件的元素，之后不再调用测试函数判断剩下的元素，如果每个元素都执行了测试函数，没有符合的元素，则返回undefined。**\\n\\n``` javascript\\nconst arr = [1, 2, 3, 4]\\nconst findItem = arr.find((item, index) => {\\n    return item > 2\\n})\\nconst findItem1 = arr.find((item, index) => {\\n    return item > 5\\n})\\nconsole.log(findItem) // 3\\nconsole.log(findItem1) // undefined\\n```\\n\\n\\n* **`findIndex((currentValue, index, arr) => {})`用法和find()一样，不同的是不是返回数组内元素，而是返回符合测试函数判断的元素索引值，如果没有符合条件的元素返回 -1。**\\n\\n``` javascript\\nconst arr = [1, 2, 3, 4]\\nconst findItemIndex = arr.findIndex((item, index) => {\\n    return item > 2\\n})\\nconst findItemIndex1 = arr.findIndex((item, index) => {\\n    return item > 5\\n})\\nconsole.log(findItemIndex) // 2\\nconsole.log(findItemIndex1) // -1\\n```\\n\\n**对于空数组不执行**\\n1. [currentValue] 必须项，当前元素\\n2. [index] 可选。当前元素的索引值\\n3. [arr] 可选。当前元素所属的数组对象\\n\\n## 11.forEach()、map()、filter()、some()、every() 迭代方法，不改变原数组\\n\\n* **`arr.forEach((currentValue , index , arr) => {},  thisValue)` 对数组进行遍历循环，这个方法没有返回值。**\\n\\n**对于空数组不执行**\\n1. [currentValue] 必须项，当前元素\\n2. [index] 可选。当前元素的索引值\\n3. [arr] 可选。当前元素所属的数组对象\\n4. [thisValue] 可选。传递给函数的值一般用`\\"this\\"`值。如果这个参数为空，`\\"undefined\\"`会传递给`\\"this\\"`值。\\n\\n``` javascript\\nconst arr = [1,4,7,10];\\narr.forEach((currentValue, index, arr) => {\\n\\tconsole.log(index + \\"--\\" + currentValue + \\"--\\" + (arr === Arr))\\t\\n})\\n// 输出：\\n// 0--1--true\\n// 1--4--true\\n// 2--7--true\\n// 3--10--true\\t\\n```\\n\\n* **`arr.map((currentValue , index , arr) => {},  thisValue)` 指“映射”，方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。（不会改变数组长度，和原数组长度保持一致）**\\n\\n``` javascript\\nconst arr = [1, 2, 3]\\nconst arr1 = arr.map((currentValue) => {\\n\\treturn currentValue + 1\\n})\\nconsole.log(arr) // [1, 2, 3]\\nconsole.log(arr1) // [2, 3, 4]\\n```\\n\\n* **`arr.filter((currentValue , index , arr) => {},  thisValue)` “过滤”功能，方法创建一个新数组，其包含通过所提供函数实现的测试的所有元素。（可以改变数组长度，不必和原数组长度保持一致）**\\n\\n``` javascript\\nconst arr = [1, 2, 3]\\nconst arr1 = arr.filter((currentValue) => {\\n\\treturn currentValue > 1\\n})\\nconst arr2 = arr.filter((currentValue) => {\\n\\treturn currentValue > \'1\'\\n})\\nconsole.log(arr) // [1, 2, 3]\\nconsole.log(arr1) // [2, 3]\\nconsole.log(arr2) // [2, 3]\\n```\\n\\narr1和arr2结果一致，可以看出函数支持弱等于，不是必须全等于\\n\\n* **`arr.some((currentValue , index , arr) => {},  thisValue)` 判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true，不再往下执行。**\\n\\n``` javascript\\nconst arr = [1, 2, 3]\\nconst str = arr.some((currentValue) => {\\n\\tconsole.log(currentValue)\\n\\treturn currentValue > 1\\n})\\n// 1\\n// 2\\nconsole.log(str) // true\\n```\\n\\n* **`arr.every((currentValue , index , arr) => {},  thisValue)` 判断数组中的每一项是否都满足条件，全部符合就会返回true，否则false。**\\n\\n``` javascript\\nconst arr = [1, 2, 3]\\nconst str = arr.every((currentValue) => {\\n\\treturn currentValue > 1\\n})\\nconsole.log(str) // false\\n```\\n\\n## 12.reduce()、reduceRight() 归并方法，不改变原数组\\n\\n这两个方法都会迭代数组中的所有项，然后生成一个最终返回值。他们都接收两个参数，第一个参数是每一项调用的函数，函数接受四个参数分别是初始值，当前值，索引值，和当前数组，函数需要返回一个值，这个值会在下一次迭代中作为初始值。第二个参数是迭代初始值，参数可选，如果缺省，初始值为数组第一项，从数组第一个项开始叠加，缺省参数要比正常传值少一次运算。\\n\\n1. [total] 必须项，初始值, 或者计算结束后的返回值。\\n2. [cur] 必须项，当前元素。\\n3. [index] 可选。当前元素的索引值\\n4. [arr] 可选。当前元素所属的数组对象\\n5. [initialValue] 可选。传递给函数的初始值。\\n\\n* **`arr.reduce((total , cur , index , arr) => {}, initialValue)` 从数组的第一项开始，逐个遍历到最后**\\n\\n* **`arr.reduceRight((total , cur , index , arr) => {}, initialValue)` 从数组的最后一项开始，向前遍历到第一项**\\n\\n``` javascript\\nconst arr = [1,2,3,4,5]\\nconst result1 = arr.reduce((total,cur,index,arr) => {\\t\\n\\tconsole.log(\\"total:\\" + total + \\",cur:\\" + cur + \\",index:\\" + index)\\n    return total + cur\\n})\\nconsole.log(\\"结果：\\" + result1)\\n// 输出\\n// total:1,cur:2,index:1\\n// total:3,cur:3,index:2\\n// total:6,cur:4,index:3\\n// total:10,cur:5,index:4\\n// 结果：15\\n\\n\\nconst result2 = arr.reduce((total,cur,index,arr) => {\\t\\n\\tconsole.log(\\"total:\\" + total + \\",cur:\\" + cur + \\",index:\\" + index)\\n    return total + cur\\n},10)\\nconsole.log(\\"结果：\\" + result2)\\n// 输出\\n// total:10,cur:1,index:0\\n// total:11,cur:2,index:1\\n// total:13,cur:3,index:2\\n// total:16,cur:4,index:3\\n// total:20,cur:5,index:4\\n// 结果：25\\n```\\n\\n从上面代码我们可以看出，当我们不给函数传递迭代初始值时初始值 total 为数组第一项，函数从数组第二项开始迭代；若我们给函数传递迭代初始值，则函数从数组第一项开始迭代。\\n\\n## 13.keys()、values()、entries() 遍历数组方法,不改变原数组（es6新增）\\n\\n* **keys() 对键名的遍历**\\n\\n``` javascript\\nconst arr = [\\"a\\",\\"b\\",\\"c\\",\\"d\\"]\\nfor(let i of arr.keys()){\\n\\tconsole.log(i)\\n}\\n//打印：\\n// 0\\n// 1\\n// 2\\n// 3\\n\\n```\\n\\n* **values()对键值的遍历**\\n\\n``` javascript\\nconst arr = [\\"a\\",\\"b\\",\\"c\\",\\"d\\"]\\nfor(let i of arr.values()){\\n\\tconsole.log(i)\\n}\\n//打印：\\n// a\\n// b\\n// c\\n// d\\n\\n\\n```\\n\\n* **entries()是对键值对的遍历。**\\n\\n``` javascript\\nconst arr = [\\"a\\",\\"b\\",\\"c\\",\\"d\\"]\\nfor(let i of arr.entries()){\\n\\tconsole.log(i)\\n}\\n//打印：\\n// [0, \\"a\\"]\\n// [1, \\"b\\"]\\n// [2, \\"c\\"]\\n// [3, \\"d\\"]\\nfor(let [idx,item] of arr.entries()){\\n    console.log(idx + \\":\\"+item)\\n}\\n//打印：\\n// 0:a\\n// 1:b\\n// 2:c\\n// 3:d\\n\\n```\\n\\n## 14.includes() 不改变原数组（es6新增）\\n\\n* **`arr.includes(searchElement ,  fromIndex)` 用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false。**\\n\\n1. [searchElement] 可选。需要查找的元素值。\\n2. [fromIndex] 可选。从该索引处开始查找 searchElement。如果为负值，则按升序从`array.length + fromIndex`的索引开始搜索。默认为 0。\\n\\n``` javascript\\nconst arr = [\\"a\\",\\"b\\",\\"c\\",\\"d\\"]\\nconst result1 = arr.includes(\\"b\\")\\nconst result2 = arr.includes(\\"b\\",2)\\nconst result3 = arr.includes(\\"b\\",-1)\\nconst result4 = arr.includes(\\"b\\",-3)\\nconsole.log(result1)  // true\\nconsole.log(result2)  // false\\nconsole.log(result3)  // flase\\nconsole.log(result4)  // true\\n```\\n\\n## 15.Array.from()（es6新增）\\n\\n* **Array.from() 用于类似数组的对象（即有length属性的对象）和可遍历对象转为真正的数组。**\\n\\n``` javascript\\nconst json ={\\n    \'0\':\'喜\',\\n    \'1\':\'欢\',\\n    \'2\':\'你\',\\n    length:3\\n}\\nconst arr = Array.from(json)\\nconsole.log(arr) // [\\"喜\\", \\"欢\\", \\"你\\"]\\t\\n\\n```\\n\\n## 16.Array.of()（es6新增）\\n\\n* **Array.of() 将一组值转变为数组，参数不分类型，只分数量，数量为0返回空数组。**\\n\\n``` javascript\\nlet arr1 = Array.of(1,2,3)\\nlet arr2 = Array.of([1,2,3])\\nlet arr3 = Array.of(undefined)\\nlet arr4 = Array.of()\\nconsole.log(arr1) // [1, 2, 3]\\nconsole.log(arr2) // [[1, 2, 3]]\\nconsole.log(arr3) // [undefined]\\nconsole.log(arr4) // []\\n\\n```\\n\\n## 17.fill() 改变原数组（es6新增）\\n\\n**`arr.fill(value,  start,  end)` 用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。**\\n\\n1. [value] 必需。填充的值。\\n2. [start] 可选。开始填充位置。如果这个参数是负数，那么它规定的是从数组尾部开始算起。\\n3. [end] 可选。停止填充位置 (默认为`array.length`)。如果这个参数是负数，那么它规定的是从数组尾部开始算起。\\n\\n``` javascript\\nlet arr = [1,2,3,4,5,6]\\narr.fill(0)  // [0, 0, 0, 0, 0, 0]\\narr.fill(0,1)  // [1, 0, 0, 0, 0, 0] \\narr.fill(0,1,2)  // [1, 0, 3, 4, 5, 6]\\narr.fill(0,-1)  // [1, 2, 3, 4, 5, 0]\\narr.fill(0,1,-1)  // [1, 0, 0, 0, 0, 6]\\n\\n```\\n\\n## 18.copyWithin() 不改变原数组（es6新增）\\n\\n* **`arr.copyWithin(target,  start,  end)` 用于从数组的指定位置拷贝元素到数组的另一个指定位置中，会覆盖原有成员。**\\n\\n1. [target] 必需。从该位置开始替换数据。\\n2. [start] 可选。从该位置开始读取数据，默认为 0 。如果为负值，表示倒数。\\n3. [end] 可选。到该位置前停止读取数据 (默认为`array.length`)。如果为负值，表示倒数。\\n\\n``` javascript\\nlet arr = [1,2,3,4,5,6]\\nlet result1 = [1,2,3,4,5,6].copyWithin(0)\\nlet result2 = [1,2,3,4,5,6].copyWithin(0,1)\\nlet result3 = [1,2,3,4,5,6].copyWithin(1,3,5)\\nlet result4 = [1,2,3,4,5,6].copyWithin(1,2,-1)\\nlet result5 = [1,2,3,4,5,6].copyWithin(1,-4,6)\\nconsole.log(result1)  // [1, 2, 3, 4, 5, 6]\\nconsole.log(result2)  // [2, 3, 4, 5, 6, 6]\\nconsole.log(result3)  // [1, 4, 5, 4, 5, 6]\\nconsole.log(result4)  // [1, 3, 4, 5, 5, 6]\\nconsole.log(result5)  // [1, 3, 4, 5, 6, 6]\\n\\n```","tagIds":"5,12,11","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":1,"type":1,"groupTimestamp":"1549548067227","cover":"https://boolie.org/wp-content/uploads/2018/07/es6_tutorial_teaser-1.png","categoryId":1,"created_at":"2023-11-06T14:06:54.000Z","updated_at":"2023-11-10T14:48:27.000Z","tagList":[{"id":5,"name":"ECMAScript"},{"id":11,"name":"JavaScript"},{"id":12,"name":"ES6"}],"createDate":"2019-02-07"}',pn='{"id":13,"title":"在laravel中使用redis队列，发送邮件","subTitle":"php是这个世界上最好的语言！[doge]","link":null,"description":"在开发过程中遇到了需要使用队列发送邮件的需求，故记录一小下","content":"## 一、驱动的选择\\n\\n### 1、使用数据库驱动\\n\\n优点：不用安装其他的啦里啦杂的东西，直接用\\n\\n缺点：要进行数据库迁移，产生工作数据表\\n\\n#### 1-1 .env文件中设置队列驱动为数据库\\n\\n``` bash\\nphp artisan queue:table\\n```\\n\\n\\n#### 1-2 创建队列用到的数据表\\n\\n``` bash\\nphp artisan queue:table\\n```\\n\\n\\n#### 1-3 执行migrate\\n\\n``` bash\\n# 会新建 database/migrations/{timestamp}_create_jobs_table.php 文件\\nphp artisan migrate\\n```\\n\\n\\n#### 1-4 .env文件示例\\n\\n``` bash\\nBROADCAST_DRIVER=log\\nCACHE_DRIVER=file\\nSESSION_DRIVER=file\\nQUEUE_DRIVER=database\\n\\nREDIS_HOST=127.0.0.1\\nREDIS_PASSWORD=null\\nREDIS_PORT=6379\\n\\nMAIL_DRIVER=smtp\\nMAIL_HOST=smtp.exmail.qq.com // QQ企业邮箱\\nMAIL_PORT=25 // 使用25端口\\nMAIL_USERNAME=xxxx@xxx.com // 发件人邮箱\\nMAIL_PASSWORD=*** // 密码或授权码\\nMAIL_ENCRYPTION=tls\\n```\\n\\n### 2、使用redis驱动\\n\\n#### 2-1 安装redis\\n\\n* windows下\\n\\n[windows下载地址](https://github.com/MSOpenTech/redis/releases)，下载运行安装即可。\\n\\n![64bit-redis](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/15/16c944bdcd4cd4d2~tplv-t2oaga2asx-image.image)\\n\\n打开一个cmd窗口使用cd命令切换目录到```C:\\\\redis```运行```redis-server.exe redis.windows.conf```\\n\\n* Linux下\\n\\n``` bash\\n# 看看有木有密码\\n/etc/redis.conf port6379\\n```\\n\\n#### 2-1 项目中使用  Composer 安装依赖\\n\\n``` bash\\ncomposer require \\"predis/predis:~1.0\\" \\n```\\n\\n#### 2-3 .env文件示例\\n\\n``` bash\\nDB_CONNECTION=mysql\\nDB_HOST=localhost\\nDB_PORT=3306\\nDB_DATABASE=honeybot\\nDB_USERNAME=root\\nDB_PASSWORD=root\\n\\nBROADCAST_DRIVER=log\\nCACHE_DRIVER=file\\nSESSION_DRIVER=file\\nQUEUE_DRIVER=redis\\n\\nREDIS_HOST=127.0.0.1\\nREDIS_PASSWORD=null\\nREDIS_PORT=6379\\n\\nMAIL_DRIVER=smtp\\nMAIL_HOST=smtp.exmail.qq.com\\nMAIL_PORT=465 // 使用465端口\\nMAIL_USERNAME=xxx@xxx.com\\nMAIL_PASSWORD=***\\nMAIL_ENCRYPTION=ssl // 使用465端口\\n```\\n\\n\\n## 二、失败任务记录（可有可无，看你自己想不想记录）\\n\\n有时候队列中的任务会失败。Laravel 内置了一个方便的方式来指定任务重试的最大次数。当任务超出这个重试次数后，它就会被插入到 failed_jobs 数据表里面。我们可以使用```queue:failed-table```命令来创建 failed_jobs 表的迁移文件\\n\\n``` bash\\n# 会新建 database/migrations/{timestamp}_create_failed_jobs_table.php 文件\\n php artisan queue:failed-table\\n ```\\n \\n 接着使用 migrate Artisan 命令生成 failed_jobs 表：\\n ``` bash\\n php artisan migrate\\n ```\\n \\n## 三、创建任务\\n\\n创建任务 = 搞一个生产者 = （其实就是写一个在队列中你想执行的业务逻辑）,名字随意取，但最好遵守命名规范。\\n \\n这个生成的文件大概分2部分：一是__construct() 构造方法 ；二是handle 队列执行方法(意思就是在队列执行的时候，就用你这里面写的代码)\\n \\n### 1、使用以下 Artisan 命令来生成一个新的队列任务：\\n\\n ``` bash\\n # 该命令会在 app/Jobs 目录下生成一个新的类\\n php artisan make:job SendReminderEmail\\n ```\\n\\n新生成的类：pp/Jobs/SendReminderEmail.php\\n\\n``` php\\nnamespace App\\\\Jobs;\\n\\nuse Illuminate\\\\Bus\\\\Queueable;\\nuse Illuminate\\\\Queue\\\\SerializesModels;\\nuse Illuminate\\\\Queue\\\\InteractsWithQueue;\\nuse Illuminate\\\\Contracts\\\\Queue\\\\ShouldQueue;\\nuse Illuminate\\\\Foundation\\\\Bus\\\\Dispatchable;\\nuse App\\\\Util\\\\L;\\nuse Mail;\\n\\nclass SendReminderEmail implements ShouldQueue\\n{\\n    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\\n\\n    protected $orderInfo;\\n    protected $email;\\n\\n    /**\\n     * Create a new job instance.\\n     *\\n     * @return void\\n     */\\n    public function __construct($orderInfo, $email)\\n    {\\n        $this->orderInfo = $orderInfo;\\n        $this->email = $email;\\n    }\\n\\n    /**\\n     * Execute the job.\\n     *\\n     * @return void\\n     */\\n    public function handle()\\n    {\\n        // Mail::send()的返回值为空，所以可以其他方法进行判断\\n        Mail::send(\'emails.new_order_mail\',\\n            [\\n                \'order_number\' => $this->orderInfo[\'order_number\'],\\n                \'goods_name\' => $this->orderInfo[\'goods_name\'],\\n                \'goods_color\' => $this->orderInfo[\'goods_color\'],\\n                \'goods_num\' => $this->orderInfo[\'goods_num\']\\n            ],\\n            function ($message) {\\n                $to = $this->email;\\n                $message->to($to)->subject(\'【xx商城新订单通知】\');\\n            });\\n        // 返回的一个错误数组，利用此可以判断是否发送成功\\n        if (count(Mail::failures()) >= 1) {\\n            L::email(\\"订单：\\" . $this->orderInfo[\'order_number\'] . \\"的 \\" . $this->email . \\" 邮件通知发送失败\\");\\n        }\\n    }\\n}\\n ```\\n \\n### 2、任务分发\\n \\n#### 2-1 生产者，在控制器内使用dispatch方法调用即可\\n\\n``` php\\nnamespace App\\\\Api\\\\Controllers\\\\Mail;\\nuse App\\\\Api\\\\Controllers\\\\BaseController;\\nuse App\\\\Repositories\\\\Order\\\\OrderRepository;\\n\\nclass MailController extends BaseController\\n{\\n    public function __construct(OrderRepository $order)\\n    {\\n        $this->order = $order;\\n    }\\n\\n    public function send()\\n    {\\n        $header_id = 3691;\\n        $this->order->sendMail($header_id);\\n    }\\n}\\n```\\n \\n\\n#### 2-2 定义发送邮件的类，分发任务\\n\\n ``` php\\n /**\\n     * @param $header_id\\n     * @return mixed\\n     * 发送邮件 队列\\n     */\\n    public function sendMail($header_id)\\n    {\\n        try {\\n            // 邮件内容\\n            $orderInfo = OrderDetail::select(\'order_number\', \'order_lines.*\')\\n                ->leftJoin(\'order_headers\', \'order_headers.uid\', \'=\', \'header_id\')\\n                ->where(\'header_id\', $header_id)\\n                ->first();\\n            $order[\'order_number\'] = $orderInfo->order_number;\\n            $order[\'goods_name\'] = \'嘻嘻\' . $orderInfo->combo;\\n            $order[\'goods_color\'] = $orderInfo->color;\\n            $order[\'goods_num\'] = $orderInfo->quantity;\\n            L::email(\\"订单：\\" . $orderInfo->order_number);\\n            // 邮件地址列表\\n            $emailList = [\\"xxx@qq.com\\", \\"xxx@163.com\\"]; // 测试 邮件地址\\n            // 推送任务入队列\\n            foreach ($emailList as $email) {\\n                dispatch(new SendReminderEmail($order, $email));\\n            }\\n        } catch (\\\\Exception $e) {\\n        }\\n    }\\n ```\\n\\n#### 2-3 新建邮件发送模板\\n\\n``` php\\n// /resource/views/emailsnew_order_mail.blade.php\\n<div>你好，小程序商城收到新订单。</div>\\n<div>收货地址: {{$address}}</div>\\n<div>订单号: {{$order_number}}</div>\\n<div>商品名称: {{$goods_name}}</div>\\n<div>商品颜色: {{$goods_color}}</div>\\n<div>数量: {{$goods_num}}</div>\\n```\\n\\n## 四、开始测试\\n\\n开始之前，我们需要在命令行启动队列系统，队列在启动完成后会进入监听状态\\n\\n``` bash\\nphp artisan queue:listen\\n```\\n\\n## 五、运行队列进程\\n\\n``` bash\\nphp artisan queue:work\\n```\\n\\n## 六、配置 Supervisor\\n\\n测试完成后，邮件发送成功，表示你已经成功啦~\\n\\nbut，如果是在生产环境，就不可能是像开发时启动一下队列发送一次，肯定是要有一定的监听和触发机制，所以Supervisor登场了。\\n\\nsupervisord 是进程管理的服务端，常驻进程辅助干活\\nsupervisorctl 是客户端，用来执行查看、加载等命令\\n\\n具体请看[配置 Supervisor，linux下的队列进程管理服务端](https://juejin.im/post/6844903914039410695)","tagIds":"20,32","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":1,"type":1,"groupTimestamp":"1565878336520","cover":"https://logos-download.com/wp-content/uploads/2016/09/Laravel_logo_wordmark_logotype.png","categoryId":2,"created_at":"2023-11-06T14:17:09.000Z","updated_at":"2023-11-10T14:49:14.000Z","tagList":[{"id":20,"name":"PHP"},{"id":32,"name":"Laravel"}],"createDate":"2019-08-15"}',dn='{"id":22,"title":"IE9兼容爬坑总结—vuecli3+eleUI后台管理项目兼容IE9","subTitle":"","link":null,"description":"","content":"### Q1. 不兼容ES6语法\\n> 引入babel-polyfill和es6-promise两个插件，将ES6语法转化为ES5\\n\\n#### 1-1、安装\\n```bash\\ncnpm install --save-dev babel-polyfill es6-promise\\n```\\n\\n#### 1-2、main.js引入\\n```javascript\\n// 解决低版本浏览器不支持promise问题\\nimport \'babel-polyfill\'\\nimport Es6Promise from \'es6-promise\'\\nEs6Promise.polyfill()\\n ```\\n \\n #### 在配置文件vue.config.js中引入\\n```javascript\\n// ...省略\\nchainWebpack: config => {\\n    // 新增\\n    config.entry.app = [\'babel-polyfill\', \'./src/main.js\']\\n}\\n// ...省略\\n```\\n \\n### Q2. CSS Hack\\n> 不可能为了兼容一个IE9，而降低了其它主流版本浏览器下的页面体验，所以我会使用CSS Hack，在IE9时再去加载兼容文件和布局。\\n\\n```! \\nCSS hack是通过在CSS样式中加入一些特殊的符号，让不同的浏览器识别不同的符号，以达到应用不同的CSS样式的目的\\n```\\n#### 2-1、条件注释法\\n因为我是针对IE9，所以我采用了IE浏览器专有的Hack方式：条件注释法。\\n\\n##### 2-1.1、在public目录创建文件夹ie9\\n主要用来存放为了兼容ie9而添加的css和js补丁文件等\\n\\n##### 2-1.2、在ie9文件下创建css文件ie9.css\\nie9样式补丁文件\\n\\n##### 2-1.3、在index.html的head中引入\\n```html\\n<head>\\n    // ...\\n    <!--[if lte IE 9]>\\n      <link href=\\"./ie9/ie9.css\\" rel=\\"stylesheet\\"></link>\\n    <![endif]-->\\n</head>\\n```\\n\\n> 这样做了之后，在浏览器是ie9时，会自动加载ie9.css文件，而在其他浏览器下则会忽略这行代码\\n \\n### Q3. 不兼容flex布局\\n巧用`position、float、display:inline-block`属性灵活修改布局\\n\\n### Q4. 不兼容背景颜色的渐变写法`background: linear-gradient(...)`\\n正常：\\n```\\nbackground: linear-gradient(180deg, #1A74E4, #2599F0);\\n```\\nie9兼容写法：\\n```\\nfilter: progid:DXImageTransform.Microsoft.gradient(GradientType=1, startColorstr=#1A74E4, endColorstr=#2599F0);\\n-ms-filter: \\"progid:DXImageTransform.Microsoft.gradient (GradientType=1, startColorstr=#1A74E4, endColorstr=#2599F0)\\";\\n```\\n\\n### Q5、el-table数据量多（页面有滚动条时）在ie中会导致页面卡顿\\n> 原因：包裹表格的容器用了绝对或者相对定位，一般就是`.el-table`用了相对定位，但没有设置层级，在ie中z-index层级降低。\\n\\n> 解决方法：只需要将表格所属的父级或者祖父容器的z-index调高就行，将`.el-table`设置为10之后，卡顿问题解决\\n\\n### Q6、不支持placeholder\\n用了一个大佬封装的js，稍微改了一下，能支持正常情况下placeholder的显示，比如登录注册页。\\n\\n#### 6-1、 在工具类文件夹下生成brower-version.js文件，用来判断浏览器版本\\nbrower-version.js：\\n```javascript\\nexport default function browerVersion() {\\n  var ua = navigator.userAgent\\n  var ver = 0\\n  var versiondata\\n  var versionbool\\n\\n  if (ua) {\\n    if (ua.match(/MSIE\\\\s+([\\\\d]+)\\\\./i)) {\\n      ver = RegExp.$1\\n    } else if (ua.match(/Trident.*rv\\\\s*:\\\\s*([\\\\d]+)\\\\./i)) {\\n      ver = RegExp.$1\\n    }\\n  }\\n\\n  versiondata = parseInt(ver)\\n\\n  if (versiondata <= 9 && versiondata !== 0) {\\n    versionbool = true\\n  } else {\\n    versionbool = false\\n  }\\n\\n  // versionbool    true: 低于ie9   false: ie10+\\n  return versionbool\\n}\\n```\\n\\n#### 6-2、定义全局的浏览器是否是ie9版本的判断字段\\nmain.js\\n```javascript\\nimport browerVersion from \'@/assets/utils/brower-version.js\'\\nconst isIE9 = browerVersion()\\nVue.prototype.$browerVersion = isIE9\\n```\\n \\n#### 6-3、工具类文件夹下创建ie-placeholder.js文件\\n/assets/utils/[ie-placeholder.js](https://github.com/ccccai/ie-placeholder/blob/master/placeholder.js)\\n\\n#### 6-4、项目加载时就load一遍placeholder定义文件，为ie9下的input输入框加上placeholder\\n在App.js调用ie-placeholder.js定义的方法\\n初始化各input的placeholder\\n```javascript\\n<script>\\nimport iePlaceholders from \'@/assets/utils/ie-placeholder\'\\nexport default {\\n  name: \'App\',\\n  mounted() {\\n    if (this.$browerVersion) {\\n      iePlaceholders()\\n    }\\n  }\\n}\\n<\/script>\\n```\\n但是涉及到elementUI的其他组件，比如日期选择，比如级联选择，就会有点问题。这里的建议还是在ie9下不要纠结显示placeholder，体验太差了。\\n\\n### Q7、输入框自带有文本删除按钮和密码查看按钮\\n> 在ie10+的版本我们可以通过\\n\\n```\\n::-ms-clear,\\n::-ms-reveal{\\n  display:none !important;\\n}\\n```\\n\\n> 这段代码来隐藏，但是我发现在ie9下面是没用的。只能通过在输入框末尾增加一个和背景同色的块来遮掉，但是这样会影响输入的内容的全显示，我的做法是就让它留着，影响不大。\\n\\n### Q8、input不支持type=number\\n> 当input的type属性为number时，还是可以任意输入其他符号。。我选择在ie9放弃number限制的挣扎\\n\\n### Q9、el-upload无法使用\\n> 在ie9下，el-upload是无法使用的。我引入了能够兼容ie9的其他上传插件，当浏览器为ie9时就用自定义的上传组件，当非ie9时就保持原来的el-upload组件。\\n\\n**用vue-upload-component替代el-upload**\\n\\n#### 9-1、安装vue-upload-component\\n```bash\\ncnpm install vue-upload-component --save\\n```\\n\\n#### 9-2、引入\\n可以全局引入也可以局部引入，因为我只有两个地方用到了上传组件，所以我选择在用到的页面引入。\\n```\\n<template>\\n<!-- 省略n行代码 -->\\n<file-upload\\n    v-if=\\"$browerVersion\\"\\n    ref=\\"compatibleUpload\\"\\n    v-model=\\"compatibleFiles\\"\\n    :post-action=\\"`${API.UploadImg}`\\"\\n    @input-file=\\"inputFile\\"\\n>\\n    <el-button\\n       :loading=\\"uploadLoading\\"\\n       :icon=\\"imgName ? \'\' : \'el-icon-upload2\'\\"\\n       :title=\\"imgName ? \'重新选择\' : \'选择图片\'\\"\\n        plain\\n    >\\n          {{ !imgName ? \'上传图片\' : imgName }}\\n    </el-button>\\n</file-upload>\\n<!-- 省略n行代码 -->\\n</template>\\n<script>\\nimport VueUploadComponent from \'vue-upload-component\'\\nexport default {\\n  components: {\\n    FileUpload: VueUploadComponent\\n  },\\n  data() {\\n      imgSizeLimit: 2,\\n      imgName: \'\',\\n      imgUrl: \'\',\\n      uploadLoading: false,\\n      compatibleFiles: []\\n  },\\n  methods: {\\n      inputFile(newFile, oldFile, prevent) {\\n      // 添加文件\\n      if (newFile && !oldFile) {\\n        // 过滤不是图片后缀的文件\\n        if (!/\\\\.(jpg|png)$/i.test(newFile.name)) {\\n          this.$message.closeAll()\\n          this.$message.warning(\'只能上传jpg/png文件，请重新选择\')\\n          return prevent\\n        }\\n        if (newFile.size > this.imgSizeLimit * 1024 * 1024) {\\n          this.$message.closeAll()\\n          this.$message.warning(`上传的图片的大于${this.imgSizeLimit}M，请重新选择`)\\n          return prevent\\n        }\\n        // 自动上传\\n        if (Boolean(newFile) !== Boolean(oldFile) || oldFile.error !== newFile.error) {\\n          if (!this.$refs.compatibleUpload.active) {\\n            this.uploadLoading = true\\n            this.$refs.compatibleUpload.active = true\\n          }\\n        }\\n      }\\n\\n      // 上传完成\\n      if (newFile && oldFile && !newFile.active && oldFile.active) {\\n        // 获得相应数据\\n        this.uploadLoading = false\\n        this.$refs.compatibleUpload.remove(newFile) // 删除当前文件对象\\n        let response = newFile.response\\n        if (Object.prototype.toString.call(response) !== \'[object Object]\') {\\n          response = (new Function(\'return \' + response))()\\n        } else {\\n          this.$message.closeAll()\\n          this.$message.error(\'图片上传失败, 请重新上传\')\\n        }\\n        if ((response.resultCode === \'1\' || response.resultCode === 1) && response.data) {\\n          this.imgUrl = response.data\\n          this.imgName = newFile.name\\n          this.$message.closeAll()\\n          this.$message.success(\'图片上传成功\')\\n        } else {\\n          this.imgUrl = \'\'\\n          this.imgName = \'\'\\n          this.$message.closeAll()\\n          let errorMsg = response.resultMessage ? response.resultMessage : \'图片上传失败, 请重新上传\'\\n          if ([\'10021\'].includes(response.resultCode)) {\\n            errorMsg = `上传的图片的大于${this.imgSizeLimit}M，请重新选择`\\n            this.$message.warning(errorMsg)\\n            return\\n          }\\n          this.$message.error(errorMsg)\\n        }\\n      }\\n    }\\n  }\\n}\\n<\/script>\\n```\\n\\n> 具体用法请参考[官方文档](https://lian-yue.github.io/vue-upload-component/#/zh-cn/documents)，这要注意如果让组件自己发起请求,就是使用post-action参数，则是用iframe模拟form表单提交数据的，用这种方式传给后台的数据就是formData格式，但是不能添加header请求头。如果非要有请求头，那就要使用custom-action自定义上传方法，但是自定义上传方法的话，接口参数就不能用formData格式来传给后台了，为啥？因为ie9不支持new FormData()。。\\n\\n### Q10、不支持JSON.parse\\n没错，在IE9以下是不支持JSON.parse方法来解析json字符串的，有两种方法来替代JSON.parse\\n\\n#### 10-1、eval方式\\n```\\nfunction strToJson(str){ \\n    var json = eval(\'(\' + str + \')\'); \\n    return json; \\n} \\n```\\n\\n> 但是出于安全性的考虑，建议尽量不要使用eval，如果从第三方获取数据进行解析，会存在恶意脚本代码的风险。\\n\\n#### 10-2、new Function方式\\n```\\nfunction strToJson(str){ \\n    var json = (new Function(\\"return \\" + str))(); \\n    return json; \\n} \\n```\\n\\n### Q11、vue项目在IE中自动读取缓存中的数据，不重新发请求\\n> 这也不算只是ie9的问题了，ie内核都存在这个问题。当你请求接口时，请求地址和请求参数都没有变化的时候，ie是会默认从缓存中获取数据而不会重新发送请求的。\\n\\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/22/16df25f00321e654~tplv-t2oaga2asx-image.image)\\n\\n> 只要保证我们每次的请求都是一个新的请求，就可以避免这种情况了，最简单的方式就是每次请求都带多一个时间戳参数，只需要在axios拦截器添加几行设置时间戳参数的代码即可\\n```\\n// request拦截器\\nservice.interceptors.request.use(\\n  config => {\\n    const time = Date.parse(new Date()) / 1000\\n    // 添加时间戳参数\\n    if (config.method === \'post\') {\\n      config.data = {\\n        ...config.data,\\n        t: time\\n      }\\n    }\\n    if (config.method === \'get\') {\\n      config.params = {\\n        ...config.params,\\n        t: time\\n      }\\n    }\\n    return config\\n  },\\n  error => {\\n    // Do something with request error\\n    return Promise.reject(error)\\n  }\\n)\\n```\\n\\n### Q11、在文本框中进行删除操作时，文本框的value不更新。\\n> 在我们之前Q2创建的ie9文件夹下，新建ie9-oninput-polyfill.js文件\\n\\n#### 11-1、ie9-oninput-polyfill.js:\\n\\n```\\n/* eslint-disable */\\n(function (d) {\\n  if (navigator.userAgent.indexOf(\'MSIE 9\') === -1) return;\\n\\n  d.addEventListener(\'selectionchange\', function() {\\n    var el = d.activeElement;\\n\\n    if (el.tagName === \'TEXTAREA\' || (el.tagName === \'INPUT\' && el.type === \'text\')) {\\n      var ev = d.createEvent(\'CustomEvent\');\\n      ev.initCustomEvent(\'input\', true, true, {});\\n      el.dispatchEvent(ev);\\n    }\\n  });\\n})(document);\\n```\\n#### 11-2、在css Hack中引入\\n```html\\n<head>\\n    // ...\\n    <!--[if lte IE 9]>\\n      <link href=\\"./ie9/ie9.css\\" rel=\\"stylesheet\\"></link>\\n      <script src=\\"./ie9/ie9-oninput-polyfill.js\\" type=\\"text/javascript\\"><\/script>\\n    <![endif]-->\\n</head>\\n```\\n\\n### Q12、不能导出二进制文件流\\n因为ie9一下不支持new Blob，所以不能将二进制文件流转为文件下载。解决方法是让后台改接口，不要传二进制文件流过来，直接给前端传文件下载链接\\n\\n### Q13、ie9下el-table的排序三角形错位\\n\\n![](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/22/16df27e22aa3c013~tplv-t2oaga2asx-image.image)\\n\\n解决方法：\\n```\\n.el-table .caret-wrapper {\\n  display: inline-block;\\n}\\n.el-table .sort-caret{\\n  display: block;\\n}\\n```\\n\\n> 好了，暂时只想到这些，后续有遗漏的会继续补充~","tagIds":"11,4,10","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":99,"type":1,"groupTimestamp":"1571692421869","cover":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/22/16df282c54bdf592~tplv-t2oaga2asx-jj:216:144:0:0:q75.avis","categoryId":1,"created_at":"2023-11-22T21:15:18.000Z","updated_at":"2023-11-22T21:44:00.000Z","tagList":[{"id":4,"name":"CSS"},{"id":10,"name":"HTML"},{"id":11,"name":"JavaScript"}],"createDate":"2019-10-22"}',un='{"id":23,"title":"我的第一个node项目，用koa+sequelize来开发接口","subTitle":"","link":null,"description":"一直都很想尝试用node来写点东西，学习了一番之后依葫芦画瓢用koa框架加上sequelize ORM从零开始用MVC模式编写了个简单的后台项目，故在此做一下记录。","content":"### 一、构建项目\\n\\n#### 1、创建文件夹，初始化项目\\n\\n```bash\\nmkdir node-koa-demo # 创建项目\\ncd node-koa-demo # 进入目录\\ncnpm init -y # 生成package.json\\ncnpm install koa koa-body koa-router koa-static koa2-cors path -S # 安装koa插件\\ntouch app.js # 生成入口文件\\n```\\n\\n\\n\\n#### 2、定义项目启动命令\\n\\n```json\\n// package.json\\n{\\n  \\"name\\": \\"node-koa-demo\\",\\n  \\"version\\": \\"1.0.0\\",\\n  \\"description\\": \\"\\",\\n  \\"main\\": \\"index.js\\",\\n  \\"scripts\\": {\\n    \\"test\\": \\"echo \\\\\\"Error: no test specified\\\\\\" && exit 1\\",\\n    \\"start\\": \\"node app.js\\"\\n  },\\n  \\"keywords\\": [],\\n  \\"author\\": \\"\\",\\n  \\"license\\": \\"ISC\\",\\n  \\"dependencies\\": {\\n    \\"koa\\": \\"^2.11.0\\",\\n    \\"koa-body\\": \\"^4.1.1\\",\\n    \\"koa-router\\": \\"^7.4.0\\",\\n    \\"koa-static\\": \\"^5.0.0\\",\\n    \\"koa2-cors\\": \\"^2.0.6\\",\\n    \\"path\\": \\"^0.12.7\\"\\n  }\\n}\\n\\n```\\n\\n#### 3、定义入口文件\\n\\n```javascript\\n// app.js\\nconst Koa = require(\'koa\')\\nconst app = new Koa()\\nconst config = require(\'./config\')\\nconst path = require(\'path\')\\nconst koaBody = require(\'koa-body\')({ // // 解析body的中间件\\n  multipart: true, // 支持文件上传\\n  encoding:\'gzip\',\\n  formLimit: \'5mb\', // 限制表单请求体的大小\\n  jsonLimit: \'5mb\', // JSON 数据体的大小限制\\n  textLimit: \'5mb\', // 限制 text body 的大小\\n  formidable:{\\n    uploadDir: path.join(__dirname, \'/public/upload\'), // 设置文件上传目录\\n    keepExtensions: true,    // 保持文件的后缀\\n    maxFieldsSize: 200 * 1024 * 1024, // 设置上传文件大小最大限制，默认2M\\n    onFileBegin: (name, file) => { // 文件上传前的设置\\n      console.log(`name: ${name}`)\\n      console.log(file)\\n    }\\n  }\\n})\\nconst static = require(\'koa-static\')\\n\\n// 解析body的中间件\\napp.use(koaBody)\\napp.use(static(path.join(__dirname)))\\n\\napp.listen(config.service.port, () => {\\n  console.log(\'server is running\')\\n})\\n\\n```\\n\\n#### 4、定义配置文件\\n\\n##### 1）定义本地配置文件env文件：\\n.env文件：\\n```javascript\\n// .env\\nSERVE_PORT=[项目端口]\\nSERVE_ENVIROMENT=[项目所处环境]\\n```\\n\\n安装dotenv插件用来在项目中引用env文件\\n\\n```bash\\ncnpm install dotenv -S # 用来引入.env配置环境变量\\n```\\n\\n入口文件引入插件：\\n\\n```javascript\\nconst dotenv = require(\'dotenv\') // 引入配置文件\\ndotenv.config()\\n```\\n\\n##### 2）定义项目中的配置文件config.js：\\n\\nconfig.js：\\n```javascript\\nmodule.exports = {\\n  service: {\\n    port: process.env[\'SERVE_PORT\'],\\n    enviroment: process.env[\'SERVE_ENVIROMENT\'] || \'dev\'\\n  }\\n}\\n```\\n\\n入口文件引入config.js：\\n\\n```javascript\\nconst config = require(\'./utils/config\')\\nglobal.config = config\\n```\\n\\n> 启动项目： ```cnpm run start ```\\n\\n#### 5、项目热更新\\n安装插件\\n```bash\\ncnpm install nodemon -S\\n```\\n\\n##### 添加命令：\\n\\n```json\\n// package.json\\n\\"start:dev\\": \\"nodemon node app.js\\"\\n```\\n\\n### 二、开发接口\\n\\n#### 1、sequelize连接mysql\\n\\n##### 1）安装相关依赖\\n\\n```bash\\ncnpm install mysql2 sequelize -S\\n```\\n\\n##### 2）创建数据库配置文件夹db\\n\\n```bash\\nmkdir db\\ntouch db/index.js\\n```\\n\\n##### 3）定义数据库连接配置，并引入\\n\\n```javascript\\n// .env\\nDB_DATABASE=[数据库名称]\\nDB_USER=[数据库用户名]\\nDB_PSW=[数据库连接密码]\\nDB_HOST=[数据库端口]\\n```\\n\\n##### 4）定义sequelize文件\\n```javascript\\n\\n// db/index.js\\nconst Sequelize = require(\'sequelize\')\\n\\nconst sequelize = new Sequelize(\\n  process.env[\'DB_DATABASE\'],\\n  process.env[\'DB_USER\'],\\n  process.env[\'DB_PSW\'], \\n  {\\n    host: process.env[\'DB_HOST\'], // 数据库地址\\n    dialect: \'mysql\', // 数据库类型\\n    dialectOptions: { // 字符集\\n      charset:\'utf8mb4\',\\n      collate:\'utf8mb4_unicode_ci\',\\n      supportBigNumbers: true,\\n      bigNumberStrings: true\\n    },\\n    pool: {\\n      max: 5, // 连接池最大链接数量\\n      min: 0, // 最小连接数量\\n      idle: 10000 // 如果一个线程10秒内没有被使用的花，就释放连接池\\n    },\\n    timezone: \'+08:00\', // 东八时区\\n    logging: (log) => {\\n      console.log(\'dbLog: \', log)\\n      return false\\n    } // 执行过程会打印一些sql的log，设为false就不会显示\\n  }\\n)\\n\\nmodule.exports = sequelize\\n```\\n\\n##### 5）定义model\\n\\n```bash\\nmkdir model\\ntouch model/User.js\\n```\\n\\n```javascript\\nconst Sequelize = require(\'sequelize\')\\nconst sequelize = require(\'../db\')\\n\\nconst User = sequelize.define(\'user\', {\\n  id: {\\n    type: Sequelize.INTEGER,\\n    allowNull: false, // 设置为false时，会给添加NOT NULL（非空）约束，数据保存时会进行非空验证\\n    comment: \'ID\', // 字段描述（自1.7+后，此描述不再添加到数据库中\\n    autoIncrement: true, // 是否自增\\n    primaryKey: true, // 指定是否是主键\\n    unique: true, // 设置为true时，会为列添加唯一约束\\n  },\\n  password: {\\n    type: Sequelize.STRING(20),\\n    validate: {}, // 模型每次保存时调用的验证对象。可是validator.js中的验证函数(参见 DAOValidator)、或自定义的验证函数\\n    allowNull: false, // 设置为false时，会给添加NOT NULL（非空）约束，数据保存时会进行非空验证\\n    comment: \'密码\' // 字段描述（自1.7+后，此描述不再添加到数据库中）\\n  },\\n  name: {\\n    type: Sequelize.STRING(20),\\n    validate: {\\n      notEmpty: true\\n    }, // 模型每次保存时调用的验证对象。可是validator.js中的验证函数(参见 DAOValidator)、或自定义的验证函数\\n    allowNull: false, // 设置为false时，会给添加NOT NULL（非空）约束，数据保存时会进行非空验证\\n    comment: \'用户名称\' // 字段描述（自1.7+后，此描述不再添加到数据库中）\\n  },\\n  email: {\\n    type: Sequelize.STRING(20),\\n    validate: {\\n      isEmail: true\\n    }, // 模型每次保存时调用的验证对象。可是validator.js中的验证函数(参见 DAOValidator)、或自定义的验证函数\\n    allowNull: false, // 设置为false时，会给添加NOT NULL（非空）约束，数据保存时会进行非空验证\\n    comment: \'email\' // 字段描述（自1.7+后，此描述不再添加到数据库中）\\n  },\\n  phone: {\\n    type: Sequelize.STRING(11),\\n    allowNull: false, // 设置为false时，会给添加NOT NULL（非空）约束，数据保存时会进行非空验证\\n    comment: \'手机号码\' // 字段描述（自1.7+后，此描述不再添加到数据库中）\\n  },\\n  birth: {\\n    type: Sequelize.DATE,\\n    validate: {\\n      isDate: true\\n    }, // 模型每次保存时调用的验证对象。可是validator.js中的验证函数(参见 DAOValidator)、或自定义的验证函数\\n    allowNull: false, // 设置为false时，会给添加NOT NULL（非空）约束，数据保存时会进行非空验证\\n    defaultValue: new Date(), // 字面默认值, JavaScript函数, 或一个 SQL 函数\\n    comment: \'生日\' // 字段描述（自1.7+后，此描述不再添加到数据库中）\\n  },\\n  sex: {\\n    type: Sequelize.INTEGER,\\n    validate: {\\n      isInt: true,\\n      len: 1\\n    }, // 模型每次保存时调用的验证对象。可是validator.js中的验证函数(参见 DAOValidator)、或自定义的验证函数\\n    allowNull: false, // 设置为false时，会给添加NOT NULL（非空）约束，数据保存时会进行非空验证\\n    defaultValue: 0, // 字面默认值, JavaScript函数, 或一个 SQL 函数\\n    comment: \'性别，0-男 1-女\' // 字段描述（自1.7+后，此描述不再添加到数据库中）\\n  },\\n}, {\\n  freezeTableName: true, // 设置为true时，sequelize不会改变表名，否则可能会按其规则有所调整\\n  timestamps: true, // 为模型添加 createdAt 和 updatedAt 两个时间戳字段\\n})\\n\\n//创建表，默认是false，true则是删除原有表，再创建\\nUser.sync({\\n  force: false,\\n})\\n\\nmodule.exports = User\\n```\\n\\n###### [*自动暴露model（根据需要自行选择是否需要自动暴露所有model）]\\n\\n```javascript\\n// model/index.js\\n\\n/* 扫描所有的model模型 */\\nconst fs = require(\'fs\')\\nconst files = fs.readFileSync(__dirname + \'/model\') // 遍历目录\\nconst jsFiles = files.filter(item => {\\n  return item.endsWith(\'.js\')\\n}, files)\\n\\nmodule.exports = {}\\nfor (const file of jsFiles) {\\n  console.log(`import model from file ${file}`)\\n  const name = file.substring(0, file.length - 3)\\n  module.exports[name] = require(__dirname + \'/model/\' + file)\\n}\\n```\\n\\n#### 2、定义路由\\n\\n```bash\\nmkdir router\\ntouch router/index.js\\n```\\n\\n```javascript\\n// router/index.js\\nconst router = require(\'koa-router\')({\\n  prefix: \'/api\'\\n})\\n\\nrouter.get(\'/\', async(ctx, next) => {\\n  ctx.body = \'Hello World~\'\\n})\\n\\nmodule.exports = router\\n```\\n\\n在入口文件app.js引入\\n\\n```javascript\\n// 路由中间件\\nconst router = require(\'./router\')\\n// 开始服务并生成路由\\napp.use(router.routes()).use(router.allowedMethods()) // 开始服务并生成路由\\n```\\n\\n\\n#### 3、自定义中间件\\n\\n##### 1）创建中间件文件夹\\n\\n```bash\\nmkdir middleware\\n```\\n\\n##### 2）定义一个错误处理中间件\\n\\n```bash\\ntouch middleware/exception.js # 中间件文件\\ntouch utils/http-exception.js # 定义已知异常类\\n```\\n\\n##### 3）定义已知异常类继承于Error类\\n明确已知异常还是未知异常\\n\\n```javascript\\n// utils/http-exception.js\\n/**\\n * 默认的异常\\n */\\nclass HttpException extends Error {\\n  constructor(msg = \'错误请求\', errorCode = 10000, code = 400) {\\n    super()\\n    this.errorCode = errorCode\\n    this.code = code\\n    this.msg = msg\\n  }\\n}\\n\\nclass ParameterException extends HttpException {\\n  constructor(msg, errorCode) {\\n    super()\\n    this.code = 400\\n    this.msg = msg || \'参数错误\'\\n    this.errorCode = errorCode || 10000\\n  }\\n}\\n\\nclass AuthFailed extends HttpException {\\n  constructor(msg, errorCode) {\\n    super()\\n    this.code = 401\\n    this.mag = msg || \'授权失败\'\\n    this.errorCode = errorCode || 10004\\n  }\\n}\\n\\nclass NotFound extends HttpException {\\n  constructor(msg, errorCode) {\\n    super()\\n    this.code = 404\\n    this.msg = msg || \'未找到该资源\'\\n    this.errorCode = errorCode || 10005\\n  }\\n}\\n\\nclass Forbidden extends HttpException {\\n  constructor(msg, errorCode) {\\n    super()\\n    this.code = 403\\n    this.msg = msg || \'禁止访问\'\\n    this.errorCode = errorCode || 10006\\n  }\\n}\\n\\nclass Oversize extends HttpException {\\n  constructor(msg, errorCode) {\\n    super()\\n    this.code = 413\\n    this.msg = msg || \'上传文件过大\'\\n    this.errorCode = errorCode || 10007\\n  }\\n}\\n\\nclass InternalServerError extends HttpException {\\n  constructor(msg, errorCode) {\\n    super()\\n    this.code = 500\\n    this.msg = msg || \'服务器出错\'\\n    this.errorCode = errorCode || 10008\\n  }\\n}\\n\\nmodule.exports = {\\n  HttpException,\\n  ParameterException,\\n  AuthFailed,\\n  NotFound,\\n  Forbidden,\\n  Oversize,\\n  InternalServerError\\n}\\n```\\n\\n##### 4）定义异常处理中间件\\n\\n```javascript\\n// middleware/exception.js\\nconst { HttpException } = require(\'../utils/http-exception\')\\n\\n// 全局异常监听\\nconst catchError = async(ctx, next) => {\\n  try {\\n    await next()\\n  } catch(error) {\\n    // 已知异常\\n    const isHttpException = error instanceof HttpException\\n    // 开发环境\\n    const isDev = global.config.service.enviroment === \'dev\'\\n\\n    // 在控制台显示未知异常信息：开发环境下，不是HttpException 抛出异常\\n    if (isDev && !isHttpException) {\\n      throw error\\n    }\\n\\n    /**\\n     * 是已知错误，还是未知错误\\n     * 返回：\\n     *      msg 错误信息\\n     *      error_code 错误码\\n     */\\n    if (isHttpException) {\\n      ctx.body = {\\n        msg: error.msg,\\n        error_code: error.errorCode\\n      }\\n      ctx.response.status = error.code\\n    } else {\\n      ctx.body = {\\n        msg: \'未知错误\',\\n        error_code: 9999\\n      }\\n      ctx.response.status = 500\\n    }\\n  }\\n}\\n\\nmodule.exports = catchError\\n```\\n\\n##### 5）入口文件加载引入异常处理中间件\\n\\n```javascript\\n// 加载全局异常\\nconst errors = require(\'./utils/http-exception\')\\nglobal.errs = errors\\n\\nconst app = new Koa()\\n// 全局异常中间件监听、处理，放在所有中间件的最前面\\nconst catchError = require(\'./middleware/exception\')\\napp.use(catchError)\\n```\\n\\n#### 4、定义API统一返回格式\\n\\n##### 1）resJson.js定义接口返回格式\\n\\n```javascript\\n// utils/resJson.js\\nconst ResultJson =  {\\n  success: (params) => {\\n    return {\\n      data: params.data || null, // 返回的数据\\n      msg: params.msg || \'操作成功\', // 返回的提示信息\\n      code: 1 // 返回的接口调用状态码，0-失败，1-成功\\n    }\\n  },\\n  fail: (params) => {\\n    return {\\n      data: params.data || null,\\n      msg: params.msg || \'操作失败\',\\n      code: 0,\\n      error_code: params.errorCode // 返回接口异常信息码\\n    }\\n  }\\n}\\n\\nmodule.exports = ResultJson\\n```\\n##### 2）在中间件中使用\\n\\n修改上文提到的异常处理中间件\\n\\n```javascript\\n/* 错误处理中间件 */\\nconst { HttpException } = require(\'../utils/http-exception\')\\nconst resJson = require(\'../utils/resJson\')\\n\\n// ...省略上文\\n    if (isHttpException) {\\n      ctx.body = resJson.fail(error)\\n      ctx.response.status = error.code\\n    } else {\\n      ctx.body = resJson.fail({\\n        msg: \'未知错误\',\\n        error_code: 9999\\n      })\\n      ctx.response.status = 500\\n    }\\n// ...省略下文\\n\\n```\\n\\n#### 5、[小试牛刀] 编写一个返回所有用户信息的接口\\n\\n##### 1）创建控制器文件夹，定义User.js，用来对User表进行的操作。\\n\\n```bash\\nmkdir controller\\ntouch controller/User.js\\n```\\n\\n###### 2）获取全部用户列表\\n\\n```javascript\\nconst User = require(\'../model/User.js\')\\nconst resJson = require(\'../utils/resJson\')\\n\\nmodule.exports = {\\n  selectAll: async (ctx, next) => {\\n    await User.findAll({\\n      raw: true,\\n      attributes: { // 不返回password字段\\n        exclude: [\'password\'] \\n      }\\n    }).then((res) => {\\n    \\t// 成功返回\\n      ctx.body = resJson.success({data: res})\\n    }).catch((err) => {\\n    \\t// 失败，捕获异常并输出\\n      ctx.body = resJson.fail(err)\\n    })\\n  }\\n}\\n\\n```\\n\\n##### 3）声明接口路径\\n\\n```javascript\\n// router/index.js\\nconst router = require(\'koa-router\')({\\n  prefix: \'/api\'\\n})\\n// User控制器\\nconst User = require(\'../controller/user\')\\n\\n// 获取全部用户\\nrouter.get(\'/user/list\', User.selectAll)\\n\\nmodule.exports = router\\n```\\n\\n##### 4）访问接口\\n访问接口地址：http://localhost:3002/api/user/list\\n\\n访问结果：\\n```json\\n{\\n    \\"data\\": [\\n        {\\n            \\"id\\": 1,\\n            \\"name\\": \\"cai\\",\\n            \\"email\\": \\"cai@qq.com\\",\\n            \\"phone\\": \\"13234323453\\",\\n            \\"birth\\": \\"2019-12-13T01:23:17.000Z\\",\\n            \\"sex\\": 1,\\n            \\"createdAt\\": \\"2019-12-13T01:23:42.000Z\\",\\n            \\"updatedAt\\": \\"2019-12-13T01:23:42.000Z\\"\\n        }\\n    ],\\n    \\"msg\\": \\"操作成功\\",\\n    \\"code\\": 1\\n}\\n```","tagIds":"12,11,13,17,19","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":55,"type":1,"groupTimestamp":"1550610995346","cover":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/2/20/170620b0b56cf87b~tplv-t2oaga2asx-jj:216:144:0:0:q75.avis","categoryId":1,"created_at":"2023-11-22T21:17:53.000Z","updated_at":"2023-11-22T21:45:18.000Z","tagList":[{"id":11,"name":"JavaScript"},{"id":12,"name":"ES6"},{"id":13,"name":"NodeJS"},{"id":17,"name":"Koa"},{"id":19,"name":"Mysql"}],"createDate":"2019-02-20"}',mn=`{"id":25,"title":"仿照git马赛克墙用JS&SVG实现的数据可视化热力图工具","subTitle":"仿照git马赛克墙实现的JS原生热力图数据可视化工具，支持自定义日期、支持自定义横纵坐标等","link":null,"description":"","content":"先上效果图\\n\\n- 日历型热点图\\n\\n![日历型](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/2/16cedc5bcb49921b~tplv-t2oaga2asx-image.image)\\n\\n- 自定义型热点图，可以自己定义横纵坐标\\n\\n![自定义型](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/2/16cedc6317f11818~tplv-t2oaga2asx-image.image)\\n\\n> 说一说实现的心理历程，本来想像码云那个一样用div来实现的，但是脑子灵光一闪，我怎么不用canvas试一试呢，之前没什么机会接触过，刚好来练练手。\\n于是就实现了一波：\\n\\n\`\`\` javascript\\n  this.init = (dom) => {\\n    var section = this.option.size + this.option.gap\\n    dom.width = section * this.option.xAxis.length\\n    dom.height = section * this.option.yAxis.length\\n    // 调用canvas对象的getContext()方法，c变量就包含了指向2d渲染环境的引用\\n    var context = dom.getContext('2d')\\n    var levelGap = (this.option.max - this.option.min) / 4\\n    this.option.data.forEach((item) => {\\n      // [x, y, value]\\n      var differ = this.option.max - item[2]\\n      switch(true) {\\n        case (item[2] >= this.option.max) :\\n          color = 'rgb(25, 97, 39)'\\n          break\\n        case (differ < levelGap) :\\n          color = 'rgb(35, 154, 59)'\\n          break\\n        case (differ < levelGap * 2) :\\n          color = 'rgb(123, 201, 111)'\\n          break\\n        case (differ < levelGap * 3) :\\n          color = 'rgb(198, 228, 139)'\\n          break\\n        default:\\n          color = 'rgb(235, 237, 240)'\\n      }\\n      context.fillStyle = color\\n      context.fillRect(item[0] * section, item[1] * section, this.option.size, this.option.size)\\n    })\\n  }\\n\`\`\`\\n> 写到一半，发现不行啊，人家canvas是一整张画布，但是我是需要一个个小方格可以实现鼠标悬浮显示详细信息的呀，不妥不妥。于是我又想到了svg这个好家伙，F12看了下git，正好人家也是使用svg实现的。\\n\\n\`\`\`!\\n实现过程不复杂，就是比较绕，感兴趣怎么实现的小伙伴，我把项目地址贴出来了噢。如果我的组件是你需要用到的，那欢迎使用哈哈哈哈~~，下面说一说怎么使用，还有一些思考\\n\`\`\`\\n\\n### 一、项目地址\\n\\n[仿照git马赛克墙实现了个JS原生小工具，支持自定义日期、支持自定义横纵坐标](https://github.com/ccccai/heat-map)\\n\\n### 二、使用方法\\n\\n使用起来很简单，只要引入css文件和js文件即可\\n\\n#### 2.1 引入css和js\\n引入css：\\n\`\`\`html\\n<link rel=\\"stylesheet\\" href=\\"./heatMap.css\\" />\\n\`\`\`\\n\\n引入js：\\n\`\`\`html\\n<script src=\\"./heatMap.js\\"><\/script>\\n\`\`\`\\n\\n#### 2.2 初始化heatMap\\n\`\`\`javascript\\n<script>\\n  var heatMap = new HeatMapDate()\\n  var option = {\\n    gap: 6,\\n    type: 'custom',\\n    xAxis: ['11', '22', '33', '44'],\\n    yAxis: ['aa', 'bb'],\\n    data: [\\n      [0, 0, 0],\\n      // ...\\n      [3, 1, 1]\\n    ],\\n    min: 0,\\n    max: 6,\\n    tip: {\\n      show: true,\\n      formatter: '第{y}月的第{x}天有{b}个提交'\\n    }\\n  }\\n  heatMap.setOption(option)\\n  heatMap.init(document.getElementById('mySvg'))\\n<\\\\script>\\n\`\`\`\\n\\n### 三、配置参数说明\\n#### 3.1 初始化参数，需传入配置参数option：\\n\`\`\`js\\nheatMap.setOption(option)\\n\`\`\`\\n\\n#### 3.2 初始化热力图，需传入需要挂载的dom节点：\\n\`\`\`js\\nheatMap.init(dom)\\n\`\`\`\\n\\n#### 3.3 option参数说明\\n\\n| 参数 | 说明 | 类型 | 可选值 | 默认值 |\\n| ------ | ------ | ------ | ------ | ------ |\\n| type | 热力图类型,分两种，date-日历型和custom-自定义型 | String | date/custom | date |\\n| xAxis | 横坐标的label,当type为custom类型时需要传递该参数 | Array | - | - |\\n| yAxis | 纵坐标的label,当type为custom类型时需要传递该参数 | Array | - | - |\\n| gap | 方格之间的间隔 | Number | - | 3 |\\n| data | 数据,如果type是date,那data是Object类型,格式{yyyy-MM-dd: value ...};如果type是custom,那data是Array类型,格式[[x,y,value]...] | Object/Array | - | - |\\n| dateStart | 当type为date类型时起作用，表示起始日期，日期格式：yyyy-MM-dd | String | - | 去年的今天 |\\n| rect | 方格的相关属性 | Object | - | - |\\n| dateEnd | 当type为date类型时起作用，表示结束日期，日期格式：yyyy-MM-dd | String | - | 今天 |\\n| min | 分级的最低值，默认总共五个等级 | Number | - | 0 |\\n| max | 分级的最高值，默认总共五个等级 | Number | - | data里头的值的最大值 |\\n| tip | 方格顶部鼠标悬浮小气泡的相关属性 | Object | - | - |\\n| tip.show | 鼠标悬浮是否显示小气泡 | Boolean | true/false | true |\\n| tip.formatter | 小气泡的文本内容。type为date的时候{a}表示日期，{b}表示数值；type为custom的时候{x}表示x轴对应的值，{y}对应y轴的值，{b}表示数值；如果在替换字符串前加反斜杠(例如/{b})，则不会替换该字符串 | String | - | - |\\n| rect | 方格的相关属性 | Object | - | - |\\n| rect.stroke | 方格边框的相关属性 | Object | - | - |\\n| rect.stroke.show | 是否显示方格边框 | Boolean | true/false | false |\\n| rect.stroke.background | 方格边框颜色 | String | - | #333333 |\\n| rect.stroke.opacity | 方格边框透明度 | Float | 0～1 | 0.6 |\\n| rect.colourMatching | 方格配色方案，可以自定义（custom）也可以使用现有的配色方案 | String | custom/green/pink/blue/orange/gray | green |\\n| rect.stroke.backgroundArr | 当type为custom类型时起作用，方格配色方案具体颜色，多少个颜色就表示多少个等级，等级由重到轻，第一个颜色表示等级最重 | Array | - | - |\\n\\n### 四、总结与思考\\n\\n说一说实现过程中的痛点：\\n1. 日历型和自定义型的数据结构必须不同。逻辑得分开写。\\n\\n日历型我知道横轴就是月份，纵轴就是星期，所以我new新的热力图的时候，传的数据里头只要有日期和值就行。但自定义就不一样了，自定义的横纵坐标都是后来定义的，所以为了知道具体的哪个小方格的值，传的数据里头必须像\`\`\`[x, y, value]\`\`\`这样的结构。\\n\\n2. 日期的轮询\\n\\n日历型热力图默认是当前时间往前推一年这样一个时间跨度，所以我必须轮询出这一年里的所有日期，再拼装组合起来。后期考虑到了灵活性，所以这个时间跨度也是可以自定义的。\\n\\n3. 小方格的size的确定。\\n\\n小方格的size关乎到左边区域的大小。总的来说就是当前容器的宽度减去左边区域大小，再除以列数，写的时候的逻辑比较绕，跟写高数题似的，想起了当年被支配的恐惧。。\\n\\n4. 顶部悬浮气泡的位置确定。\\n\\n顶部悬浮气泡实际上我只定义了一个容器，每次调用的时候，改变定位和文字内容。\\n\\n5. 配色自定义\\n\\n配色这一块，有多少个配色就有多少个等级。我不希望把颜色定死，所以自己组合定义了五种配色方案：green、pink、blue、orange、gray。考虑到有改变等级和配色的需要，配置项可以自定义。\\n\\n> 总的来说，实现的思路并不难，就是实现的过程比较蛋疼。后期我打算增加一些自定义功能，然后做成根据屏幕大小来动态改变布局。有想法将它封装成npm工具，也算是我的第一个正儿八经开源小工具啦，源码我已经贴出了来，有需要一起学习的小伙伴自行clone～～笔芯\\n\\n### 五、主要代码heatMap.js\\n这就是我实现这个小工具的最核心代码：\\n\`\`\`javascript\\n/**\\n * 对Date的扩展，将 Date 转化为指定格式的String\\n * 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符，\\n * 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字)\\n * 例子：\\n * (new Date()).Format(\\"yyyy-MM-dd hh:mm:ss.S\\") ==> 2006-07-02 08:09:04.423\\n * (new Date()).Format(\\"yyyy-M-d h:m:s.S\\")      ==> 2006-7-2 8:9:4.18\\n *  @param fmt 日期格式\\n */\\nDate.prototype.format = function (fmt) {\\n  var o = {\\n      \\"M+\\": this.getMonth() + 1, //月份\\n      \\"d+\\": this.getDate(), //日\\n      \\"h+\\": this.getHours(), //小时\\n      \\"m+\\": this.getMinutes(), //分\\n      \\"s+\\": this.getSeconds(), //秒\\n      \\"q+\\": Math.floor((this.getMonth() + 3) / 3), //季度\\n      \\"S\\": this.getMilliseconds() //毫秒\\n  };\\n  if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + \\"\\").substr(4 - RegExp.$1.length));\\n  for (var k in o)\\n      if (new RegExp(\\"(\\" + k + \\")\\").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : ((\\"00\\" + o[k]).substr((\\"\\" + o[k]).length)));\\n  return fmt;\\n}\\n\\n/**\\n * 字符串转换为日期对象\\n * @param dateStr Date 格式为yyyy-MM-dd HH:mm:ss，必须按年月日时分秒的顺序，中间分隔符不限制\\n */\\nDate.prototype.strToDate = function (dateStr) {\\n  var data = dateStr\\n  var reCat = /(\\\\d{1,4})/gm\\n  var t = data.match(reCat)\\n  t[1] = t[1] - 1\\n  eval('var d = new Date(' + t.join(',') + ')')\\n  return d\\n}\\n\\n/**\\n * 获取日期列表，不传参默认当前时间为截止日期，去年的今天为起始日期\\n * @param dateStart 起始日期 格式为yyyy-MM-dd，必须按年月日的顺序，中间分隔符不限制\\n * @param dateEnd 截止日期 格式为yyyy-MM-dd，必须按年月日的顺序，中间分隔符不限制\\n */\\nDate.prototype.getDateList = function (dateStart, dateEnd) {\\n  try {\\n    var date, diff, list = {}\\n    // 缺一不可，缺任何一个都采取默认时间\\n    if (!dateStart || !dateEnd) {\\n      // 当前时间\\n      date = new Date()\\n      // 当前时间往前推一年\\n      date.setFullYear(date.getFullYear() - 1)\\n      // 如果去年的今天不是星期天的话，补充天数直到起始日期是星期天为止\\n      while (date.getDay() > 0) {\\n        date.setDate(date.getDate() - 1)\\n      }\\n      // 计算相差的天数\\n      diff = parseInt((new Date().getTime() - date.getTime()) / (1000 * 60 * 60 * 24))\\n    } else {\\n      // 转换为日期对象\\n      var start = this.strToDate(dateStart)\\n      var end = this.strToDate(dateEnd)\\n      // 补充天数直到起始日期是星期天为止\\n      while (start.getDay() > 0) {\\n        start.setDate(start.getDate() - 1)\\n      }\\n      // 计算相差的天数\\n      diff = parseInt((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))\\n      date = start\\n    }\\n    // 实际上连最后一天也要算上，所以diff加2\\n    for (i = 1; i < diff + 2; i++) {\\n      list[date.format(\\"yyyy-MM-dd\\")] = date.getDay()\\n      date.setDate(date.getDate() + 1)\\n    }\\n    return list\\n  } catch(e) {\\n    return {}\\n  }\\n}\\n\\nvar weekMap = ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\\nvar monthMap = ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月']\\nvar colorMap = {\\n  'blue': ['#003C9D', '#409EFF', '#87CEFA', '#E0FFFF', '#EBEDF0'],\\n  'pink': ['#990099', '#CC00CC', '#FF88C2', '#FFB7DD', '#EBEDF0'],\\n  'green': ['#196127', '#239A3B', '#7BC96F', '#C6E48B', '#EBEDF0'],\\n  'orange': ['#A42D00', '#CC6600', '#EE7700', '#FFAA33', '#EBEDF0'],\\n  'gray': ['#303133', '#444444', '#808080', '#C0C0C0', '#EBEDF0']\\n}\\n\\n// 合并两个object，以mainObj为基准\\nfunction matchObj(mainObj, obj) {\\n  var resultObj = {}\\n  for (var key in mainObj) {\\n    if (!obj.hasOwnProperty(key)) {\\n      resultObj[key] = mainObj[key]\\n    } else if (Object.prototype.toString.call(mainObj[key]) === '[Object Object]' && key !== 'data') {\\n      resultObj[key] = matchObj(mainObj[key], obj[key])\\n    } else {\\n      resultObj[key] = obj[key]\\n    }\\n  }\\n  return resultObj\\n}\\n\\nfunction HeatMapDate() {\\n  this.option = {\\n    type: 'date', // 类型：date-日历型，custom-自定义型\\n    xAxis: [], // 横坐标的label，type=custom起作用\\n    yAxis: [], // 纵坐标的label，type=custom起作用\\n    gap: 3, // 方格之间的间隔\\n    /* 数据\\n     * 如果type是date。那data是Object类型，格式是{ 'yyyy-MM-dd' : value }\\n     * 如果type是custom。那data是Array类型，格式是[[x, y, value], ..., [x, y, value]]\\n     */\\n    data: {},\\n    rect: {\\n      stroke: {\\n        show: false,\\n        background: '#333', // 正方形的边框颜色\\n        opacity: 0.6 // 正方形的边框透明度\\n      },\\n      colourMatching: '', //配色方案，有custom-自定义和reen、pink、blue、orange、gray五种渐变色\\n      backgroundArr: [] // 自定义配色方案，程度由重到轻\\n    },\\n    dateStart: '',\\n    dateEnd: '',\\n    min: 0, // 分级最低值，总共五个等级，不传默认值是0\\n    max: 0, // 分级最高值，总共五个等级，不传默认值是\\n    tip: { // 顶部鼠标悬浮小气泡\\n      show: true, // 是否展示\\n      /** 文本内容\\n       * type为date的时候{a}表示日期，{b}表示数值\\n       * type为custom的时候表示{x}x轴对应的值，{y}y轴对应的值，{b}表示数值\\n       * 如果在替换字符串前加反斜杠(例如/{b})，则不会替换该字符串\\n       */\\n      formatter: ''\\n    }\\n  }\\n\\n  // 初始化参数，没传的就使用默认值\\n  this.setOption = (obj) => {\\n    this.option = matchObj(this.option, obj)\\n    if (!this.option.max) {\\n      this.option.max = Object.values(obj.data).sort(function(a, b) {\\n        return b - a\\n      })[0] || 0\\n    }\\n  }\\n\\n  this.init = (dom) => {\\n    // 初始化dom的样式\\n    dom.setAttribute('style', 'width:100%;height:100%;position:relative;')\\n    // 获取父级dom的宽度\\n    var parentWidth = dom.offsetWidth\\n    // 通过createElementNS创建svg元素并设置属性\\n    var svg = document.createElementNS('http://www.w3.org/2000/svg','svg')\\n    svg.setAttribute('version', '1.1')\\n    svg.setAttribute('class', 'svg-container')\\n    dom.appendChild(svg) // 挂载元素。SVG元素添加到页面内显示\\n\\n    // 显示顶部提示小气泡\\n    if (this.option.tip.show) {\\n      // 创建tip容器并设置属性\\n      var tip = document.createElement('div')\\n      tip.setAttribute('class', 'svg-tip svg-tip-one-line')\\n      var title = document.createElement('strong')\\n      tip.appendChild(title) // 挂载到父节点上\\n      dom.appendChild(tip) // 挂载元素。挂载顶部提示气泡\\n    }\\n\\n    // 创建svg的group元素并设置属性\\n    var group = document.createElementNS('http://www.w3.org/2000/svg', 'g')\\n    var translateX = 20 // 横轴方向的偏移值\\n    var translateY = 40 // 纵轴方向的偏移值\\n    group.setAttribute('transform', 'translate(' + translateX + ',' + translateY + ')')\\n    svg.appendChild(group) // 挂载到父节点上\\n\\n    var maxYLabelFontSize = 12\\n    var labelPadding = 10\\n    var maxStrLength = 0\\n\\n    if (this.option.type === 'date') {\\n      // 获取全部天数列表\\n      var dateList = (new Date()).getDateList(this.option.dateStart, this.option.dateEnd)\\n      var columnCount = Math.ceil(Object.keys(dateList).length / 7)\\n      var size = Math.floor((parentWidth - translateX / 2 - maxYLabelFontSize * 2 - labelPadding - this.option.gap * columnCount) / columnCount)\\n      var section = size + this.option.gap\\n\\n      // 纵轴的label值，这里是星期值\\n      for (var w = 0; w < 7; w++) {\\n        //创建矩形元素并设置属性\\n        var yText = document.createElementNS('http://www.w3.org/2000/svg', 'text')\\n        yText.style.fontSize = section * 0.7 > maxYLabelFontSize ? maxYLabelFontSize : section * 0.7 // 字体大小响应，最大是12px\\n        yText.setAttribute('dx', -labelPadding)\\n        yText.setAttribute('dy', w * section + size / 2 + 4)\\n        yText.setAttribute('class', 'wday')\\n        yText.innerHTML = weekMap[w]\\n        group.appendChild(yText)\\n        if (maxStrLength < yText.getBBox().width) {\\n          maxStrLength = yText.getBBox().width\\n        }\\n      }\\n\\n      var index = 0 // 天数列表索引\\n      var column = 0 // 分组索引，完整的一周为一组\\n      for (var dateKey in dateList) {\\n        // 完整的一周为一组\\n        if (index === 0 || index % 7 === 0) {\\n          // 创建svg的group元素并设置属性，一周为一组\\n          var xGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g')\\n          // 设置偏移值\\n          xGroup.setAttribute('transform', 'translate(' + (column * section + maxStrLength) + ', 0)')\\n          group.appendChild(xGroup) // 挂载到父节点\\n          column++ // 递增组数索引\\n\\n          // 判断在哪个分组的上方增加横轴的label值，在这里是月份\\n          if (index > 0) {\\n            var startMonth = dateKey.split('-')[1]\\n            var preStartMonth = Object.keys(dateList)[index - 7].split('-')[1]\\n            \\n            if (Math.abs(Number(startMonth) - Number(preStartMonth)) > 0) {\\n              //创建text元素并设置属性\\n              var fontSize = section * 0.8 > maxYLabelFontSize ? maxYLabelFontSize : section * 0.8 // 字体大小响应，最大是14px\\n              var xText = document.createElementNS('http://www.w3.org/2000/svg', 'text')\\n              xText.style.fontSize = fontSize\\n              xText.setAttribute('x', column * section)\\n              xText.setAttribute('y', -labelPadding)\\n              xText.setAttribute('class', 'month')\\n              xText.innerHTML = monthMap[Number(startMonth) - 1]\\n              group.appendChild(xText)\\n            }\\n          }\\n        }\\n        if(this.option.data.hasOwnProperty(dateKey)) {\\n          // 开始画正方形啦~创建矩形元素并设置属性\\n          var rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect')\\n          rect.setAttribute('x', 0)\\n          rect.setAttribute('y', dateList[dateKey] * section)\\n          rect.setAttribute('id', dateKey) // 设置日期为id值\\n          rect.setAttribute('week', dateList[dateKey]) // 设置星期几属性\\n          rect.setAttribute('column', column) // 设置分组的组索引属性\\n          rect.setAttribute('width', size)\\n          rect.setAttribute('height', size)\\n\\n          color = '#fff' // 默认颜色是白色，就是啥也没有时候的颜色，以你的背景色为准 \\n          var colorSelect = ''\\n          // 选择的颜色系列\\n          if (this.option.rect.colourMatching === 'custom') {\\n            colorSelect = this.option.rect.backgroundArr\\n          } else {\\n            colorSelect = colorMap[this.option.rect.colourMatching]\\n          }\\n          // 默认绿色为基本配色方案\\n          colorSelect = colorSelect ? colorSelect : colorMap['green']\\n          // 分为五个等级，小于最小值最低等级，大于最大值最高等级。中间还应该有三个等级（可自定义）\\n          var levelGap = (this.option.max - this.option.min) / (colorSelect.length - 2)\\n          if (this.option.data.hasOwnProperty(dateKey)) {\\n            var differ = this.option.max - this.option.data[dateKey]\\n            // 小正方形的颜色决定于他的值处在哪个level里头\\n            switch(true) {\\n              case (this.option.data[dateKey] >= this.option.max) :\\n                color = colorSelect[0]\\n                break\\n              case (differ < levelGap) :\\n                color = colorSelect[1]\\n                break\\n              case (differ < levelGap * 2) :\\n                color = colorSelect[2]\\n                break\\n              case (differ < levelGap * 3) :\\n                color = colorSelect[3]\\n                break\\n              default:\\n                color = colorSelect[4]\\n            }\\n            // 设置小矩形的颜色\\n            rect.setAttribute('style', 'fill:' + color)\\n          \\n            // 显示顶部提示小气泡\\n            if (this.option.tip.show) {\\n              //矩形元素绑定鼠标事件实现动态效果\\n              // 鼠标移入\\n              rect.onmouseover = (e) => {\\n                if (this.option.rect.stroke.show) {\\n                  e.srcElement.setAttribute('stroke-width', 1)\\n                  e.srcElement.setAttribute('stroke', this.option.rect.stroke.background)\\n                  e.srcElement.setAttribute('stroke-opacity', this.option.rect.stroke.opacity)\\n                }\\n\\n\\n                // 提示小气泡的文本内容,默认==>日期：值\\n                if (this.option.tip.formatter) {\\n                  var tipText = this.option.tip.formatter.replace(/(?<!\\\\/){a}/g, e.target.id).replace(/(?<!\\\\/){b}/g, this.option.data[e.target.id])\\n                  tip.innerHTML = tipText\\n                } else {\\n                  tip.innerHTML = e.target.id + '：' + this.option.data[e.target.id]\\n                }\\n                tip.style.display = 'block'\\n                tip.style.top = (e.target.attributes.week.value * section + dom.querySelector('.svg-tip').offsetHeight / 2 - translateY / 2 - labelPadding) + 'px'\\n                tip.style.left = ((e.target.attributes.column.value - 1) * section + size / 2 + translateX / 2 + maxStrLength + labelPadding - dom.querySelector('.svg-tip').offsetWidth / 2) + 'px'\\n              }\\n              // 鼠标移出\\n              rect.onmouseout = (e) => {\\n                if (this.option.rect.stroke.show) {\\n                  e.srcElement.setAttribute('stroke-width', 0)\\n                }\\n                tip.style.display = 'none'\\n              }\\n            }\\n          }\\n          xGroup.appendChild(rect) //挂载矩形元素添加到小分组元素内\\n        }\\n        index++\\n      }\\n\\n      // 设置svg元素的宽高\\n      svg.style.width = Math.ceil(section * columnCount + translateX + maxStrLength + labelPadding)\\n      svg.style.height = section * 7 + translateY\\n    }\\n\\n    if (this.option.type === 'custom') {\\n      var size = parseInt(parentWidth / this.option.xAxis.length) - this.option.gap * this.option.xAxis.length \\n      var section = size + this.option.gap\\n      var fontSize = section * 0.7 > maxYLabelFontSize ? maxYLabelFontSize : section * 0.7 // 字体大小响应，最大是12px\\n\\n      this.option.xAxis.forEach((xItem,xIndex) => {\\n        var xGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g')\\n        group.appendChild(xGroup)\\n\\n        this.option.yAxis.forEach((yItem,yIndex) => {\\n          if (xIndex === 0) {\\n            //创建矩形元素并设置属性\\n            var yText = document.createElementNS('http://www.w3.org/2000/svg', 'text')\\n            yText.style.fontSize = fontSize\\n            yText.setAttribute('dx', -labelPadding)\\n            yText.setAttribute('dy', yIndex * section + size / 2 + 4)\\n            yText.setAttribute('class', 'wday')\\n            yText.innerHTML = yItem\\n            group.appendChild(yText)\\n            if (maxStrLength < yText.getBBox().width) {\\n              maxStrLength = yText.getBBox().width\\n            }\\n          }\\n\\n          this.option.data.some((elem, i) => {\\n            if (elem[0] === xIndex && elem[1] === yIndex) {\\n              color = 'rgb(255, 255, 255)' // 默认颜色是白色，就是啥也没有时候的颜色，以你的背景色为准 \\n              var colorSelect = ''\\n              // 选择的颜色系列\\n              if (this.option.rect.colourMatching === 'custom') {\\n                colorSelect = this.option.rect.backgroundArr\\n              } else {\\n                colorSelect = colorMap[this.option.rect.colourMatching]\\n              }\\n              // 默认绿色为基本配色方案\\n              colorSelect = colorSelect ? colorSelect : colorMap['green']\\n              // 分为五个等级，小于最小值最低等级，大于最大值最高等级。中间还应该有三个等级（可自定义）\\n              var levelGap = (this.option.max - this.option.min) / (colorSelect.length - 2)\\n              var differ = this.option.max - elem[2]\\n              // 小正方形的颜色决定于他的值处在哪个level里头\\n              switch(true) {\\n                case (elem[2] >= this.option.max) :\\n                  color = colorSelect[0]\\n                  break\\n                case (differ < levelGap) :\\n                  color = colorSelect[1]\\n                  break\\n                case (differ < levelGap * 2) :\\n                  color = colorSelect[2]\\n                  break\\n                case (differ < levelGap * 3) :\\n                  color = colorSelect[3]\\n                  break\\n                default:\\n                  color = colorSelect[4]\\n              }\\n\\n              //创建矩形元素并设置属性\\n              var rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect')\\n              rect.setAttribute('x', 0)\\n              rect.setAttribute('y', elem[1] * section)\\n              rect.setAttribute('id', elem[0] + '_' + elem[1]) // 设置日期为id值\\n              rect.setAttribute('row', yIndex)\\n              rect.setAttribute('column', xIndex)\\n              rect.setAttribute('width', size)\\n              rect.setAttribute('height', size)\\n              rect.setAttribute('style', 'fill:' + color)\\n\\n              // 显示顶部提示小气泡\\n              if (this.option.tip.show) {\\n                //矩形元素绑定鼠标事件实现动态效果\\n                // 鼠标移入\\n                rect.onmouseover = (e) => {\\n                  if (this.option.rect.stroke.show) {\\n                    e.srcElement.setAttribute('stroke-width', 1)\\n                    e.srcElement.setAttribute('stroke', this.option.rect.stroke.background)\\n                    e.srcElement.setAttribute('stroke-opacity', this.option.rect.stroke.opacity)\\n                  }\\n\\n                  var xyArr = e.target.id.split('_')\\n                  // 提示小气泡的文本内容,默认==>x_y：值\\n                  if (this.option.tip.formatter) {\\n                    var tipText = this.option.tip.formatter.replace(/(?<!\\\\/){x}/g, this.option.xAxis[xyArr[0]]).replace(/(?<!\\\\/){y}/g, this.option.yAxis[xyArr[1]]).replace(/(?<!\\\\/){b}/g, elem[2])\\n                    tip.innerHTML = tipText\\n                  } else {\\n                    tip.innerHTML = e.target.id + '：' + elem[2]\\n                  }\\n                  tip.style.display = 'block'\\n                  tip.style.top = (e.target.attributes.row.value * section + dom.querySelector('.svg-tip').offsetHeight / 2 - translateY / 2 - labelPadding) + 'px'\\n                  tip.style.left = (e.target.attributes.column.value * section + size / 2 + translateX / 2 + maxStrLength + labelPadding - dom.querySelector('.svg-tip').offsetWidth / 2) + 'px'\\n                }\\n                // 鼠标移出\\n                rect.onmouseout = (e) => {\\n                  if (this.option.rect.stroke.show) {\\n                    e.srcElement.setAttribute('stroke-width', 0)\\n                  }\\n                  tip.style.display = 'none'\\n                }\\n              }\\n              //将矩形元素添加到SVG元素内\\n              xGroup.appendChild(rect)\\n              return true\\n            } else {\\n              return false\\n            }\\n          })\\n        })\\n\\n        xGroup.setAttribute('transform', 'translate(' + (xIndex * section + maxStrLength) + ', 0)')\\n        \\n        //创建text元素并设置属性\\n        var xText = document.createElementNS('http://www.w3.org/2000/svg', 'text')\\n        xText.style.fontSize = fontSize\\n        xText.setAttribute('x', xIndex * section + maxStrLength)\\n        xText.setAttribute('y', -labelPadding)\\n        xText.setAttribute('class', 'month')\\n        xText.innerHTML = xItem\\n        group.appendChild(xText)\\n        xText.setAttribute('textLength', size < xText.getBBox().width ? size : xText.getBBox().width)\\n      })\\n      // 设置svg元素的宽高\\n      svg.style.width = section * this.option.xAxis.length + translateX / 2 + labelPadding + maxStrLength\\n      svg.style.height = section * this.option.yAxis.length + translateY\\n    }\\n  }\\n}\\n\`\`\`\\n","tagIds":"4,11,10","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":67,"type":1,"groupTimestamp":"1557868875843","cover":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/2/16cede10db34c836~tplv-t2oaga2asx-jj:216:144:0:0:q75.avis","categoryId":1,"created_at":"2023-11-22T21:22:31.000Z","updated_at":"2023-11-23T08:58:08.000Z","tagList":[{"id":4,"name":"CSS"},{"id":10,"name":"HTML"},{"id":11,"name":"JavaScript"}],"createDate":"2019-05-15"}`,gn='{"id":33,"title":"用Vue-Awesome-Swiper实现旋转叠加轮播效果&平移轮播效果","subTitle":"","link":null,"description":"","content":"## 实现效果\\n- 旋转叠加\\n![旋转叠加效果](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/14/16c9054325ebe84c~tplv-t2oaga2asx-image.image)\\n\\n- 平移\\n![旋转叠加效果效果](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/14/16c9054900fd93ac~tplv-t2oaga2asx-image.image)\\n\\n> 前段时间做Hybrid App，UI设计湿要求某一个页面的展示要实现滑动轮播效果，选中的内容卡片居中显示，上一个内容卡片和下一个内容以小一倍的大小显示在选中的卡片后头，而且要高斯模糊等等。。最骚的是滑动特效要是一个个旋转叠加。（摔！\\n\\n> 当时用的是vue-cli-3 + ant-design-vue实现的页面，发现ant-design-vue里头有现成的Carousel组件可用，由于排期比较急，先暂时用这个实现了第一版，没有特效没有其他花里胡哨的展示。验收完第一版后，发现ant-design-vue的坑是真的多啊。。Carousel在移动端也是十分的不流畅。总是就是体验特别的不好。最后一气之下，全部样式自己写，全部组件自己封装，将ant-design-vue完完整整移出了项目。\\n\\n> 轮播图这块想到了Swiper这一好东西，现在已经有了vue版，但是是没有专门的vue版文档的，可以找到的项目也比较少。无奈之下啃了Swiper4文档，一顿猛操作，摸到了一点点门道。把需求实现了是也。简单整理了一下，写了个简单的小demo，记录一下，如果可以帮到你那是最好啦~\\n\\n#### 1.首先引入Vue-Awesome-Swiper\\n引入Vue-Awesome-Swiper有两种方式，一种是全局引入，一种是组件内引入。如果你的项目里只有一个地方要用到这玩意，那就在用到的那个页面引入就行，如果多个地方要用到，那就全局引入吧。\\n\\n- 全局引入：\\n```js\\n// main.js\\nimport VueAwesomeSwiper from \'vue-awesome-swiper\'\\nimport \'swiper/dist/css/swiper.css\'\\n\\nVue.use(VueAwesomeSwiper, /* { default global options } */)\\n```\\n\\n- 组件内引入：\\n```js\\n// xxx.vue\\n<script>\\nimport \'swiper/dist/css/swiper.css\'\\nimport { swiper, swiperSlide } from \'vue-awesome-swiper\'\\n\\nexport default {\\n  components: {\\n    swiper,\\n    swiperSlide\\n  }\\n}\\n<\/script>\\n```\\n\\n\\n#### 2.在页面使用\\n```js\\n<template>\\n  <div class=\\"swiper-content\\">\\n    <swiper ref=\\"mySwiper\\" :options=\\"swiperOption\\" class=\\"show-swiper\\">\\n      <template v-for=\\"(item, index) in list\\">\\n        <swiper-slide :key=\\"index\\">\\n          <div class=\\"swiper-item\\">\\n            <span>{{ item }}</span>\\n          </div>\\n        </swiper-slide>\\n      </template>\\n    </swiper>\\n  </div>\\n</template>\\n```\\n> js部分\\n- 旋转叠加\\n\\n```js\\n<script>\\nimport { mapState } from \'vuex\'\\nimport store from \'@/store\'\\nexport default {\\n  data() {\\n    return {\\n      list: [1, 2, 3, 4, 5, 6],\\n      swiperOption: {\\n        // 设置slider容器能够同时显示的slides数量，默认为1， \'auto\'则自动根据slides的宽度来设定数量\\n        slidesPerView: \'auto\',\\n        /*\\n        * 开启这个参数来计算每个slide的progress(进度、进程)\\n        * 对于slide的progress属性，活动的那个为0，其他的依次减1\\n        */\\n        watchSlidesProgress: true,\\n        // 默认active slide居左，设置为true后居中\\n        centeredSlides: true,\\n        // 当你创建一个Swiper实例时是否立即初始化，这里我们手动初始化\\n        init: false,\\n        longSwipesRatio: 0.1,\\n        touchReleaseOnEdges: true,\\n        observer: true, // 修改swiper自己或子元素时，自动初始化swiper\\n        observeParents: true, // 修改swiper的父元素时，自动初始化swiper\\n        on: {\\n          progress: function() {\\n            for (let i = 0; i < this.slides.length; i++) {\\n              const slide = this.slides.eq(i) // 指定匹配元素集缩减值\\n              const slideProgress = this.slides[i].progress // 当前元素集的progress值\\n\\n              let modify = 0 // 偏移权重\\n              if (parseInt(Math.abs(slideProgress)) > 0) {\\n                modify = Math.abs(slideProgress) * 0.2 // 不一定要0.2，可自行调整\\n              }\\n              const translate = slideProgress * modify * 500 + \'px\' // 500是swiper-slide的宽度\\n              const scale = 1 - Math.abs(slideProgress) / 5 // 缩放权重值，随着progress由中向两边依次递减，可自行调整\\n              const zIndex = 99 - Math.abs(Math.round(10 * slideProgress))\\n              slide.transform(`translateX(${translate}) scale(${scale})`)\\n              slide.css(\'zIndex\', zIndex)\\n              slide.css(\'opacity\', 1) // 是否可见\\n              if (parseInt(Math.abs(slideProgress)) > 1) { // 设置了只有选中的元素以及他两遍的显示，其他隐藏\\n                slide.css(\'opacity\', 0)\\n              }\\n            }\\n          },\\n          slideChange: function() {\\n            store.commit(\'SET_ACTIVE_INDEX\', this.activeIndex)\\n          }\\n        }\\n      }\\n    }\\n  },\\n  computed: {\\n    swiper() {\\n      return this.$refs.mySwiper.swiper\\n    },\\n    ...mapState({\\n      activeItemIndex: state => state.activeIndex\\n    })\\n  },\\n  mounted() {\\n    this.initSwiper()\\n  },\\n  methods: {\\n    initSwiper() {\\n      this.$nextTick(async() => {\\n        await this.swiper.init() // 现在才初始化\\n        await this.swiper.slideTo(this.activeItemIndex)\\n      })\\n    }\\n  }\\n}\\n<\/script>\\n```\\n\\n\\n- 平移\\n\\n```js\\n<script>\\nimport { mapState } from \'vuex\'\\nimport store from \'@/store\'\\nexport default {\\n  data() {\\n    return {\\n      list: [1, 2, 3, 4, 5, 6],\\n      swiperOption: {\\n        slidesPerView: \'auto\',\\n        watchSlidesProgress: true,\\n        // 设定slide与左边框的预设偏移量（单位px）\\n        slidesOffsetBefore: 37,\\n        // 设置slide之间的距离（单位px）\\n        spaceBetween: 17,\\n        centeredSlides: true,\\n        init: false,\\n        longSwipesRatio: 0.1,\\n        touchReleaseOnEdges: true,\\n        observer: true, // 修改swiper自己或子元素时，自动初始化swiper\\n        observeParents: true, // 修改swiper的父元素时，自动初始化swiper\\n        on: {\\n          progress: function() {\\n            for (let i = 0; i < this.slides.length; i++) {\\n              const slide = this.slides.eq(i)\\n              const slideProgress = this.slides[i].progress\\n\\n              const scale = 1 - Math.abs(slideProgress) / 5 // 缩放权重值，随着progress由中向两边依次递减，可自行调整\\n              slide.transform(`scale3d(${scale}, ${scale}, 1)`)\\n            }\\n          },\\n          slideChange: function() {\\n            store.commit(\'SET_ACTIVE_INDEX\', this.activeIndex)\\n          }\\n        }\\n      }\\n    }\\n  },\\n  computed: {\\n    swiper() {\\n      return this.$refs.mySwiper.swiper\\n    },\\n    ...mapState({\\n      activeItemIndex: state => state.activeIndex\\n    })\\n  },\\n  mounted() {\\n    this.initSwiper()\\n  },\\n  methods: {\\n    initSwiper() {\\n      this.$nextTick(async() => {\\n        await this.swiper.init() // 现在才初始化\\n        await this.swiper.slideTo(this.activeItemIndex)\\n      })\\n    }\\n  }\\n}\\n<\/script>\\n```\\n\\n配置参数那里，init我是设置的false，我是想在项目挂载完成后，获取到了接口数据之后，再用```this.swiper.init() ```去初始化轮播组件的，然后我把激活项的索引存在了vuex里头，这样每次从其他页面返回这个页面，就可以用```this.swiper.slideTo(this.activeItemIndex)```去控制我要定位到哪一个内容卡片先。\\n\\n\\n#### 3.样式初始化方面\\n```css\\n.swiper-content {\\n  width: 100%;\\n  height: 100%;\\n  position: relative;\\n  overflow: hidden;\\n  margin: 0 auto;\\n  padding: 50px 0;\\n\\n  .show-swiper {\\n    width: 100%;\\n    height: 100%;\\n    top: 0;\\n    left: 0;\\n\\n    .swiper-slide {\\n      width: 500px;\\n      // 表示所有属性都有动作效果，过度时间为0.4s，以慢速开始和结束的过渡效果\\n      transition: all .4s cubic-bezier(.4, 0, .2, 1);\\n      \\n      .swiper-item {\\n        width: 100%;\\n        height: 500px;\\n        background: rgb(140, 172, 134);\\n        border-radius: 6px;\\n        color: orangered;\\n        font-size: 24px;\\n        line-height: 1.5;\\n        border: 1px solid orangered;\\n      }\\n    }\\n  }\\n}\\n```\\n因为```slidesPerView: \'auto\'```，所以swiper-slide我们要给他一个初始化的宽度，以便他自动计算容器宽度，然后这里我设置了动画的效果```transition: all .4s cubic-bezier(.4, 0, .2, 1);```可以根据自己的需要作出改动\\n\\n\\n> 大概就是这些内容，是不是很简单呢。我会把源码地址贴出来，有需要的话就自行clone参考吧~，项目里我使用的是vue-cli3，可以自行调整。\\n\\n- [基于Vue-Awesome-Swiper + vue-cli3实现的滑动轮播项目，有旋转叠加和平移两个效果](https://github.com/ccccai/vue-swiper-demo)","tagIds":"4,5,6,7,11,10,12","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":66,"type":1,"groupTimestamp":"1574804027589","cover":"https://static.turbosquid.com/Preview/2014/07/11__13_44_26/5.jpg3269969f-c6d9-4ffe-9a64-37330f9ceb79DefaultHQ.jpg","categoryId":1,"created_at":"2023-11-22T21:34:23.000Z","updated_at":"2023-11-22T21:35:32.000Z","tagList":[{"id":4,"name":"CSS"},{"id":5,"name":"ECMAScript"},{"id":6,"name":"Git"},{"id":7,"name":"LESS"},{"id":10,"name":"HTML"},{"id":11,"name":"JavaScript"},{"id":12,"name":"ES6"}],"createDate":"2019-11-27"}',fn='{"id":12,"title":"macOS安装PHP+MySQL+Nginx+Composer环境","subTitle":"生产力工具配置","link":null,"description":"斥巨资新买了电脑，记录一下配置过程~~开心心~~","content":"> 注意：不要去删除系统自带的Apache 和php 我开始就删除了系统自带的Apache，导致后面php一直无法安装成功，重装了Apache后才弄好，所以建议不要轻易删除系统自带的Apache和php，高手另说。\\n\\n\\n## 一、安装 homebrew\\nhomebrew是mac系统下特别好用的一个软件包工具，而且它的安装也是极为简单。\\n\\n网上有很多人直接给出了homebrew的安装命令，但是大部分的地址已经失效。在homebrew网站上 http://brew.sh/ ，正中间就是homebrew的安装命令，直接复制到你的终端里执行就可以了。\\n\\n``` bash\\n/usr/bin/ruby -e \\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\\"\\n```\\n\\nhomebrew安装完成了，我们再用brew来安装Nginx，有了brew后，安装就变得很简单了，不需要自己去make之类的。\\n\\n## 二、安装 MySql\\n\\n``` bash\\nbrew install mysql\\n```\\n\\n也是一句命令搞定，等执行完后，mysql也安装完毕，接下来就是对mysql的一些配置\\n\\n### 1、先cd到mysql的目录中\\n\\n``` bash\\ncd /usr/local/opt/mysql/\\n```\\n\\n### 2、加入launchctl启动控制\\n\\n``` bash\\nmkdir -p ~/Library/LaunchAgents/\\n\\ncp /usr/local/opt/mysql/homebrew.mxcl.mysql.plist ~/Library/LaunchAgents/\\n\\nlaunchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist\\n\\n#取消启动的命令\\nlaunchctl unload ~/Library/LaunchAgents/homebrew.mxcl.mysql.plis\\n```\\n\\n### 3、执行安全设置脚本,设置root账号密码,如果不执行这一步，是无法用`mysql -u root -p`这个命令登录mysql的\\n\\n``` bash\\n./bin/mysql_secure_installation\\n```\\n\\n执行上面的命令后，会进入mysql的配置,可以用`mysql -u root -p`来登录mysql\\n\\n> **注意：在navicat premium 12 & Mysql 8.0.11下连接报错**\\n\\n使用Navicat 12远程连接Mysql 8.0.11时会提示如下报错信息，从错误信息可知`caching_sha2_password`不能加载。\\n\\n```bash\\n2059 - Authentication plugin \'caching_sha2_password\' cannot be loaded\\n```\\n\\n以上报错是由于目前已有的客户端连接软件还不支持Mysql8新增加的加密方式`caching_sha2_password`，所以我们需要修改用户的加密方式，将其改为老的加密验证方式:\\n\\n- 1） 在安装Mysql数据库的主机上登录Mysql对应的用户，上面连接时用的用户为root，所以我们登录root用户。\\n\\n- 2）执行命令，查看当前用户的加密方式\\n\\n``` bash\\nuse mysql;\\n\\nselect user,plugin from user where user=\'root\';\\n# 可以看到当前用户的加密方式为caching_sha2_password\\n```\\n\\n- 3）执行命令，将用户的加密方式改为`mysql_native_password`\\n\\n``` bash\\nalter user \'root\'@\'localhost\' identified with mysql_native_password by \'password\';\\n```\\n\\n- 4）执行命令`flush privileges`使权限配置项立即生效。\\n\\n\\n## 三、安装nginx\\n\\n``` bash\\nbrew install nginx\\n```\\n\\n### 1、配置nginx\\n\\n#### 1-1 给nginx 设置管理员权限：如果不设置管理员权限，80端口是不能监听的\\n\\n``` bash\\n#这里的目录根据你实际安装的目录来填写，默认是这个目录，不同的只是nginx的版本号而已\\nsudo chown root:wheel /usr/local/Cellar/nginx/1.10.1/bin/nginx    \\nsudo chmod u+s /usr/local/Cellar/nginx/1.10.1/bin/nginx\\n```\\n\\n#### 1-2 加入launchctl启动控制\\n\\n``` bash\\nmkdir -p ~/Library/LaunchAgents\\ncp /usr/local/opt/nginx/homebrew.mxcl.nginx.plist ~/Library/LaunchAgents/\\nlaunchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist\\n```\\n\\n#### 1-3 到这里，nginx基本上是完工了。运行nginx ：\\n\\n``` bash\\nsudo nginx #打开 nginx\\nnginx -s reload|reopen|stop|quit  #重新加载配置|重启|停止|退出 nginx\\nnginx -t   #测试配置是否有语法错误\\n```\\n\\nOK, nginx就安装好了，可以在浏览器访问了，默认端口为8080，在浏览器输入 `http://localhost:8080/` 就能看到nginx在本计算机搭建的服务器\\n\\n![nginx安装成功](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/15/16c9411b97ff4bbd~tplv-t2oaga2asx-image.image)\\n\\n8080是nginx自带的默认网站设置的端口，现在我们自己来创建一个网站，设置端口和映射路径\\n\\n### 2、自定义网站端口\\n\\n#### 2-1 执行`vim /usr/local/etc/nginx/nginx.conf` 修改nginx 的配置文件，在最后一行加入：\\n\\n``` bash\\ninclude conf.d/*.conf;\\n```\\n\\n#### 2-2 新建相关文件：\\n\\n``` bash\\n# 新建文件夹\\nmkdir /usr/local/etc/nginx/conf.d\\n\\n# 新建文件\\ntouch /usr/local/etc/nginx/conf.d/test.conf\\nvim /usr/local/etc/nginx/conf.d/test.conf\\n```\\n\\n#### 2-3 .conf文件示例\\n\\n```nginx\\nserver {\\n    listen       80;\\n    server_name  www.test.com;\\n\\n    location / {\\n        try_files $uri $uri/ /index.php$is_args$query_string;\\n    \\troot \\"/Users/caishiyin/Sites/huiyu/test\\";\\n    \\tindex index.html index.htm index.php;\\n    }\\n\\n\\n    error_page   500 502 503 504  /50x.html;\\n    location = /50x.html {\\n        root   html;\\n    }\\n\\n    location ~ \\\\.php$ {\\n\\troot           \\"/Users/caishiyin/Sites/huiyu/test\\";\\n        fastcgi_pass   127.0.0.1:9000;\\n        fastcgi_index  indx.php;\\n        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\\n        include        fastcgi_params;\\n    }\\n\\n    location ~ /\\\\.ht {\\n        deny all;\\n    }\\n\\n}\\n```\\n\\n#### 2-4. 绑定自定义域名`sudo vim /etc/hosts`，在文件最后加入一行`127.0.0.1    nginx中配置的域名`\\n\\n## 四、安装php\\n\\n### 1、用homebrew安装php\\n\\nphp 的安装相对nginx和mysql来说，要复杂点，因为brew 默认没有php的包\\n\\n``` bash\\nbrew tap homebrew/dupes\\nbrew tap josegonzalez/homebrew-php\\n\\n# 这里执行brew tap homebrew/dupes会报错，可执行：\\ngit -C \\"$(brew --repo homebrew/core)\\" fetch --unshallow\\n```\\n\\n执行完上面命令后，这个时候才可以安装php,不过php有很多的版本,你可以用：`brew search php` 来查看具体的版本。这里安装7.1版本\\n``` bash\\nbrew install php71 --with-imap --with-tidy --with-debug --with-mysql --with-fpm\\n```\\n\\n### 2、php的配置\\n\\n安装成功后，就是对php的配置了，因为mac默认是自带php的，所以我们要把我们安装的php加到环境变量里，而不是继续使用mac自带的php\\n\\n``` bash\\nsudo vim ~/.bash_profile\\n# 在这个文件最后添加下列语句：\\nexport PATH=\\"$(brew --prefix php56)/bin:$PATH\\"\\n# 保存文件后，source下这个文件，使刚刚添加的环境变量生效\\nsource ~/.bash_profile\\n```\\n\\n这个时候，你在命令行里执行 php -v 看到的不再是系统自带的php了，而是我们刚刚安装的php\\n\\n### 3、加入launchctl启动控制\\n\\n``` bash\\nbashmkdir -p ~/Library/LaunchAgents\\ncp /usr/local/opt/php@7.1/homebrew.mxcl.php@7.1.plist ~/Library/LaunchAgents/\\nlaunchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php@7.1.plist\\n```\\n\\n以上，php安装完毕\\n\\n### 4、php配置文件的存放路径\\n\\n```bash\\n/usr/local/etc/php/7.1/php.ini\\n/usr/local/etc/php/7.1/php-fpm.conf\\n\\n# 修改php-fpm端口：\\nvim /usr/local/etc/php/7.1/php-fpm.d/www.conf\\n```\\n\\n## 五、安装composer\\n\\n### 1、全局安装 运行命令行\\n\\n``` bash\\ncurl -sS https://getcomposer.org/installer | php \\n```\\n\\n### 2、移动安装包到/usr/local/bin\\n\\n``` bash\\nmv composer.phar /usr/local/bin/composer\\n```\\n\\nover.","tagIds":"26,27,20,19","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":1,"type":1,"groupTimestamp":"1544191936520","cover":"https://www.pp3.cn/uploads/201406/54545121522.jpg","categoryId":2,"created_at":"2023-11-06T14:15:49.000Z","updated_at":"2023-11-10T14:50:04.000Z","tagList":[{"id":19,"name":"Mysql"},{"id":20,"name":"PHP"},{"id":26,"name":"Nginx"},{"id":27,"name":"Linux"}],"createDate":"2018-12-07"}',hn='{"id":30,"title":"win10+iis+phpStudy配置php开发环境","subTitle":"","link":null,"description":"没错，不要Apache也不要Nginx，今天咱用win自带的iis来起本地服务~！","content":"### 1. 安排phpStudy。\\n主要是我懒得自己装php惹，如果你很勤奋很有干劲，可以自己装一下php的集成环境的哈，我这里就“傻瓜”一下了，装个phpStudy万事大吉~~\\n#### 1) 上 [phpstudy官网](https://www.xp.cn/) 下载安装包，解压安装。\\n#### 2) 打开phpstudy，切换版本，选择php7.0.12-nts+IIS7/8。(自行选择php版本)\\n```! \\n切换版本后，可能你的mysql启不起来，这就是另一个复杂的问题了，可自行定位问题，这里不做过多解释 。\\n```\\n\\n### 2. 打开iis管理器，看到左侧导航栏，定位到“网站”目录下。\\n\\n### 3. 在“网站”处右击，选择添加网站，将相应信息填写完整，如下图所示：\\n\\n![1](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c99297dd1475bb~tplv-t2oaga2asx-image.image)\\n\\n### 4. 配置好默认文档（index.php、index.html、index.htm，优先顺序自定义）,其它的可以删除。\\n\\n![2](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c992a19199736d~tplv-t2oaga2asx-image.image)\\n\\n![3](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c992af209a67f9~tplv-t2oaga2asx-image.image)\\n\\n### 5. 添加php映射，选择“处理程序映射” --> “添加模块映射”\\n\\n![4](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c992b99dd266b7~tplv-t2oaga2asx-image.image)\\n\\n![5](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c992c017a0dafb~tplv-t2oaga2asx-image.image)\\n\\n### 6. 填写模块信息，如下图，注意，请求路径*.php的*不能少。选择可执行文件，即你相应php版本目录下的php-cgi.exe\\n\\n![6](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c992c81ec6b4a9~tplv-t2oaga2asx-image.image)\\n\\n### 7. 填写好名称，然后还要配置请求限制，如图所示，选择“文件或文件夹”，然后一路确定。\\n\\n![7](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c992d1fc24b60a~tplv-t2oaga2asx-image.image)\\n\\n\\n![8](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c992d548a8c03a~tplv-t2oaga2asx-image.image)\\n\\n### 8. 确定后，映射模块列表里有你添加的信息，说明添加模块成功。\\n\\n![9](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c992dd95f47243~tplv-t2oaga2asx-image.image)\\n\\n### 9. 重启iis。在浏览器输入访问地址即可访问网站。","tagIds":"20,28,29,26","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":34,"type":1,"groupTimestamp":"1545859720960","cover":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c99305af289823~tplv-t2oaga2asx-jj:216:144:0:0:q75.avis","categoryId":2,"created_at":"2023-11-22T21:30:00.000Z","updated_at":"2023-11-22T21:49:09.000Z","tagList":[{"id":20,"name":"PHP"},{"id":26,"name":"Nginx"},{"id":28,"name":"Apache"},{"id":29,"name":"PhpStudy"}],"createDate":"2018-12-27"}',bn=`{"id":31,"title":"在vue中使用地图之vue-cli异步引入高德地图","subTitle":"","link":null,"description":"","content":"先上效果图：\\n\\n![高德地图组件](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c990b01caa773d~tplv-t2oaga2asx-image.image)\\n\\n>后台那边会给我返回需要展示的地点的信息，包括地名和经纬度。我的任务就是需要把这些地点都显示到地图上，然后点击表格里的地名，地图会相对应放大定位到该地点为中心的位置。然后地图是可以通过滚轮放大缩小滴。废话不多说，来看看要怎么整。\\n\\n### 1.引入高德cdn。\\n我是通过异步加载js的方式去引入的，没有使用依赖包。在你自己的工具类目录下，创建js异步加载文件。\\n我放在了assets目录下。\\n\`\`\`javascript\\n/* AMap.js\\n * 异步加载的高德地图插件\\n */\\n export default function MapLoader() {\\n    if (window.AMap) { // 已经加载成功，不重复加载\\n        return new Promise((resolve) => {\\n            resolve(window.AMap)\\n        })\\n    }\\n    const loadMaps = new Promise((resolve, reject) => {\\n        let mapsScript = document.createElement(\\"script\\")\\n        mapsScript.type = \\"text/javascript\\"\\n        mapsScript.src = \\"//webapi.amap.com/maps?v=1.4.6&key=xxx&callback=init\\" // key的值记得修改补充一下\\n        mapsScript.onerror = reject('fail') // 引入失败\\n        mapScript.onload = () => {\\n            resolve(AMap)\\n        }\\n        document.head.appendChild(mapsScript)\\n    })\\n    const loadMapsUI = new Promise((resolve, reject) => {\\n        let uiScript = document.createElement(\\"script\\")\\n        uiScript.type = \\"text/javascript\\"\\n        uiScript.src = \\"//webapi.amap.com/ui/1.0/main-async.js\\"\\n        uiScript.onerror = reject('fail') // 引入失败\\n        uiScript.onload = () => {\\n          resolve('success')\\n        }\\n        document.head.appendChild(uiScript)\\n    })\\n    return Promise.all([loadMaps, loadMapsUI]).then((res) => {\\n        return res[0]\\n    }).catch(e => {\\n        console.log(e)\\n    })\\n    // promise.all中的then的成功回调返回res是一个数组，分别代表loadMaps和loadMapsUI的结果，这里只返回p1的结果（map对象）就ok\\n}\\n\`\`\`\\n\\n### 2. 层级地图组件\\n高德地图引入后，就可以开始我们的表演了，定义一个地图组件，哪里需要用到就引入组件就可。这项目里我用了elementUI。\\n\`\`\`js\\n<!-- Amap.vue层级地图组件 -->\\n<template>\\n    <div v-loading=\\"mapLoading\\" class=\\"amap-container\\">\\n        <div ref=\\"amapContent\\" style=\\"min-width: 310px; height: 600px; margin: 0 auto\\"></div>\\n    </div>\\n</template>\\n<script>\\nimport MapLoader from '@/assets/AMap/AMap.js'\\nexport default {\\n    props: {\\n        markers: { // 地图上的坐标点\\n            type: Array,\\n            default: () => {\\n                return []\\n            }\\n        },\\n        center: { // 地图中心坐标\\n            type: String,\\n            default: ''\\n        },\\n        containerIdName: { // 定义的地图容器的id名字\\n            type: String,\\n            default: ''\\n        }\\n    },\\n    data() {\\n        return {\\n           map: null, // 定义地图实例\\n           mapLoading: false\\n        }\\n    },\\n    watch: {\\n        // 如果地图中心坐标点发生改变，重新定位\\n        center(newData, oldData) {\\n            if (newData !== oldData) {\\n                document.getElementById(this.containerName).scrollIntoView()\\n                this.map.setZoomAndCenter(18, newData)\\n            }\\n        },\\n        // 如果地图标记点发生改变，重绘地图\\n        markers(newData, oldData) {\\n            if (newData !== oldData) {\\n                this.createMap()\\n            }\\n        }\\n    },\\n    mounted() {\\n        this.createMap()\\n    },\\n    methods: {\\n        async createMap() {\\n            // 初始化Map\\n            await MapLoader().then(async AMap => {\\n                console.log('地图加载成功')\\n                 // 初始化地图\\n                await (this.map = new AMap.Map(this.containerName, {\\n                    center: this.center,\\n                    resizeEnable: true,\\n                    zoom: 15\\n                 }))\\n                if (!window.AMapUI) { // 如果还没有初始化\\n                    await initAMapUI() // 这里调用initAMapUI初始化\\n                }\\n                await this.addMarkers() // 增加点坐标\\n                this.mapLoading = false\\n            }).catch(err => {\\n                console.log('地图加载失败', err)\\n                this.$message({\\n                    message: '地图加载失败',\\n                    type: 'error',\\n                    duration: 3000\\n                 })\\n            })\\n            // 加载工具栏\\n            await AMap.plugin(['AMap.ToolBar'], () => {\\n                const toolbar = new AMap.ToolBar()\\n                this.map.addControl(toolbar)\\n            })\\n        },\\n        // 初始化标注点\\n        addMarkers() {\\n            AMapUI.loadUI(['overlay/SimpleMarker'], SimpleMarker => {\\n                this.markers.forEach((item, index) => {\\n                  new SimpleMarker({\\n                    // 设置节点属性\\n                    iconLabel: {\\n                      // 普通文本\\n                      innerHTML: \`\${index + 1}\`,\\n                      // 设置样式\\n                      style: {\\n                        color: '#fff',\\n                        fontSize: '120%',\\n                        marginTop: '2px'\\n                      }\\n                    },\\n                    iconStyle: 'blue',\\n                    map: this.map,\\n                    position: [item.lon, item.lat] // 标注点的经纬度\\n                  })\\n                })\\n            })\\n        }\\n    }\\n}\\n<\/script>\\n\`\`\`\\n\\n### 3. 在页面中运用地图组件\\n\`\`\`js\\n<template>\\n    <div v-loading=\\"loading\\" class=\\"page\\">\\n        <el-table :data=\\"tableData.data\\" border >\\n            <template v-for=\\"(item,index) in tableData.header\\">\\n              <el-table-column\\n                v-if=\\"index == 'addressDetail'\\"\\n                :key=\\"index\\"\\n                :label=\\"item\\"\\n                align=\\"center\\"\\n                min-width=\\"110px\\"\\n              >\\n                <template slot-scope=\\"scope\\">\\n                  <a\\n                    style=\\"color:#00a4ff\\"\\n                    @click=\\"changeCenter(scope.$index)\\"\\n                  >{{ scope.row.addressDetail }}</a>\\n                </template>\\n              </el-table-column>\\n              <el-table-column\\n                v-else\\n                :key=\\"index\\"\\n                :label=\\"item\\"\\n                :min-width=\\"index == 'count' ? 50 : 110\\"\\n                :prop=\\"index\\"\\n                align=\\"center\\"\\n                show-overflow-tooltip\\n              />\\n            </template>\\n        </el-table>\\n        <pagination v-if=\\"tableData.data\\" :pager=\\"pager\\" @search=\\"getAddressData\\"/>\\n        <amap\\n            v-if=\\"tableData.data\\"\\n            :center=\\"mapCenter\\"\\n            :markers=\\"mapMarkers\\"\\n            container-id-name=\\"amapLL\\"\\n            style=\\"margin: 20px 0 40px\\"\\n          />\\n    </div>\\n</template>\\n<script>\\nimport amap from '@/components/AMap/Amap'\\nimport pagination from '@/components/Pagination/Pagination'\\nexport default {\\n    components: {\\n        pagination,\\n        amap\\n    },\\n    data() {\\n        return {\\n            // 分页跟表格\\n            pager: {\\n                pageSize: 10,\\n                currentPage: 1,\\n                totalPage: 1\\n            },\\n            loading: false,\\n            // 返回的数据\\n            tableData: [],\\n            mapCenter: [],\\n            mapMarkers: []\\n        }\\n    },\\n    mounted() {\\n        this.getAddressData()\\n    },\\n    methods: {\\n        // 获取页面数据，请求后台接口，这里先定义假数据\\n        getAddressData() {\\n            this.loading = true\\n            const resData = {\\n                data: {\\n                    list: [\\n                        {\\n                            addressDetail: \\"吉林省长春市宽城区站前街道西广南区\\",\\n                            resortCount: \\"3\\",\\n                            resortSum： \\"22\\"\\n                        },\\n                        {\\n                            addressDetail: \\"吉林省长春市宽城区站前街道嫩江路282号西广南区\\",\\n                            resortCount: \\"55\\",\\n                            resortSum： \\"22\\"\\n                        }\\n                    ],\\n                    pageNum: 0,\\n                    pageSize: 0,\\n                    total: 0\\n                },\\n                header: {\\n                    addressDetail: \\"位置\\",\\n                    resortCount: \\"到过人数\\",\\n                    resortSum： \\"到过次数\\"\\n                },\\n                map: [\\n                    {\\n                        count: 1,\\n                        lat: \\"43.901522\\",\\n                        location: \\"[125.320801,43.901522]\\",\\n                        lon: \\"125.320801\\"\\n                    },\\n                    {\\n                        count: 1,\\n                        lat: \\"43.90155327690972\\",\\n                        location: \\"[125.32062065972222,43.90155327690972]\\",\\n                        lon: \\"125.32062065972222\\"\\n                    }\\n                ]\\n            }\\n            this.tableData.header = resData.header\\n            this.tableData.data = resData.list\\n            this.pager.totalPage = resData.data.total\\n            this.mapMarkers = resData.map\\n            // 第一个位置信息作为地图中心点\\n            this.mapCenter = this.mapMarkers.length ? [this.mapMarkers[0].lon,this.mapMarkers[0].lat] : []\\n        },\\n        // 定位点击的地址\\n        changeCenter(index) {\\n            const mapIndex = index + (this.pager.currentPage - 1) * this.pager.pageSize\\n            this.mapCenter = [\\n                this.mapMarkers[mapIndex].lon,\\n                this.mapMarkers[mapIndex].lat\\n            ]\\n        }\\n    }\\n}\\n<\/script>\\n\`\`\`\\n\\n> 这样就实现了以表格展示列表数据，点击地点名称地图组件定位到相对应位置的功能，希望能帮到你~","tagIds":"11,12,4,35","author":null,"authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":22,"type":1,"groupTimestamp":"1540330239533","cover":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/16/16c990d358feb200~tplv-t2oaga2asx-jj:216:144:0:0:q75.avis","categoryId":1,"created_at":"2023-11-22T21:31:44.000Z","updated_at":"2023-11-23T09:03:40.000Z","tagList":[{"id":4,"name":"CSS"},{"id":11,"name":"JavaScript"},{"id":12,"name":"ES6"},{"id":35,"name":"canvas"}],"createDate":"2018-10-24"}`,xn='{"id":32,"title":"配置 Supervisor，linux下的队列进程管理服务端","subTitle":"supervisord 是进程管理的服务端，常驻进程辅助干活; supervisorctl 是客户端，用来执行查看、加载等命令","link":null,"description":"","content":"### 一、Supervisor 安装\\n``` bash\\npip install supervisor\\n```\\n或者是\\n``` bash\\nyum install supervisor  # centos\\nsudo apt-get install supervisor  # ubuntu\\n```\\n\\n### 二、Supervisor 配置\\n#### 创建文件夹\\n``` bash\\nmkdir -p /etc/supervisor/\\nmkdir -p /etc/supervisor/supervisord.d/\\n```\\n\\n#### 生成配置文件\\n``` bash\\necho_supervisord_conf > /etc/supervisor/supervisord.conf\\n```\\n\\n#### 编辑配置文件\\n``` bash\\nvim /etc/supervisor/supervisord.conf\\n```\\n配置文件中配置除了最后两行，使用默认的就行。vim中使用G把光标跳到文件末尾，将最后一行修改为如下。\\n```\\n[include]\\nfiles = /etc/supervisor/supervisord.d/*.conf\\n```\\n\\n#### 创建启动脚本\\n```bash\\nvim /etc/supervisor/supervisord.d/shopApi.conf\\n```\\n\\n#### 启动脚本内容 注意修改项目artisan文件路径\\n``` bash\\n[program:xmshop-api]\\nprocess_name=%(program_name)s_%(process_num)02d\\ncommand=php /mnt/www/xmshopApi/artisan queue:work --tries 3 --sleep 3\\nautostart=true\\nautorestart=true\\nuser=root\\nnumprocs=1\\nredirect_stderr=true\\nstdout_logfile=/mnt/www/shopApi/storage/logs/supervisor.log\\n```\\n\\n### 三、启动 supervisor\\n``` bash\\n#启动supervisord服务\\nsupervisord -c /etc/supervisor/supervisord.conf\\n\\nsupervisorctl reload  # 重启 supervisord\\nsupervisorctl reread  # 重新读取配置文件 supervisord\\nsupervisorctl start lumen_worker:*  # 启动lumen_worker服务\\n\\nsupervisorctl restart lumen_worker:*  # 重启lumen_worker服务\\n```\\n\\n启动后查看一下运行状态\\n``` bash\\nsupervisorctl status\\n```\\n\\n![运行状态](https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/15/16c9470e1e76086d~tplv-t2oaga2asx-image.image)\\n\\n```!\\n修改了文件之后一定要重启才有用，reread没有用\\n```","tagIds":"27,29,32","author":"菜头","authorAvatar":"http://3.bp.blogspot.com/-powJHBZ_dI0/Uuax5aG2dQI/AAAAAAAAHjY/BrKvCsBzaCU/s1600/minions-gifs-animados-imagens-que-se-mexem.gif","weight":5,"type":1,"groupTimestamp":"1534887126376","cover":"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/15/16c94903ef214c68~tplv-t2oaga2asx-jj:216:144:0:0:q75.avis","categoryId":2,"created_at":"2023-11-22T21:33:08.000Z","updated_at":"2023-11-22T21:49:55.000Z","tagList":[{"id":27,"name":"Linux"},{"id":29,"name":"PhpStudy"},{"id":32,"name":"Laravel"}],"createDate":"2018-08-22"}',vn='{"id":16,"title":"永远想念","subTitle":"R·I·P","link":null,"description":"关系密切的长辈驾鹤西去，看着生命在与自己同一空间时间之下，悄然逝去，无力感袭来，好像除了接受现实，自己便再也做不了什么。人类力量之渺小，此刻展露无疑。","content":"在我很小的时候，父母就踏上了外出谋生之路，随后我也被他们接到东莞生活，往后的十几年我们家便扎根在了东莞。\\n\\n那时父母先行收拾行囊去东莞，彼时尚未读书的我，并不知道父母此行一走意味着什么。我依旧爱着这个静谧又温馨的小县城，喜欢从小巷子的这一头“哒哒哒”无头苍蝇一样的疯跑到另一头，路上经过的人家，我都认识。每一家有多少个小朋友，哪个可以当我的“马仔”，哪个是零食小“ATM”，哪个是没劲的“小哭包”，我了如指掌。这条小巷的一砖一瓦，一草一木，组成了我在乡下短暂的童年时光。\\n\\n随着爸妈先一步去城里做生意谋生，我便被爷爷奶奶从小县城接到了乡下生活。和爷爷奶奶相处时间甚少，导致初来乍到的我怯生生，许久不曾的乖巧让我老实待了几天，但“混世魔王”的称号不是白来的，很快我的本性暴露无遗。饭点不爱吃饭、喜欢尿床、出门必踩狗屎等等等等...当然这些优秀品质是长大后爷爷奶奶和我说的，当时的我可意识不到。\\n\\n那时候的奶奶身子骨还很硬朗，做事风风火火，干练果断，十里八乡出了名的能干。奶奶不仅要顾着田里的芝麻，还要打点家中大小事务，买菜烧水做饭拜老爷样样不在话下，但却被我这个混世魔王难住了。每天我都能给爷爷奶奶制造新的“惊喜”，二老平静的生活也因为我的到来，涟漪不断。\\n\\n在乡下的这几个月，我简直释放天性，好不自在。和奶奶也是天下第一好（自封）！奶奶为我做的事情，我铭记于心。她会在吃鱼的时候，亲手将鱼刺一根根拨开，把雪白喷香的鱼肉码在我的碗上；会在我平时出去疯玩的时候，将烧开的水装在两个杯子中轮番倾倒迅速晾凉，以便我回来能喝上一口凉白开；会在我熟睡的时候，用蒲扇在我身边一下一下的扇风，为我挡暑...\\n\\n这样的日子没过多久，几月后，爸妈来接我去城里。我在房间踌躇，舍不得爷爷奶奶。奶奶似乎看出来了，开玩笑似的说了句：哎呀，我们大魔王终于要离开了，奶奶又有清静日子过咯。\\n\\n随着这次和爸妈离开，往后的日子，便很少与爷爷奶奶连续的待上一些时日，过年匆匆相见，几顿饭下肚，便又匆匆别过，日子就这样从指缝溜走，转眼爷爷奶奶年过古稀，身体大不如前。\\n\\n人常说，永远不知道意外和明天那个先来到。初听时无意，再听已是局中人。前段时间看过一部日剧，大意是讲人这辈子只要行善积德，下辈子就能投胎做高阶动物。私心里希望奶奶能做个无忧无虑的存在，无所谓高阶与否，无病无灾足以。","tagIds":"","author":"苍蝇馆长","authorAvatar":"https://i.pinimg.com/originals/99/6c/f8/996cf873b3270a2249c3937b48b4faba.jpg","weight":1,"type":2,"groupTimestamp":"1699397519307","cover":"https://www.pngmart.com/files/12/Bob-Minion-PNG-Image.png","categoryId":null,"created_at":"2023-11-07T23:54:04.000Z","updated_at":"2023-11-10T14:44:30.000Z","createDate":"2023-11-08"}';var m=typeof globalThis<"u"&&globalThis||typeof self<"u"&&self||typeof global<"u"&&global||{},f={searchParams:"URLSearchParams"in m,iterable:"Symbol"in m&&"iterator"in Symbol,blob:"FileReader"in m&&"Blob"in m&&function(){try{return new Blob,!0}catch{return!1}}(),formData:"FormData"in m,arrayBuffer:"ArrayBuffer"in m};function wn(n){return n&&DataView.prototype.isPrototypeOf(n)}if(f.arrayBuffer)var yn=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],jn=ArrayBuffer.isView||function(n){return n&&yn.indexOf(Object.prototype.toString.call(n))>-1};function A(n){if(typeof n!="string"&&(n=String(n)),/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(n)||n==="")throw new TypeError('Invalid character in header field name: "'+n+'"');return n.toLowerCase()}function C(n){return typeof n!="string"&&(n=String(n)),n}function F(n){var e={next:function(){var a=n.shift();return{done:a===void 0,value:a}}};return f.iterable&&(e[Symbol.iterator]=function(){return e}),e}function u(n){this.map={},n instanceof u?n.forEach(function(e,a){this.append(a,e)},this):Array.isArray(n)?n.forEach(function(e){if(e.length!=2)throw new TypeError("Headers constructor: expected name/value pair to be length 2, found"+e.length);this.append(e[0],e[1])},this):n&&Object.getOwnPropertyNames(n).forEach(function(e){this.append(e,n[e])},this)}u.prototype.append=function(n,e){n=A(n),e=C(e);var a=this.map[n];this.map[n]=a?a+", "+e:e};u.prototype.delete=function(n){delete this.map[A(n)]};u.prototype.get=function(n){return n=A(n),this.has(n)?this.map[n]:null};u.prototype.has=function(n){return this.map.hasOwnProperty(A(n))};u.prototype.set=function(n,e){this.map[A(n)]=C(e)};u.prototype.forEach=function(n,e){for(var a in this.map)this.map.hasOwnProperty(a)&&n.call(e,this.map[a],a,this)};u.prototype.keys=function(){var n=[];return this.forEach(function(e,a){n.push(a)}),F(n)};u.prototype.values=function(){var n=[];return this.forEach(function(e){n.push(e)}),F(n)};u.prototype.entries=function(){var n=[];return this.forEach(function(e,a){n.push([a,e])}),F(n)};f.iterable&&(u.prototype[Symbol.iterator]=u.prototype.entries);function P(n){if(!n._noBody){if(n.bodyUsed)return Promise.reject(new TypeError("Already read"));n.bodyUsed=!0}}function U(n){return new Promise(function(e,a){n.onload=function(){e(n.result)},n.onerror=function(){a(n.error)}})}function Sn(n){var e=new FileReader,a=U(e);return e.readAsArrayBuffer(n),a}function An(n){var e=new FileReader,a=U(e),t=/charset=([A-Za-z0-9_-]+)/.exec(n.type),s=t?t[1]:"utf-8";return e.readAsText(n,s),a}function In(n){for(var e=new Uint8Array(n),a=new Array(e.length),t=0;t<e.length;t++)a[t]=String.fromCharCode(e[t]);return a.join("")}function O(n){if(n.slice)return n.slice(0);var e=new Uint8Array(n.byteLength);return e.set(new Uint8Array(n)),e.buffer}function V(){return this.bodyUsed=!1,this._initBody=function(n){this.bodyUsed=this.bodyUsed,this._bodyInit=n,n?typeof n=="string"?this._bodyText=n:f.blob&&Blob.prototype.isPrototypeOf(n)?this._bodyBlob=n:f.formData&&FormData.prototype.isPrototypeOf(n)?this._bodyFormData=n:f.searchParams&&URLSearchParams.prototype.isPrototypeOf(n)?this._bodyText=n.toString():f.arrayBuffer&&f.blob&&wn(n)?(this._bodyArrayBuffer=O(n.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):f.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(n)||jn(n))?this._bodyArrayBuffer=O(n):this._bodyText=n=Object.prototype.toString.call(n):(this._noBody=!0,this._bodyText=""),this.headers.get("content-type")||(typeof n=="string"?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):f.searchParams&&URLSearchParams.prototype.isPrototypeOf(n)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},f.blob&&(this.blob=function(){var n=P(this);if(n)return n;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))}),this.arrayBuffer=function(){if(this._bodyArrayBuffer){var n=P(this);return n||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer))}else{if(f.blob)return this.blob().then(Sn);throw new Error("could not read as ArrayBuffer")}},this.text=function(){var n=P(this);if(n)return n;if(this._bodyBlob)return An(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(In(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},f.formData&&(this.formData=function(){return this.text().then(Tn)}),this.json=function(){return this.text().then(JSON.parse)},this}var En=["CONNECT","DELETE","GET","HEAD","OPTIONS","PATCH","POST","PUT","TRACE"];function kn(n){var e=n.toUpperCase();return En.indexOf(e)>-1?e:n}function S(n,e){if(!(this instanceof S))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');e=e||{};var a=e.body;if(n instanceof S){if(n.bodyUsed)throw new TypeError("Already read");this.url=n.url,this.credentials=n.credentials,e.headers||(this.headers=new u(n.headers)),this.method=n.method,this.mode=n.mode,this.signal=n.signal,!a&&n._bodyInit!=null&&(a=n._bodyInit,n.bodyUsed=!0)}else this.url=String(n);if(this.credentials=e.credentials||this.credentials||"same-origin",(e.headers||!this.headers)&&(this.headers=new u(e.headers)),this.method=kn(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal||function(){if("AbortController"in m){var r=new AbortController;return r.signal}}(),this.referrer=null,(this.method==="GET"||this.method==="HEAD")&&a)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(a),(this.method==="GET"||this.method==="HEAD")&&(e.cache==="no-store"||e.cache==="no-cache")){var t=/([?&])_=[^&]*/;if(t.test(this.url))this.url=this.url.replace(t,"$1_="+new Date().getTime());else{var s=/\?/;this.url+=(s.test(this.url)?"&":"?")+"_="+new Date().getTime()}}}S.prototype.clone=function(){return new S(this,{body:this._bodyInit})};function Tn(n){var e=new FormData;return n.trim().split("&").forEach(function(a){if(a){var t=a.split("="),s=t.shift().replace(/\+/g," "),r=t.join("=").replace(/\+/g," ");e.append(decodeURIComponent(s),decodeURIComponent(r))}}),e}function Dn(n){var e=new u,a=n.replace(/\r?\n[\t ]+/g," ");return a.split("\r").map(function(t){return t.indexOf(`
`)===0?t.substr(1,t.length):t}).forEach(function(t){var s=t.split(":"),r=s.shift().trim();if(r){var c=s.join(":").trim();try{e.append(r,c)}catch(l){console.warn("Response "+l.message)}}}),e}V.call(S.prototype);function v(n,e){if(!(this instanceof v))throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');if(e||(e={}),this.type="default",this.status=e.status===void 0?200:e.status,this.status<200||this.status>599)throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");this.ok=this.status>=200&&this.status<300,this.statusText=e.statusText===void 0?"":""+e.statusText,this.headers=new u(e.headers),this.url=e.url||"",this._initBody(n)}V.call(v.prototype);v.prototype.clone=function(){return new v(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new u(this.headers),url:this.url})};v.error=function(){var n=new v(null,{status:200,statusText:""});return n.status=0,n.type="error",n};var _n=[301,302,303,307,308];v.redirect=function(n,e){if(_n.indexOf(e)===-1)throw new RangeError("Invalid status code");return new v(null,{status:e,headers:{location:n}})};var j=m.DOMException;try{new j}catch{j=function(e,a){this.message=e,this.name=a;var t=Error(e);this.stack=t.stack},j.prototype=Object.create(Error.prototype),j.prototype.constructor=j}function H(n,e){return new Promise(function(a,t){var s=new S(n,e);if(s.signal&&s.signal.aborted)return t(new j("Aborted","AbortError"));var r=new XMLHttpRequest;function c(){r.abort()}r.onload=function(){var o={statusText:r.statusText,headers:Dn(r.getAllResponseHeaders()||"")};s.url.startsWith("file://")&&(r.status<200||r.status>599)?o.status=200:o.status=r.status,o.url="responseURL"in r?r.responseURL:o.headers.get("X-Request-URL");var p="response"in r?r.response:r.responseText;setTimeout(function(){a(new v(p,o))},0)},r.onerror=function(){setTimeout(function(){t(new TypeError("Network request failed"))},0)},r.ontimeout=function(){setTimeout(function(){t(new TypeError("Network request timed out"))},0)},r.onabort=function(){setTimeout(function(){t(new j("Aborted","AbortError"))},0)};function l(o){try{return o===""&&m.location.href?m.location.href:o}catch{return o}}if(r.open(s.method,l(s.url),!0),s.credentials==="include"?r.withCredentials=!0:s.credentials==="omit"&&(r.withCredentials=!1),"responseType"in r&&(f.blob?r.responseType="blob":f.arrayBuffer&&(r.responseType="arraybuffer")),e&&typeof e.headers=="object"&&!(e.headers instanceof u||m.Headers&&e.headers instanceof m.Headers)){var i=[];Object.getOwnPropertyNames(e.headers).forEach(function(o){i.push(A(o)),r.setRequestHeader(o,C(e.headers[o]))}),s.headers.forEach(function(o,p){i.indexOf(p)===-1&&r.setRequestHeader(p,o)})}else s.headers.forEach(function(o,p){r.setRequestHeader(p,o)});s.signal&&(s.signal.addEventListener("abort",c),r.onreadystatechange=function(){r.readyState===4&&s.signal.removeEventListener("abort",c)}),r.send(typeof s._bodyInit>"u"?null:s._bodyInit)})}H.polyfill=!0;m.fetch||(m.fetch=H,m.Headers=u,m.Request=S,m.Response=v);const Pn=(n="",e=null)=>{let a="";if(e)for(let t in e)a+=`${a?"&":"?"}${t}=${e[t]}`;return`${n}${a}`};var $={exports:{}};(function(n,e){(function(a,t){n.exports=t()})(Y,function(){var a={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"};return function(t,s,r){var c=s.prototype,l=c.format;r.en.formats=a,c.format=function(i){i===void 0&&(i="YYYY-MM-DDTHH:mm:ssZ");var o=this.$locale().formats,p=function(g,d){return g.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,function(h,b,y){var J=y&&y.toUpperCase();return b||d[y]||a[y]||d[J].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,function(qn,W,X){return W||X.slice(1)})})}(i,o===void 0?{}:o);return l.call(this,p)}}})})($);var Cn=$.exports;const Fn=Z(Cn);Q.extend(Fn);var z=(n=>(n.GET="GET",n.POST="POST",n.PUT="PUT",n.PATCH="PATCH",n.DELETE="DELETE",n))(z||{});const On="http://127.0.0.1:3232",Mn=["POST","PUT","PATCH","DELETE"];let D=0;function I(){D===0&&!T().spinning&&T().$patch({spinning:!0}),D++}function x(){D--,D===0&&T().spinning&&T().$patch({spinning:!1})}function M(n,e){const a={};return Object.keys(n).forEach(t=>{a[t]=n[t]}),a}function Ln(n,e){const a={500:{type:"exception",msg:"接口异常"},501:{type:"exception",msg:"接口异常"},502:{type:"exception",msg:"接口异常"},503:{type:"exception",msg:"接口异常"},401:{type:"noPrmission",msg:"没有访问权限"},403:{type:"refuse",msg:"接口拒绝访问"},404:{type:"notFound",msg:"接口链接不存在"},405:{type:"Method Not Allowed",msg:"server: 方法不允许"}};let t={};n&&n.status&&(t=a[Number(n.status)],n.status===408&&e&&e.abort()),L.error((t==null?void 0:t.msg)||"未知的异常")}class Nn{async fetchHandler(e,a,t){I();let s=On+e;const r=Object.assign({headers:{"Content-Type":"application/x-www-form-urlencoded",Accept:"application/json"},method:"GET",timeout:1e4,mode:"cors",cache:"no-cache",params:{timeStamp:new Date().getTime()}},a);t&&(r.signal=t.signal);const c=r&&r.method&&Mn.includes(r.method);r.params&&r.method&&(c?(r.body=JSON.stringify(M(r.params)),r.headers&&Reflect.set(r.headers,"Content-Type","application/json")):r.method==="GET"&&(s=Pn(s,M(r.params))));try{const i=await(await Promise.race([fetch(s,r),new Promise((o,p)=>{setTimeout(()=>p({status:408,statusText:"请求超时，请稍后重试",url:e}),r.timeout)})])).json();return(i==null?void 0:i.resultCode)!==0&&L.error((i==null?void 0:i.resultMessage)||"接口请求出错"),await x(),i}catch(l){return x(),Ln(l,t),l}}}const{fetchHandler:Rn}=new Nn,E=async n=>{I();const e=await fetch(n);return await x(),e.json()},G=({url:n,param:e={},options:a={}})=>(e&&typeof e=="object"&&(a.params=e),a.method=z.POST,Rn(n,a)),w=N("article",{state:()=>({list:[],allArticles:[],articleAmount:0,tagAmount:0,categoryAmount:0,total:0,pageNo:1,pageSize:10,categoryId:null,tagId:null})}),k=N("note",{state:()=>({list:[],allNotes:[],noteAmount:0,total:0,pageNo:1,pageSize:10})}),_="/json/",Vn=async()=>{const n=await E(`${_}tags.json`);return w().$patch({tagAmount:n.length}),n},Hn=async()=>{const n=await E(`${_}categories.json`);return w().$patch({categoryAmount:n.length}),n},$n=async()=>await E(`${_}count.json`),zn=async()=>await E(`${_}blogInfo.json`),Gn=async n=>await E(n),Jn=()=>new Promise((n,e)=>{try{I();const a=Object.assign({"../../public/json/article/tech/2019/11.json":R,"../../public/json/article/tech/2020/14.json":B,"../../public/json/article/tech/2020/24.json":q}),t=[];for(let s in a)a[s]&&t.push(JSON.parse(a[s]));x(),n(t)}catch(a){x(),e(a)}}),Wn=()=>new Promise((n,e)=>{try{I();const a=[];let t=0;Bn({},!0).then(s=>{const r=JSON.parse(JSON.stringify(s));r.reverse();for(let c=r.length-1;c>=0;c--){for(let l=0;l<r[c].list.length&&(t++,a.push(r[c].list[l]),!(t>=3));l++);if(t>=3)break}}),x(),n(a)}catch(a){x(),e(a)}}),Bn=(n,e=!1)=>new Promise((a,t)=>{try{I();let s=[],r=[],c=0,l=0,i=0,o,p=0;if(e||w().$patch({categoryId:n.categoryId,tagId:n.tagId}),!w().allArticles.length||e){const g=[{date:"2023",list:Object.assign({"../../public/json/article/tech/2023/17.json":K,"../../public/json/article/tech/2023/34.json":nn})},{date:"2022",list:Object.assign({"../../public/json/article/tech/2022/19.json":en,"../../public/json/article/tech/2022/20.json":tn})},{date:"2021",list:Object.assign({})},{date:"2020",list:Object.assign({"../../public/json/article/tech/2020/14.json":B,"../../public/json/article/tech/2020/21.json":an,"../../public/json/article/tech/2020/24.json":q,"../../public/json/article/tech/2020/26.json":sn,"../../public/json/article/tech/2020/27.json":rn,"../../public/json/article/tech/2020/28.json":on,"../../public/json/article/tech/2020/29.json":ln})},{date:"2019",list:Object.assign({"../../public/json/article/tech/2019/10.json":cn,"../../public/json/article/tech/2019/11.json":R,"../../public/json/article/tech/2019/13.json":pn,"../../public/json/article/tech/2019/22.json":dn,"../../public/json/article/tech/2019/23.json":un,"../../public/json/article/tech/2019/25.json":mn,"../../public/json/article/tech/2019/33.json":gn})},{date:"2018",list:Object.assign({"../../public/json/article/tech/2018/12.json":fn,"../../public/json/article/tech/2018/30.json":hn,"../../public/json/article/tech/2018/31.json":bn,"../../public/json/article/tech/2018/32.json":xn})}];let d,h;g.forEach(b=>{if(p=Object.keys(b.list).length,p){l+=p,c+=p,o={date:b.date,list:[]},h={date:b.date,list:[]};for(let y in b.list)b.list[y]&&(d=JSON.parse(b.list[y]),h.list.push(d),e||(n.tagId&&!d.tagIds.split(",").includes(n.tagId+"")||n.categoryId&&Number(d.categoryId)!==Number(n.categoryId)?(l--,d="",s.length&&i===l&&s[s.length-1].push(JSON.parse(JSON.stringify(o)))):(i++,s.length||(s=[[]]),i>=n.pageSize&&i%n.pageSize===0?(o.list.push(d),s[s.length-1].push(JSON.parse(JSON.stringify(o))),s.push([]),o.list=[]):(o.list.push(d),i===l&&s[s.length-1].push(JSON.parse(JSON.stringify(o)))))));r.push(h)}}),e||w().$patch({list:s,total:l}),w().$patch({allArticles:r,articleAmount:c})}else w().allArticles.forEach(g=>{p=g.list.length,l+=p,o={date:g.date,list:[]},g.list.forEach(d=>{n.tagId&&!d.tagIds.split(",").includes(n.tagId+"")||n.categoryId&&Number(d.categoryId)!==Number(n.categoryId)?(l--,s.length&&i===l&&s[s.length-1].push(JSON.parse(JSON.stringify(o)))):(i++,s.length||(s=[[]]),i>=n.pageSize&&i%n.pageSize===0?(o.list.push(d),s[s.length-1].push(JSON.parse(JSON.stringify(o))),s.push([]),o.list=[]):(o.list.push(d),i===l&&s[s.length-1].push(JSON.parse(JSON.stringify(o)))))})}),w().$patch({list:s,total:l});x(),a(r)}catch(s){x(),t(s)}}),Xn=n=>new Promise((e,a)=>{try{I();let t=[],s=[],r=0,c=0,l=0,i,o=0;if(k().allNotes.length)k().allNotes.forEach(p=>{o=p.list.length,c+=o,i={date:p.date,list:[]},p.list.forEach(g=>{l++,t.length||(t=[[]]),l>=n.pageSize&&l%n.pageSize===0?(i.list.push(g),t[t.length-1].push(JSON.parse(JSON.stringify(i))),t.push([]),i.list=[]):(i.list.push(g),l===c&&t[t.length-1].push(JSON.parse(JSON.stringify(i))))})}),k().$patch({list:t,total:c});else{const p=[{date:"2023",list:Object.assign({"../../public/json/article/life/2023/16.json":vn})},{date:"2022",list:Object.assign({})},{date:"2021",list:Object.assign({})},{date:"2020",list:Object.assign({})},{date:"2019",list:Object.assign({})},{date:"2018",list:Object.assign({})}];let g,d;p.forEach(h=>{if(o=Object.keys(h.list).length,o){c+=o,r+=o,i={date:h.date,list:[]},d={date:h.date,list:[]};for(let b in h.list)h.list[b]&&(g=JSON.parse(h.list[b]),d.list.push(g),l++,t.length||(t=[[]]),l>=n.pageSize&&l%n.pageSize===0?(i.list.push(g),t[t.length-1].push(JSON.parse(JSON.stringify(i))),t.push([]),i.list=[]):(i.list.push(g),l===c&&t[t.length-1].push(JSON.parse(JSON.stringify(i)))));s.push(d)}}),k().$patch({list:t,total:c,allNotes:s,noteAmount:r})}x(),e(s)}catch(t){x(),a(t)}}),Yn=async n=>await G({url:"/admin/createArticle",param:n}),Zn=async n=>await G({url:"/admin/updateArticle",param:n});export{Vn as a,Hn as b,$n as c,Jn as d,Wn as e,zn as f,Bn as g,k as h,Xn as i,Zn as j,Yn as k,Gn as l,_ as p,w as u};
